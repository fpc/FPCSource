#
#   Makefile.fpc for Free Pascal Embedded RTL
#

[package]
main=rtl

[target]
loaders=$(LOADERS)


# not all targets include enough features to build all units so
# the common units which are not compiled for all CPUs are stored in
# CPU_SPECIFIC_COMMON_UNITS
units=$(SYSTEMUNIT) $(CPU_UNITS) $(UUCHARUNIT) $(OBJPASUNIT) $(ISO7185UNIT) $(EXTPASUNIT) $(HEAPMGRUNIT) $(CONSOLEIOUNIT) $(CPU_SPECIFIC_COMMON_UNITS) \
# $(MACPASUNIT) $(ISO7185UNIT) $(STRINGSUNIT)
       $(STRINGSUNIT) \
       $(SORTBASEUNIT) \
       $(DOSUNIT) \
       $(CTYPESUNIT) \
       $(CHARSETUNIT) $(CPALLUNIT) \
       $(SYSCONSTUNIT)
#implicitunits=exeinfo $(CP_UNITS)

#rsts=$(MATHUNIT) $(RTLCONSTSUNIT) $(TYPINFOUNIT) $(CLASSESUNIT) $(SYSCONSTUNIT)

[require]
nortl=y

[install]
fpcpackage=y

[default]
target=embedded

[compiler]
includedir=$(INC) $(PROCINC)
sourcedir=$(INC) $(PROCINC) $(COMMON) $(ARCH)

[prerules]
RTL=..
INC=$(RTL)/inc
COMMON=$(RTL)/common
PROCINC=$(RTL)/$(CPU_TARGET)
UNITPREFIX=rtl
LOADERS=
ifeq ($(ARCH),mipsel)
ifeq ($(SUBARCH),pic32mx)
override LOADERS=startup
endif
endif

ifdef RELEASE
override FPCOPT+=-Ur
endif

CPU_UNITS=
SYSINIT_UNITS=
CPU_SPECIFIC_COMMON_UNITS=$(SYSUTILSUNIT) $(MATHUNIT) $(CLASSESUNIT) \
			  $(FGLUNIT) $(MACPASUNIT) $(TYPINFOUNIT) $(TYPESUNIT) \
			  $(RTLCONSTSUNIT) $(GETOPTSUNIT) $(LINEINFOUNIT) $(SOFTFPUUNIT)

# Sysutils special deps
SYSUTILS_DEPS_OS=$(HEAPMGRUNIT)$(PPUEXT)
# Dos unit, local source
DOSDIR=.
# Dos unit uses objfpc mode
DOS_DEPS_OS=$(OBJPASUNIT)$(PPUEXT)

ifeq ($(ARCH),aarch64)
CPU_UNITS=$(RASPI3UNIT) $(MMIOUNIT) $(MAILBOXUNIT) $(RASPIUARTUNIT) $(GPIOUNIT)
CPU_UNITS_DEFINED=1
endif

ifeq ($(ARCH),arm)
ifeq ($(SUBARCH),armv7m)
CPU_UNITS=$(LM3FURYUNIT) $(LM3TEMPESTUNIT) $(STM32F10X_LDUNIT) $(STM32F10X_MDUNIT) $(STM32F10X_HDUNIT) \
	$(STM32F10X_XLUNIT) $(STM32F10X_CONNUNIT) $(STM32F10X_CLUNIT) $(LPC13XXUNIT) $(LPC1768UNIT) \
	$(SAM3X8EUNIT) $(XMC4500UNIT) $(CORTEXM3UNIT) $(CORTEXM4UNIT) # thumb2_bare
CPU_UNITS_DEFINED=1
endif
ifeq ($(SUBARCH),armv7em)
CPU_UNITS=$(LM4F120UNIT) $(XMC4500UNIT) $(MK20D5UNIT) $(MK20D7UNIT) $(MK22F51212UNIT) $(MK64F12UNIT) \
	  $(STM32F401XXUNIT) $(STM32F407XXUNIT) $(STM32F411XEUNIT) $(STM32F429XXUNIT) $(STM32F446XXUNIT) \
	  $(STM32F745UNIT) $(STM32F746UNIT) $(STM32F756UNIT) $(NRF52UNIT) $(CORTEXM3UNIT) $(CORTEXM4UNIT) $(CORTEXM7UNIT) \
	  $(SAMD51P19AUNIT) # thumb2_bare
CPU_UNITS_DEFINED=1
endif
ifeq ($(SUBARCH),armv4t)
CPU_UNITS=$(LPC21X4UNIT) $(AT91SAM7X256UNIT) $(SC32442BUNIT)
CPU_UNITS_DEFINED=1
endif
ifeq ($(SUBARCH),armv4)
CPU_UNITS=$(LPC21X4UNIT) $(AT91SAM7X256UNIT) $(SC32442BUNIT)
CPU_UNITS_DEFINED=1
endif
ifeq ($(SUBARCH),armv6m)
CPU_UNITS=$(LPC8XXUNIT) $(LPC11XXUNIT) $(LPC122XUNIT) $(STM32F0XXUNIT) $(NRF51UNIT) $(CORTEXM0UNIT) $(RP2040UNIT)
CPU_UNITS_DEFINED=1
endif
ifeq ($(SUBARCH),armv7a)
CPU_UNITS=$(ALLWINNER_A20UNIT) $(RASPI2UNIT)
CPU_UNITS_DEFINED=1
endif
ifeq ($(CPU_UNITS_DEFINED),)
$(error No CPUs enabled for given SUBARCH, pass either a SUBARCH or set CPU_UNITS_DEFINED=1 if you know what you are doing)
endif
endif

ifeq ($(ARCH),avr)
CPU_SPECIFIC_COMMON_UNITS=intrinsics
ifeq ($(SUBARCH),avrtiny)
CPU_UNITS=attiny4 attiny5 attiny9 attiny10 attiny20 attiny40 attiny102 attiny104
CPU_UNITS_DEFINED=1
endif
ifeq ($(SUBARCH),avr1)
CPU_UNITS=attiny11 attiny12 attiny15 attiny28
CPU_UNITS_DEFINED=1
endif
ifeq ($(SUBARCH),avr2)
CPU_UNITS=attiny26
CPU_UNITS_DEFINED=1
endif
ifeq ($(SUBARCH),avr25)
CPU_UNITS=at90usb82 attiny13 attiny13a attiny24 attiny24a attiny25 attiny43u attiny44 \
          attiny44a attiny45 attiny48 attiny84 attiny84a attiny85 attiny87 attiny88 \
          attiny261 attiny261a attiny441 attiny461 attiny461a attiny828 attiny841 \
          attiny861 attiny861a attiny2313 attiny2313a attiny4313
CPU_UNITS_DEFINED=1
endif
ifeq ($(SUBARCH),avr35)
CPU_UNITS=at90usb162 atmega8u2 atmega16u2 atmega32u2 attiny167 attiny1634
CPU_UNITS_DEFINED=1
endif
ifeq ($(SUBARCH),avr4)
CPU_UNITS=at90pwm1 at90pwm2b at90pwm3 at90pwm3b at90pwm81 ata6285 ata6286 atmega8 \
          atmega8a atmega8hva atmega48 atmega48a atmega48p atmega48pa atmega48pb \
          atmega88 atmega88a atmega88p atmega88pa atmega88pb atmega8515 atmega8535
CPU_UNITS_DEFINED=1
endif
ifeq ($(SUBARCH),avr5)
CPU_UNITS=avrsim at90can32 at90can64 at90pwm161 at90pwm216 at90pwm316 at90usb646 at90usb647 \
          atmega16 atmega16a atmega16hva atmega16hvb atmega16hvbrevb atmega16m1 \
          atmega16u4 atmega32 atmega32a atmega32c1 atmega32hvb atmega32hvbrevb atmega32m1 \
          atmega32u4 atmega64 atmega64a atmega64c1 atmega64hve2 atmega64m1 atmega64rfr2 \
          atmega162 atmega164a atmega164p atmega164pa atmega165a atmega165p atmega165pa \
          atmega168 atmega168a atmega168p atmega168pa atmega168pb atmega169a atmega169p \
          atmega169pa atmega324a atmega324p atmega324pa atmega324pb atmega325 atmega325a \
          atmega325p atmega325pa atmega328 atmega328p atmega328pb atmega329 atmega329a \
          atmega329p atmega329pa atmega406 atmega640 atmega644 atmega644a atmega644p \
          atmega644pa atmega644rfr2 atmega645 atmega645a atmega645p atmega649 atmega649a \
          atmega649p atmega3250 atmega3250a atmega3250p atmega3250pa atmega3290 \
          atmega3290a atmega3290p atmega3290pa atmega6450 atmega6450a atmega6450p \
          atmega6490 atmega6490a atmega6490p
CPU_UNITS_DEFINED=1
endif
ifeq ($(SUBARCH),avr51)
CPU_UNITS=at90can128 at90usb1286 at90usb1287 atmega128 atmega128a atmega128rfa1 \
          atmega128rfr2 atmega1280 atmega1281 atmega1284 atmega1284p atmega1284rfr2
CPU_UNITS_DEFINED=1
endif
ifeq ($(SUBARCH),avr6)
CPU_UNITS=avrsim atmega256rfr2 atmega2560 atmega2561 atmega2564rfr2
CPU_UNITS_DEFINED=1
endif
ifeq ($(SUBARCH),avrxmega2)
CPU_UNITS=atxmega8e5 atxmega16a4 atxmega16a4u atxmega16c4 atxmega16d4 atxmega16e5 \
          atxmega32a4 atxmega32a4u atxmega32c3 atxmega32c4 atxmega32d3 atxmega32d4 \
          atxmega32e5 avr64da28 avr64da28s avr64da32 avr64da32s avr64da48 avr64da48s \
          avr64da64 avr64da64s avr64db28 avr64db32 avr64db48 avr64db64 avr64dd14 \
          avr64dd20 avr64dd28 avr64dd32 avr64du28 avr64du32 avr64ea28 avr64ea32 \
          avr64ea48
CPU_UNITS_DEFINED=1
endif
ifeq ($(SUBARCH),avrxmega3)
CPU_UNITS=atmega808 atmega809 atmega1608 atmega1609 atmega3208 atmega3209 atmega4808 \
          atmega4809 attiny202 attiny204 attiny212 attiny214 attiny402 attiny404 \
          attiny406 attiny412 attiny414 attiny416  attiny416auto attiny417 attiny424 \
          attiny426 attiny427 attiny804 attiny806 attiny807 attiny814 attiny816 \
          attiny817 attiny824 attiny826 attiny827 attiny1604 attiny1606 attiny1607 \
          attiny1614 attiny1616 attiny1617 attiny1624 attiny1626 attiny1627 \
          attiny3216 attiny3217 attiny3224 attiny3226 attiny3227 avr16dd14 avr16dd20 \
          avr16dd28 avr16dd32 avr16du14 avr16du20 avr16du28 avr16du32 avr16ea28 \
          avr16ea32 avr16ea48 avr16eb14 avr16eb20 avr16eb28 avr16eb32 avr32da28 \
          avr32da28s avr32da32 avr32da32s avr32da48 avr32da48s avr32db28 avr32db32 \
          avr32db48 avr32dd14 avr32dd20 avr32dd28 avr32dd32 avr32du14 avr32du20 \
          avr32du28 avr32du32 avr32ea28 avr32ea32 avr32ea48 avr32eb14 avr32eb20 \
          avr32eb28 avr32eb32
CPU_UNITS_DEFINED=1
endif
ifeq ($(SUBARCH),avrxmega4)
CPU_UNITS=atxmega64a3 atxmega64a3u atxmega64a4u atxmega64b1 atxmega64b3 atxmega64c3 \
          atxmega64d3 atxmega64d4 avr128da28 avr128da28s avr128da32 avr128da32s \
          avr128da48 avr128da48s avr128da64 avr128da64s avr128db28 avr128db32 avr128db48 \
          avr128db64
CPU_UNITS_DEFINED=1
endif
ifeq ($(SUBARCH),avrxmega5)
CPU_UNITS=atxmega64a1 atxmega64a1u
CPU_UNITS_DEFINED=1
endif
ifeq ($(SUBARCH),avrxmega6)
CPU_UNITS=atxmega128a3 atxmega128a3u atxmega128b1 atxmega128b3 atxmega128c3 atxmega128d3 \
          atxmega128d4 atxmega192a3 atxmega192a3u atxmega192c3 atxmega192d3 atxmega256a3 \
          atxmega256a3b atxmega256a3bu atxmega256a3u atxmega256c3 atxmega256d3 atxmega384c3 \
          atxmega384d3
CPU_UNITS_DEFINED=1
endif
ifeq ($(SUBARCH),avrxmega7)
CPU_UNITS=atxmega128a1 atxmega128a1u atxmega128a4u
CPU_UNITS_DEFINED=1
endif
ifeq ($(CPU_UNITS_DEFINED),)
$(error No CPUs enabled for given SUBARCH, pass either a SUBARCH or set CPU_UNITS_DEFINED=1 if you know what you are doing)
endif
endif

ifeq ($(ARCH),i386)
CPU_UNITS=$(MULTIBOOTUNIT)
CPU_UNITS_DEFINED=1
ifeq ($(CPU_UNITS_DEFINED),)
$(error No CPUs enabled for given SUBARCH, pass either a SUBARCH or set CPU_UNITS_DEFINED=1 if you know what you are doing)
endif
endif

ifeq ($(ARCH),i8086)
# Always include rtl.cfg config file for i8086
override FPCOPT+=@rtl.cfg
CPU_SPECIFIC_COMMON_UNITS=
endif

ifeq ($(ARCH),z80)
# Always include rtl.cfg config file for z80
override FPCOPT+=@rtl.cfg
CPU_SPECIFIC_COMMON_UNITS=
endif

ifeq ($(ARCH),x86_64)
# CPU_UNITS=$(MULTIBOOTUNIT)
endif

ifeq ($(ARCH),m68k)
# CPU_UNITS=$(MULTIBOOTUNIT)
endif

ifeq ($(ARCH),mipsel)
ifeq ($(SUBARCH),pic32mx)
CPU_UNITS=pic32mx1xxfxxxb pic32mx2xxfxxxb pic32mx1xxfxxxc pic32mx2xxfxxxc pic32mx1xxfxxxd pic32mx2xxfxxxd pic32mx7x5fxxxl pic32mx7x5fxxxh
CPU_UNITS_DEFINED=1
endif
ifeq ($(CPU_UNITS_DEFINED),)
$(error No CPUs enabled for given SUBARCH, pass either a SUBARCH or set CPU_UNITS_DEFINED=1 if you know what you are doing)
endif
endif

ifeq ($(ARCH),riscv32)
CPU_SPECIFIC_COMMON_UNITS=$(SYSUTILSUNIT) $(MATHUNIT) $(CLASSESUNIT) $(FGLUNIT) $(MACPASUNIT) $(TYPINFOUNIT) $(TYPESUNIT) $(RTLCONSTSUNIT) $(GETOPTSUNIT) $(LINEINFOUNIT)
ifeq ($(SUBARCH),rv32ec)
override FPCOPT+=-Cprv32ec
CPU_UNITS=CH32VxBootstrap
CPU_UNITS_DEFINED=1
endif
ifeq ($(SUBARCH),rv32e)
override FPCOPT+=-Cprv32e
CPU_UNITS=CH32VxBootstrap
CPU_UNITS_DEFINED=1
endif
ifeq ($(SUBARCH),rv32imac)
override FPCOPT+=-Cprv32imac
CPU_UNITS=CH32VxBootstrap $(GD32VF103XXUNIT)
CPU_UNITS_DEFINED=1
endif
ifeq ($(SUBARCH),rv32imac_zicsr_zifencei)
override FPCOPT+=-Cprv32imac
CPU_UNITS=CH32VxBootstrap $(FE310G000UNIT) $(FE310G002UNIT)
CPU_UNITS_DEFINED=1
endif
ifeq ($(SUBARCH),rv32i)
override FPCOPT+=-Cprv32i
CPU_UNITS=CH32VxBootstrap
CPU_UNITS_DEFINED=1
endif
ifeq ($(CPU_UNITS_DEFINED),)
$(error No CPUs enabled for given SUBARCH, pass either a SUBARCH or set CPU_UNITS_DEFINED=1 if you know what you are doing)
endif
endif

ifeq ($(ARCH),riscv64)
CPU_UNITS=
CPU_UNITS_DEFINED=1
ifeq ($(CPU_UNITS_DEFINED),)
$(error No CPUs enabled for given SUBARCH, pass either a SUBARCH or set CPU_UNITS_DEFINED=1 if you know what you are doing)
endif
endif

ifeq ($(ARCH),xtensa)
ifeq ($(SUBARCH),lx106)
CPU_UNITS=$(ESP8266UNIT)
CPU_UNITS_DEFINED=1
endif
ifeq ($(CPU_UNITS_DEFINED),)
$(error No CPUs enabled for given SUBARCH, pass either a SUBARCH or set CPU_UNITS_DEFINED=1 if you know what you are doing)
endif
endif

ifeq ($(ARCH),wasm32)
CPU_SPECIFIC_COMMON_UNITS:=$(filter-out $(SOFTFPUUNIT), $(filter-out $(LINEINFOUNIT), $(CPU_SPECIFIC_COMMON_UNITS)))
endif

# Paths
OBJPASDIR=$(RTL)/objpas

[rules]
# .NOTPARALLEL:
# Get the system independent include file names.
# This will set the following variables :
# SYSINCNAMES
include $(INC)/makefile.inc
SYSINCDEPS=$(addprefix $(INC)/,$(SYSINCNAMES))

# Get the processor dependent include file names.
# This will set the following variables :
# CPUINCNAMES
include $(PROCINC)/makefile.cpu
SYSCPUDEPS=$(addprefix $(PROCINC)/,$(CPUINCNAMES))

# Put system unit dependencies together.
SYSDEPS=$(SYSINCDEPS) $(SYSCPUDEPS) $(INC)/softfpu.pp
override FPC_SYSTEM_OPT += @system.cfg

#
# Loaders
#

startup$(OEXT) : $(CPU_TARGET)/startup.s
        $(AS) $(ASTARGET) -o $(UNITTARGETDIRPREFIX)startup$(OEXT) $(CPU_TARGET)/startup.s  -mabi=32 -march=pic32mx -mtune=pic32mx -W -EL  -msym32

#
# Base Units (System, $(STRINGSUNIT), os-dependent-base-unit)
#

CONSOLEIO_DEPS= consoleio.pp $(SYSTEMUNIT)$(PPUEXT) $(OBJPASUNIT)$(PPUEXT) \
        $(CONSOLEIO_DEPS_OS) $(CONSOLEIO_DEPS_CPU)

consoleio$(PPUEXT) : $(CONSOLEIO_DEPS)
        $(COMPILER) $(CONSOLEIO_OPT) $<

EmbeddedApi.ConsoleIO$(PPUEXT) : $(NSOSDIR)/EmbeddedApi.ConsoleIO.pp $(CONSOLEIO_DEPS)
	$(COMPILER) $(CONSOLEIO_OPT) -Fi. $<

HEAPMGR_DEPS= heapmgr.pp $(SYSTEMUNIT)$(PPUEXT) $(OBJPASUNIT)$(PPUEXT) \
        $(HEAPMGR_DEPS_OS) $(HEAPMGR_DEPS_CPU)

heapmgr$(PPUEXT) : $(HEAPMGR_DEPS)
        $(COMPILER) $(HEAPMGR_OPT) $<

EmbeddedApi.HeapMGR$(PPUEXT) : $(NSOSDIR)/EmbeddedApi.HeapMGR.pp $(HEAPMGR_DEPS)
	$(COMPILER) $(HEAPMGR_OPT) -Fi. $<

#
# Unit specific rules
#

define CPU_UNITS_RULE
ifndef FPC_DOTTEDUNITS
$(1)$(PPUEXT): $(ARCH)/$(1).pp $(SYSTEMUNIT)$(PPUEXT) $(addsuffix $(PPUEXT),$(CPU_SPECIFIC_COMMON_UNITS))
else
$(eval UNIT_REG_NAME=$(subst EmbeddedApi.,,$(1)))
$(eval UNIT_REG_NAME=$(subst ARMApi.,,$(UNIT_REG_NAME)))
ifeq ($(ARCH),avr)
# No dotted rules for AVR cpu yet
$(1)$(PPUEXT):  $(ARCH)/$(1).pp $(SYSTEMUNIT)$(PPUEXT) $(addsuffix $(PPUEXT),$(CPU_SPECIFIC_COMMON_UNITS))
else
# mipsel is also not yet in namespaced
ifeq ($(ARCH),mipsel)
$(1)$(PPUEXT): $(ARCH)/$(1).pp $(SYSTEMUNIT)$(PPUEXT) $(addsuffix $(PPUEXT),$(CPU_SPECIFIC_COMMON_UNITS))
else
$(1)$(PPUEXT): $(NSOSDIR)/$(ARCH)/$(1).pp $(ARCH)/$(UNIT_REG_NAME).pp $(SYSTEMUNIT)$(PPUEXT) $(addsuffix $(PPUEXT),$(CPU_SPECIFIC_COMMON_UNITS))
endif
endif
endif
endef
$(foreach unit,$(CPU_UNITS),$(eval $(call CPU_UNITS_RULE,$(unit))))

ifndef FPC_DOTTEDUNITS
$(addsuffix $(PPUEXT),$(CPU_UNITS)):
	$(COMPILER) -g $<
else
$(addsuffix $(PPUEXT),$(CPU_UNITS)):
	$(COMPILER) -g -Fi$(OSDIR) -Fi$(OSDIR)/$(ARCH) $<
endif

# AVR specific units

intrinsics$(PPUEXT): $(PROCINC)/intrinsics.pp $(SYSTEMUNIT)$(PPUEXT)
	$(COMPILER) $<

avrsim$(PPUEXT): $(ARCH)/avrsim.pp $(HEAPMGRUNIT)$(PPUEXT) $(CONSOLEIOUNIT)$(PPUEXT) $(SYSTEMUNIT)$(PPUEXT)
	$(COMPILER) $(ARCH)/avrsim.pp

# i386 specific units


MULTIBOOT_DEPS = $(ARCH)/multiboot.pp $(SYSTEMUNIT)$(PPUEXT) $(OBJPASUNIT)$(PPUEXT) \
        $(MULTIBOOT_DEPS_OS) $(MULTIBOOT_DEPS_CPU)

multiboot$(PPUEXT) : $(MULTIBOOT_DEPS)
        $(COMPILER) $(MULTIBOOT_OPT) $<

EmbeddedApi.multiboot$(PPUEXT) : $(NSOSDIR)/$(ARCH)/EmbeddedApi.multiboot.pp $(MULTIBOOT_DEPS)
	$(COMPILER) $(MULTIBOOT_OPT) -Fi. -Fi$(ARCH) $<

# ARM specific units

#raspi2$(PPUEXT): $(ARCH)/raspi2.pp $(CONSOLEIOUNIT)$(PPUEXT) $(SYSTEMUNIT)$(PPUEXT)
#	$(COMPILER) $(ARCH)/raspi2.pp

RASPI2_DEPS = $(ARCH)/raspi2.pp $(SYSTEMUNIT)$(PPUEXT) $(OBJPASUNIT)$(PPUEXT) \
        $(RASPI2_DEPS_OS) $(RASPI2_DEPS_CPU)

raspi2$(PPUEXT) : $(RASPI2_DEPS)
        $(COMPILER) $(RASPI2_OPT) $<

EmbeddedApi.Raspi2$(PPUEXT) : $(NSOSDIR)/$(ARCH)/EmbeddedApi.Raspi2.pp $(RASPI2_DEPS)
	$(COMPILER) $(RASPI2_OPT) -Fi. -Fi$(ARCH) $<

# AARCH64 specific units

# gpio unit
#
GPIO_DEPS = $(ARCH)/gpio.pp $(SYSTEMUNIT)$(PPUEXT) $(OBJPASUNIT)$(PPUEXT) \
        $(GPIO_DEPS_OS) $(GPIO_DEPS_CPU)

gpio$(PPUEXT) : $(GPIO_DEPS)
        $(COMPILER) $(GPIO_OPT) $<

EmbeddedApi.gpio$(PPUEXT) : $(NSOSDIR)/$(ARCH)/EmbeddedApi.gpio.pp $(GPIO_DEPS)
	$(COMPILER) $(GPIO_OPT) -Fi. -Fi$(ARCH) $<

#mmio$(PPUEXT): $(ARCH)/mmio.pp $(SYSTEMUNIT)$(PPUEXT)
#	$(COMPILER) $(ARCH)/mailbox.pp
MMIO_DEPS = $(ARCH)/mmio.pp $(SYSTEMUNIT)$(PPUEXT) $(OBJPASUNIT)$(PPUEXT) \
        $(MMIO_DEPS_OS) $(MMIO_DEPS_CPU)

mmio$(PPUEXT) : $(MMIO_DEPS)
        $(COMPILER) $(MMIO_OPT) $<

EmbeddedApi.mmio$(PPUEXT) : $(NSOSDIR)/$(ARCH)/EmbeddedApi.mmio.pp $(MMIO_DEPS)
	$(COMPILER) $(MMIO_OPT) -Fi. -Fi$(ARCH) $<

#mailbox$(PPUEXT): $(ARCH)/mailbox.pp mmio$(PPUEXT) $(SYSTEMUNIT)$(PPUEXT)
#	$(COMPILER) $(ARCH)/mailbox.pp

MAILBOX_DEPS = $(ARCH)/mailbox.pp $(SYSTEMUNIT)$(PPUEXT) $(OBJPASUNIT)$(PPUEXT) $(MMIOUNIT)$(PPUEXT) \
        $(MAILBOX_DEPS_OS) $(MAILBOX_DEPS_CPU)

mailbox$(PPUEXT) : $(MAILBOX_DEPS)
        $(COMPILER) $(MAILBOX_OPT) $<

EmbeddedApi.mailbox$(PPUEXT) : $(NSOSDIR)/$(ARCH)/EmbeddedApi.mailbox.pp $(MAILBOX_DEPS)
	$(COMPILER) $(MAILBOX_OPT) -Fi. -Fi$(ARCH) $<

#raspiuart$(PPUEXT): $(ARCH)/raspiuart.pp mmio$(PPUEXT) mailbox$(PPUEXT) gpio$(PPUEXT) $(SYSTEMUNIT)$(PPUEXT)
#	$(COMPILER) $(ARCH)/raspiuart.pp

RASPIUART_DEPS = $(ARCH)/raspiuart.pp $(SYSTEMUNIT)$(PPUEXT) $(OBJPASUNIT)$(PPUEXT) \
	$(MAILBOXUNIT)$(PPUEXT) $(GPIOUNIT)$(PPUEXT) $(MMIOUNIT)$(PPUEXT) \
        $(RASPIUART_DEPS_OS) $(RASPIUART_DEPS_CPU)

raspiuart$(PPUEXT) : $(RASPIUART_DEPS)
        $(COMPILER) $(RASPIUART_OPT) $<

EmbeddedApi.raspiuart$(PPUEXT) : $(NSOSDIR)/$(ARCH)/EmbeddedApi.raspiuart.pp $(RASPIUART_DEPS)
	$(COMPILER) $(RASPIUART_OPT) -Fi. -Fi$(ARCH) $<

#raspi3$(PPUEXT): $(ARCH)/raspi3.pp $(CONSOLEIOUNIT)$(PPUEXT) mmio$(PPUEXT) mailbox$(PPUEXT) raspiuart$(PPUEXT) gpio$(PPUEXT) $(SYSTEMUNIT)$(PPUEXT)
#	$(COMPILER) $(ARCH)/raspi3.pp

RASPI3_DEPS = $(ARCH)/raspi3.pp $(SYSTEMUNIT)$(PPUEXT) $(OBJPASUNIT)$(PPUEXT) \
	$(CONSOLEIOUNIT)$(PPUEXT) $(MAILBOXUNIT)$(PPUEXT) $(GPIOUNIT)$(PPUEXT) \
	$(MMIOUNIT)$(PPUEXT) $(RASPIUARTUNIT)$(PPUEXT)  \
        $(RASPI3_DEPS_OS) $(RASPI3_DEPS_CPU)

raspi3$(PPUEXT) : $(RASPI3_DEPS)
        $(COMPILER) $(RASPI3_OPT) $<

EmbeddedApi.raspi3$(PPUEXT) : $(NSOSDIR)/$(ARCH)/EmbeddedApi.raspi3.pp $(RASPI3_DEPS)
	$(COMPILER) $(RASPI3_OPT) -Fi. -Fi$(ARCH) $<


