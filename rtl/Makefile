#
# Don't edit, this file is generated by FPCMake Version 2.0.0
#
default: all
MAKEFILETARGETS=i386-linux i386-go32v2 i386-win32 i386-os2 i386-freebsd i386-beos i386-haiku i386-netbsd i386-solaris i386-netware i386-openbsd i386-wdosx i386-darwin i386-emx i386-watcom i386-netwlibc i386-wince i386-embedded i386-symbian i386-nativent i386-iphonesim i386-android i386-aros m68k-linux m68k-netbsd m68k-amiga m68k-atari m68k-palmos m68k-macosclassic m68k-embedded powerpc-linux powerpc-netbsd powerpc-amiga powerpc-macosclassic powerpc-darwin powerpc-morphos powerpc-embedded powerpc-wii powerpc-aix sparc-linux sparc-netbsd sparc-solaris sparc-embedded x86_64-linux x86_64-freebsd x86_64-haiku x86_64-netbsd x86_64-solaris x86_64-openbsd x86_64-darwin x86_64-win64 x86_64-embedded x86_64-iphonesim x86_64-android x86_64-aros x86_64-dragonfly arm-linux arm-netbsd arm-palmos arm-wince arm-gba arm-nds arm-embedded arm-symbian arm-android arm-aros arm-ios powerpc64-linux powerpc64-darwin powerpc64-embedded powerpc64-aix avr-embedded armeb-linux armeb-embedded mips-linux mipsel-linux mipsel-embedded mipsel-android jvm-java jvm-android i8086-embedded i8086-msdos i8086-win16 aarch64-linux aarch64-darwin aarch64-android aarch64-ios wasm-wasm sparc64-linux
BSDs = freebsd netbsd openbsd darwin dragonfly
UNIXs = linux $(BSDs) solaris qnx haiku aix
LIMIT83fs = go32v2 os2 emx watcom msdos win16 atari
OSNeedsComspecToRunBatch = go32v2 watcom
FORCE:
.PHONY: FORCE
override PATH:=$(patsubst %/,%,$(subst \,/,$(PATH)))
ifneq ($(findstring darwin,$(OSTYPE)),)
inUnix=1 #darwin
SEARCHPATH:=$(filter-out .,$(subst :, ,$(PATH)))
else
ifeq ($(findstring ;,$(PATH)),)
inUnix=1
SEARCHPATH:=$(filter-out .,$(subst :, ,$(PATH)))
else
SEARCHPATH:=$(subst ;, ,$(PATH))
endif
endif
SEARCHPATH+=$(patsubst %/,%,$(subst \,/,$(dir $(MAKE))))
PWD:=$(strip $(wildcard $(addsuffix /pwd.exe,$(SEARCHPATH))))
ifeq ($(PWD),)
PWD:=$(strip $(wildcard $(addsuffix /pwd,$(SEARCHPATH))))
ifeq ($(PWD),)
$(error You need the GNU utils package to use this Makefile)
else
PWD:=$(firstword $(PWD))
SRCEXEEXT=
endif
else
PWD:=$(firstword $(PWD))
SRCEXEEXT=.exe
endif
ifndef inUnix
ifeq ($(OS),Windows_NT)
inWinNT=1
else
ifdef OS2_SHELL
inOS2=1
endif
endif
else
ifneq ($(findstring cygdrive,$(PATH)),)
inCygWin=1
endif
endif
ifdef inUnix
SRCBATCHEXT=.sh
else
ifdef inOS2
SRCBATCHEXT=.cmd
else
SRCBATCHEXT=.bat
endif
endif
ifdef COMSPEC
ifneq ($(findstring $(OS_SOURCE),$(OSNeedsComspecToRunBatch)),)
ifndef RUNBATCH
RUNBATCH=$(COMSPEC) /C
endif
endif
endif
ifdef inUnix
PATHSEP=/
else
PATHSEP:=$(subst /,\,/)
ifdef inCygWin
PATHSEP=/
endif
endif
ifdef PWD
BASEDIR:=$(subst \,/,$(shell $(PWD)))
ifdef inCygWin
ifneq ($(findstring /cygdrive/,$(BASEDIR)),)
BASENODIR:=$(patsubst /cygdrive%,%,$(BASEDIR))
BASEDRIVE:=$(firstword $(subst /, ,$(BASENODIR)))
BASEDIR:=$(subst /cygdrive/$(BASEDRIVE)/,$(BASEDRIVE):/,$(BASEDIR))
endif
endif
else
BASEDIR=.
endif
ifdef inOS2
ifndef ECHO
ECHO:=$(strip $(wildcard $(addsuffix /gecho$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO:=$(strip $(wildcard $(addsuffix /echo$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO=echo
else
ECHO:=$(firstword $(ECHO))
endif
else
ECHO:=$(firstword $(ECHO))
endif
endif
export ECHO
endif
override DEFAULT_FPCDIR=..
ifndef FPC
ifdef PP
FPC=$(PP)
endif
endif
ifndef FPC
FPCPROG:=$(strip $(wildcard $(addsuffix /fpc$(SRCEXEEXT),$(SEARCHPATH))))
ifneq ($(FPCPROG),)
FPCPROG:=$(firstword $(FPCPROG))
ifneq ($(CPU_TARGET),)
FPC:=$(shell $(FPCPROG) -P$(CPU_TARGET) -PB)
else
FPC:=$(shell $(FPCPROG) -PB)
endif
ifneq ($(findstring Error,$(FPC)),)
override FPC=$(firstword $(strip $(wildcard $(addsuffix /ppc386$(SRCEXEEXT),$(SEARCHPATH)))))
else
ifeq ($(strip $(wildcard $(FPC))),)
FPC:=$(firstword $(FPCPROG))
endif
endif
else
override FPC=$(firstword $(strip $(wildcard $(addsuffix /ppc386$(SRCEXEEXT),$(SEARCHPATH)))))
endif
endif
override FPC:=$(subst $(SRCEXEEXT),,$(FPC))
override FPC:=$(subst \,/,$(FPC))$(SRCEXEEXT)
FOUNDFPC:=$(strip $(wildcard $(FPC)))
ifeq ($(FOUNDFPC),)
FOUNDFPC=$(strip $(wildcard $(addsuffix /$(FPC),$(SEARCHPATH))))
ifeq ($(FOUNDFPC),)
$(error Compiler $(FPC) not found)
endif
endif
ifndef FPC_COMPILERINFO
FPC_COMPILERINFO:=$(shell $(FPC) -iVSPTPSOTO)
endif
ifndef FPC_VERSION
FPC_VERSION:=$(word 1,$(FPC_COMPILERINFO))
endif
export FPC FPC_VERSION FPC_COMPILERINFO
unexport CHECKDEPEND ALLDEPENDENCIES
ifndef CPU_TARGET
ifdef CPU_TARGET_DEFAULT
CPU_TARGET=$(CPU_TARGET_DEFAULT)
endif
endif
ifndef OS_TARGET
ifdef OS_TARGET_DEFAULT
OS_TARGET=$(OS_TARGET_DEFAULT)
endif
endif
ifndef CPU_SOURCE
CPU_SOURCE:=$(word 2,$(FPC_COMPILERINFO))
endif
ifndef CPU_TARGET
CPU_TARGET:=$(word 3,$(FPC_COMPILERINFO))
endif
ifndef OS_SOURCE
OS_SOURCE:=$(word 4,$(FPC_COMPILERINFO))
endif
ifndef OS_TARGET
OS_TARGET:=$(word 5,$(FPC_COMPILERINFO))
endif
FULL_TARGET=$(CPU_TARGET)-$(OS_TARGET)
FULL_SOURCE=$(CPU_SOURCE)-$(OS_SOURCE)
ifeq ($(CPU_TARGET),armeb)
ARCH=arm
override FPCOPT+=-Cb
else
ifeq ($(CPU_TARGET),armel)
ARCH=arm
override FPCOPT+=-CaEABI
else
ARCH=$(CPU_TARGET)
endif
endif
ifeq ($(FULL_TARGET),arm-embedded)
ifeq ($(SUBARCH),)
$(error When compiling for arm-embedded, a sub-architecture (e.g. SUBARCH=armv4t or SUBARCH=armv7m) must be defined)
endif
override FPCOPT+=-Cp$(SUBARCH)
endif
ifeq ($(FULL_TARGET),avr-embedded)
ifeq ($(SUBARCH),)
$(error When compiling for avr-embedded, a sub-architecture (e.g. SUBARCH=avr25 or SUBARCH=avr35) must be defined)
endif
override FPCOPT+=-Cp$(SUBARCH)
endif
ifeq ($(FULL_TARGET),mipsel-embedded)
ifeq ($(SUBARCH),)
$(error When compiling for mipsel-embedded, a sub-architecture (e.g. SUBARCH=pic32mx) must be defined)
endif
override FPCOPT+=-Cp$(SUBARCH)
endif
ifneq ($(findstring $(OS_SOURCE),$(LIMIT83fs)),)
TARGETSUFFIX=$(OS_TARGET)
SOURCESUFFIX=$(OS_SOURCE)
else
ifneq ($(findstring $(OS_TARGET),$(LIMIT83fs)),)
TARGETSUFFIX=$(OS_TARGET)
else
TARGETSUFFIX=$(FULL_TARGET)
endif
SOURCESUFFIX=$(FULL_SOURCE)
endif
ifneq ($(FULL_TARGET),$(FULL_SOURCE))
CROSSCOMPILE=1
endif
ifeq ($(findstring makefile,$(MAKECMDGOALS)),)
ifeq ($(findstring $(FULL_TARGET),$(MAKEFILETARGETS)),)
$(error The Makefile doesn't support target $(FULL_TARGET), please run fpcmake first)
endif
endif
ifneq ($(findstring $(OS_TARGET),$(BSDs)),)
BSDhier=1
endif
ifeq ($(OS_TARGET),linux)
linuxHier=1
endif
ifndef CROSSCOMPILE
BUILDFULLNATIVE=1
export BUILDFULLNATIVE
endif
ifdef BUILDFULLNATIVE
BUILDNATIVE=1
export BUILDNATIVE
endif
export OS_TARGET OS_SOURCE ARCH CPU_TARGET CPU_SOURCE FULL_TARGET FULL_SOURCE TARGETSUFFIX SOURCESUFFIX CROSSCOMPILE
ifdef FPCDIR
override FPCDIR:=$(subst \,/,$(FPCDIR))
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl)),)
override FPCDIR=wrong
endif
else
override FPCDIR=wrong
endif
ifdef DEFAULT_FPCDIR
ifeq ($(FPCDIR),wrong)
override FPCDIR:=$(subst \,/,$(DEFAULT_FPCDIR))
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl)),)
override FPCDIR=wrong
endif
endif
endif
ifeq ($(FPCDIR),wrong)
ifdef inUnix
override FPCDIR=/usr/local/lib/fpc/$(FPC_VERSION)
ifeq ($(wildcard $(FPCDIR)/units),)
override FPCDIR=/usr/lib/fpc/$(FPC_VERSION)
endif
else
override FPCDIR:=$(subst /$(FPC),,$(firstword $(strip $(wildcard $(addsuffix /$(FPC),$(SEARCHPATH))))))
override FPCDIR:=$(FPCDIR)/..
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl)),)
override FPCDIR:=$(FPCDIR)/..
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl)),)
override FPCDIR:=$(BASEDIR)
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl)),)
override FPCDIR=c:/pp
endif
endif
endif
endif
endif
ifndef CROSSBINDIR
CROSSBINDIR:=$(wildcard $(FPCDIR)/bin/$(TARGETSUFFIX))
endif
ifneq ($(findstring $(OS_TARGET),darwin iphonesim ios),)
ifneq ($(findstring $(OS_SOURCE),darwin ios),)
DARWIN2DARWIN=1
endif
endif
ifndef BINUTILSPREFIX
ifndef CROSSBINDIR
ifdef CROSSCOMPILE
ifneq ($(OS_TARGET),msdos)
ifndef DARWIN2DARWIN
ifneq ($(CPU_TARGET),jvm)
BINUTILSPREFIX=$(CPU_TARGET)-$(OS_TARGET)-
ifeq ($(OS_TARGET),android)
ifeq ($(CPU_TARGET),arm)
BINUTILSPREFIX=arm-linux-androideabi-
else
ifeq ($(CPU_TARGET),i386)
BINUTILSPREFIX=i686-linux-android-
else
BINUTILSPREFIX=$(CPU_TARGET)-linux-android-
endif
endif
endif
endif
endif
else
BINUTILSPREFIX=$(OS_TARGET)-
endif
endif
endif
endif
UNITSDIR:=$(wildcard $(FPCDIR)/units/$(TARGETSUFFIX))
ifeq ($(UNITSDIR),)
UNITSDIR:=$(wildcard $(FPCDIR)/units/$(OS_TARGET))
endif
PACKAGESDIR:=$(wildcard $(FPCDIR) $(FPCDIR)/packages)
ifndef FPCFPMAKE
ifdef CROSSCOMPILE
ifeq ($(strip $(wildcard $(addsuffix /compiler/ppc$(SRCEXEEXT),$(FPCDIR)))),)
FPCPROG:=$(strip $(wildcard $(addsuffix /fpc$(SRCEXEEXT),$(SEARCHPATH))))
ifneq ($(FPCPROG),)
FPCPROG:=$(firstword $(FPCPROG))
FPCFPMAKE:=$(shell $(FPCPROG) -PB)
ifeq ($(strip $(wildcard $(FPCFPMAKE))),)
FPCFPMAKE:=$(firstword $(FPCPROG))
endif
else
override FPCFPMAKE=$(firstword $(strip $(wildcard $(addsuffix /ppc386$(SRCEXEEXT),$(SEARCHPATH)))))
endif
else
FPCFPMAKE=$(strip $(wildcard $(addsuffix /compiler/ppc$(SRCEXEEXT),$(FPCDIR))))
FPMAKE_SKIP_CONFIG=-n
export FPCFPMAKE
export FPMAKE_SKIP_CONFIG
endif
else
FPMAKE_SKIP_CONFIG=-n
FPCFPMAKE=$(FPC)
endif
endif
override PACKAGE_NAME=rtl
override PACKAGE_VERSION=3.2.4-rc1
ifeq ($(FULL_TARGET),i386-linux)
override TARGET_DIRS+=linux
endif
ifeq ($(FULL_TARGET),i386-go32v2)
override TARGET_DIRS+=go32v2
endif
ifeq ($(FULL_TARGET),i386-win32)
override TARGET_DIRS+=win32
endif
ifeq ($(FULL_TARGET),i386-os2)
override TARGET_DIRS+=os2
endif
ifeq ($(FULL_TARGET),i386-freebsd)
override TARGET_DIRS+=freebsd
endif
ifeq ($(FULL_TARGET),i386-beos)
override TARGET_DIRS+=beos
endif
ifeq ($(FULL_TARGET),i386-haiku)
override TARGET_DIRS+=haiku
endif
ifeq ($(FULL_TARGET),i386-netbsd)
override TARGET_DIRS+=netbsd
endif
ifeq ($(FULL_TARGET),i386-solaris)
override TARGET_DIRS+=solaris
endif
ifeq ($(FULL_TARGET),i386-netware)
override TARGET_DIRS+=netware
endif
ifeq ($(FULL_TARGET),i386-openbsd)
override TARGET_DIRS+=openbsd
endif
ifeq ($(FULL_TARGET),i386-wdosx)
override TARGET_DIRS+=win32
endif
ifeq ($(FULL_TARGET),i386-darwin)
override TARGET_DIRS+=darwin
endif
ifeq ($(FULL_TARGET),i386-emx)
override TARGET_DIRS+=emx
endif
ifeq ($(FULL_TARGET),i386-watcom)
override TARGET_DIRS+=watcom
endif
ifeq ($(FULL_TARGET),i386-netwlibc)
override TARGET_DIRS+=netwlibc
endif
ifeq ($(FULL_TARGET),i386-wince)
override TARGET_DIRS+=wince
endif
ifeq ($(FULL_TARGET),i386-embedded)
override TARGET_DIRS+=embedded
endif
ifeq ($(FULL_TARGET),i386-symbian)
override TARGET_DIRS+=symbian
endif
ifeq ($(FULL_TARGET),i386-nativent)
override TARGET_DIRS+=nativent
endif
ifeq ($(FULL_TARGET),i386-iphonesim)
override TARGET_DIRS+=darwin
endif
ifeq ($(FULL_TARGET),i386-android)
override TARGET_DIRS+=android
endif
ifeq ($(FULL_TARGET),i386-aros)
override TARGET_DIRS+=aros
endif
ifeq ($(FULL_TARGET),m68k-linux)
override TARGET_DIRS+=linux
endif
ifeq ($(FULL_TARGET),m68k-netbsd)
override TARGET_DIRS+=netbsd
endif
ifeq ($(FULL_TARGET),m68k-amiga)
override TARGET_DIRS+=amiga
endif
ifeq ($(FULL_TARGET),m68k-atari)
override TARGET_DIRS+=atari
endif
ifeq ($(FULL_TARGET),m68k-palmos)
override TARGET_DIRS+=palmos
endif
ifeq ($(FULL_TARGET),m68k-macosclassic)
override TARGET_DIRS+=macos
endif
ifeq ($(FULL_TARGET),m68k-embedded)
override TARGET_DIRS+=embedded
endif
ifeq ($(FULL_TARGET),powerpc-linux)
override TARGET_DIRS+=linux
endif
ifeq ($(FULL_TARGET),powerpc-netbsd)
override TARGET_DIRS+=netbsd
endif
ifeq ($(FULL_TARGET),powerpc-amiga)
override TARGET_DIRS+=amiga
endif
ifeq ($(FULL_TARGET),powerpc-macosclassic)
override TARGET_DIRS+=macos
endif
ifeq ($(FULL_TARGET),powerpc-darwin)
override TARGET_DIRS+=darwin
endif
ifeq ($(FULL_TARGET),powerpc-morphos)
override TARGET_DIRS+=morphos
endif
ifeq ($(FULL_TARGET),powerpc-embedded)
override TARGET_DIRS+=embedded
endif
ifeq ($(FULL_TARGET),powerpc-wii)
override TARGET_DIRS+=wii
endif
ifeq ($(FULL_TARGET),powerpc-aix)
override TARGET_DIRS+=aix
endif
ifeq ($(FULL_TARGET),sparc-linux)
override TARGET_DIRS+=linux
endif
ifeq ($(FULL_TARGET),sparc-netbsd)
override TARGET_DIRS+=netbsd
endif
ifeq ($(FULL_TARGET),sparc-solaris)
override TARGET_DIRS+=solaris
endif
ifeq ($(FULL_TARGET),sparc-embedded)
override TARGET_DIRS+=embedded
endif
ifeq ($(FULL_TARGET),x86_64-linux)
override TARGET_DIRS+=linux
endif
ifeq ($(FULL_TARGET),x86_64-freebsd)
override TARGET_DIRS+=freebsd
endif
ifeq ($(FULL_TARGET),x86_64-haiku)
override TARGET_DIRS+=haiku
endif
ifeq ($(FULL_TARGET),x86_64-netbsd)
override TARGET_DIRS+=netbsd
endif
ifeq ($(FULL_TARGET),x86_64-solaris)
override TARGET_DIRS+=solaris
endif
ifeq ($(FULL_TARGET),x86_64-openbsd)
override TARGET_DIRS+=openbsd
endif
ifeq ($(FULL_TARGET),x86_64-darwin)
override TARGET_DIRS+=darwin
endif
ifeq ($(FULL_TARGET),x86_64-win64)
override TARGET_DIRS+=win64
endif
ifeq ($(FULL_TARGET),x86_64-embedded)
override TARGET_DIRS+=embedded
endif
ifeq ($(FULL_TARGET),x86_64-iphonesim)
override TARGET_DIRS+=darwin
endif
ifeq ($(FULL_TARGET),x86_64-android)
override TARGET_DIRS+=android
endif
ifeq ($(FULL_TARGET),x86_64-aros)
override TARGET_DIRS+=aros
endif
ifeq ($(FULL_TARGET),x86_64-dragonfly)
override TARGET_DIRS+=dragonfly
endif
ifeq ($(FULL_TARGET),arm-linux)
override TARGET_DIRS+=linux
endif
ifeq ($(FULL_TARGET),arm-netbsd)
override TARGET_DIRS+=netbsd
endif
ifeq ($(FULL_TARGET),arm-palmos)
override TARGET_DIRS+=palmos
endif
ifeq ($(FULL_TARGET),arm-wince)
override TARGET_DIRS+=wince
endif
ifeq ($(FULL_TARGET),arm-gba)
override TARGET_DIRS+=gba
endif
ifeq ($(FULL_TARGET),arm-nds)
override TARGET_DIRS+=nds
endif
ifeq ($(FULL_TARGET),arm-embedded)
override TARGET_DIRS+=embedded
endif
ifeq ($(FULL_TARGET),arm-symbian)
override TARGET_DIRS+=symbian
endif
ifeq ($(FULL_TARGET),arm-android)
override TARGET_DIRS+=android
endif
ifeq ($(FULL_TARGET),arm-aros)
override TARGET_DIRS+=aros
endif
ifeq ($(FULL_TARGET),arm-ios)
override TARGET_DIRS+=darwin
endif
ifeq ($(FULL_TARGET),powerpc64-linux)
override TARGET_DIRS+=linux
endif
ifeq ($(FULL_TARGET),powerpc64-darwin)
override TARGET_DIRS+=darwin
endif
ifeq ($(FULL_TARGET),powerpc64-embedded)
override TARGET_DIRS+=embedded
endif
ifeq ($(FULL_TARGET),powerpc64-aix)
override TARGET_DIRS+=aix
endif
ifeq ($(FULL_TARGET),avr-embedded)
override TARGET_DIRS+=embedded
endif
ifeq ($(FULL_TARGET),armeb-linux)
override TARGET_DIRS+=linux
endif
ifeq ($(FULL_TARGET),armeb-embedded)
override TARGET_DIRS+=embedded
endif
ifeq ($(FULL_TARGET),mips-linux)
override TARGET_DIRS+=linux
endif
ifeq ($(FULL_TARGET),mipsel-linux)
override TARGET_DIRS+=linux
endif
ifeq ($(FULL_TARGET),mipsel-embedded)
override TARGET_DIRS+=embedded
endif
ifeq ($(FULL_TARGET),mipsel-android)
override TARGET_DIRS+=android
endif
ifeq ($(FULL_TARGET),jvm-java)
override TARGET_DIRS+=java
endif
ifeq ($(FULL_TARGET),jvm-android)
override TARGET_DIRS+=android/jvm
endif
ifeq ($(FULL_TARGET),i8086-embedded)
override TARGET_DIRS+=embedded
endif
ifeq ($(FULL_TARGET),i8086-msdos)
override TARGET_DIRS+=msdos
endif
ifeq ($(FULL_TARGET),i8086-win16)
override TARGET_DIRS+=win16
endif
ifeq ($(FULL_TARGET),aarch64-linux)
override TARGET_DIRS+=linux
endif
ifeq ($(FULL_TARGET),aarch64-darwin)
override TARGET_DIRS+=darwin
endif
ifeq ($(FULL_TARGET),aarch64-android)
override TARGET_DIRS+=android
endif
ifeq ($(FULL_TARGET),aarch64-ios)
override TARGET_DIRS+=darwin
endif
ifeq ($(FULL_TARGET),sparc64-linux)
override TARGET_DIRS+=linux
endif
override INSTALL_FPCPACKAGE=y
override INSTALL_CREATEPACKAGEFPC=y
ifdef REQUIRE_UNITSDIR
override UNITSDIR+=$(REQUIRE_UNITSDIR)
endif
ifdef REQUIRE_PACKAGESDIR
override PACKAGESDIR+=$(REQUIRE_PACKAGESDIR)
endif
ifdef ZIPINSTALL
ifneq ($(findstring $(OS_TARGET),$(UNIXs)),)
UNIXHier=1
endif
else
ifneq ($(findstring $(OS_SOURCE),$(UNIXs)),)
UNIXHier=1
endif
endif
ifndef INSTALL_PREFIX
ifdef PREFIX
INSTALL_PREFIX=$(PREFIX)
endif
endif
ifndef INSTALL_PREFIX
ifdef UNIXHier
INSTALL_PREFIX=/usr/local
else
ifdef INSTALL_FPCPACKAGE
INSTALL_BASEDIR:=/pp
else
INSTALL_BASEDIR:=/$(PACKAGE_NAME)
endif
endif
endif
export INSTALL_PREFIX
ifdef INSTALL_FPCSUBDIR
export INSTALL_FPCSUBDIR
endif
ifndef DIST_DESTDIR
DIST_DESTDIR:=$(BASEDIR)
endif
export DIST_DESTDIR
ifndef COMPILER_UNITTARGETDIR
ifdef PACKAGEDIR_MAIN
COMPILER_UNITTARGETDIR=$(PACKAGEDIR_MAIN)/units/$(TARGETSUFFIX)
else
COMPILER_UNITTARGETDIR=units/$(TARGETSUFFIX)
endif
endif
ifndef COMPILER_TARGETDIR
COMPILER_TARGETDIR=.
endif
ifndef INSTALL_BASEDIR
ifdef UNIXHier
ifdef INSTALL_FPCPACKAGE
INSTALL_BASEDIR:=$(INSTALL_PREFIX)/lib/fpc/$(FPC_VERSION)
else
INSTALL_BASEDIR:=$(INSTALL_PREFIX)/lib/$(PACKAGE_NAME)
endif
else
INSTALL_BASEDIR:=$(INSTALL_PREFIX)
endif
endif
ifndef INSTALL_BINDIR
ifdef UNIXHier
INSTALL_BINDIR:=$(INSTALL_PREFIX)/bin
else
INSTALL_BINDIR:=$(INSTALL_BASEDIR)/bin
ifdef INSTALL_FPCPACKAGE
ifdef CROSSCOMPILE
ifdef CROSSINSTALL
INSTALL_BINDIR:=$(INSTALL_BINDIR)/$(SOURCESUFFIX)
else
INSTALL_BINDIR:=$(INSTALL_BINDIR)/$(TARGETSUFFIX)
endif
else
INSTALL_BINDIR:=$(INSTALL_BINDIR)/$(TARGETSUFFIX)
endif
endif
endif
endif
ifndef INSTALL_UNITDIR
INSTALL_UNITDIR:=$(INSTALL_BASEDIR)/units/$(TARGETSUFFIX)
ifdef INSTALL_FPCPACKAGE
ifdef PACKAGE_NAME
INSTALL_UNITDIR:=$(INSTALL_UNITDIR)/$(PACKAGE_NAME)
endif
endif
endif
ifndef INSTALL_LIBDIR
ifdef UNIXHier
INSTALL_LIBDIR:=$(INSTALL_PREFIX)/lib
else
INSTALL_LIBDIR:=$(INSTALL_UNITDIR)
endif
endif
ifndef INSTALL_SOURCEDIR
ifdef UNIXHier
ifdef BSDhier
SRCPREFIXDIR=share/src
else
ifdef linuxHier
SRCPREFIXDIR=share/src
else
SRCPREFIXDIR=src
endif
endif
ifdef INSTALL_FPCPACKAGE
ifdef INSTALL_FPCSUBDIR
INSTALL_SOURCEDIR:=$(INSTALL_PREFIX)/$(SRCPREFIXDIR)/fpc-$(FPC_VERSION)/$(INSTALL_FPCSUBDIR)/$(PACKAGE_NAME)
else
INSTALL_SOURCEDIR:=$(INSTALL_PREFIX)/$(SRCPREFIXDIR)/fpc-$(FPC_VERSION)/$(PACKAGE_NAME)
endif
else
INSTALL_SOURCEDIR:=$(INSTALL_PREFIX)/$(SRCPREFIXDIR)/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
endif
else
ifdef INSTALL_FPCPACKAGE
ifdef INSTALL_FPCSUBDIR
INSTALL_SOURCEDIR:=$(INSTALL_BASEDIR)/source/$(INSTALL_FPCSUBDIR)/$(PACKAGE_NAME)
else
INSTALL_SOURCEDIR:=$(INSTALL_BASEDIR)/source/$(PACKAGE_NAME)
endif
else
INSTALL_SOURCEDIR:=$(INSTALL_BASEDIR)/source
endif
endif
endif
ifndef INSTALL_DOCDIR
ifdef UNIXHier
ifdef BSDhier
DOCPREFIXDIR=share/doc
else
ifdef linuxHier
DOCPREFIXDIR=share/doc
else
DOCPREFIXDIR=doc
endif
endif
ifdef INSTALL_FPCPACKAGE
INSTALL_DOCDIR:=$(INSTALL_PREFIX)/$(DOCPREFIXDIR)/fpc-$(FPC_VERSION)/$(PACKAGE_NAME)
else
INSTALL_DOCDIR:=$(INSTALL_PREFIX)/$(DOCPREFIXDIR)/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
endif
else
ifdef INSTALL_FPCPACKAGE
INSTALL_DOCDIR:=$(INSTALL_BASEDIR)/doc/$(PACKAGE_NAME)
else
INSTALL_DOCDIR:=$(INSTALL_BASEDIR)/doc
endif
endif
endif
ifndef INSTALL_EXAMPLEDIR
ifdef UNIXHier
ifdef INSTALL_FPCPACKAGE
ifdef BSDhier
INSTALL_EXAMPLEDIR:=$(INSTALL_PREFIX)/share/examples/fpc-$(FPC_VERSION)/$(PACKAGE_NAME)
else
ifdef linuxHier
INSTALL_EXAMPLEDIR:=$(INSTALL_DOCDIR)/examples
else
INSTALL_EXAMPLEDIR:=$(INSTALL_PREFIX)/doc/fpc-$(FPC_VERSION)/examples/$(PACKAGE_NAME)
endif
endif
else
ifdef BSDhier
INSTALL_EXAMPLEDIR:=$(INSTALL_PREFIX)/share/examples/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
else
ifdef linuxHier
INSTALL_EXAMPLEDIR:=$(INSTALL_DOCDIR)/examples/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
else
INSTALL_EXAMPLEDIR:=$(INSTALL_PREFIX)/doc/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
endif
endif
endif
else
ifdef INSTALL_FPCPACKAGE
INSTALL_EXAMPLEDIR:=$(INSTALL_BASEDIR)/examples/$(PACKAGE_NAME)
else
INSTALL_EXAMPLEDIR:=$(INSTALL_BASEDIR)/examples
endif
endif
endif
ifndef INSTALL_DATADIR
INSTALL_DATADIR=$(INSTALL_BASEDIR)
endif
ifndef INSTALL_SHAREDDIR
INSTALL_SHAREDDIR=$(INSTALL_PREFIX)/lib
endif
ifdef CROSSCOMPILE
ifndef CROSSBINDIR
CROSSBINDIR:=$(wildcard $(CROSSTARGETDIR)/bin/$(SOURCESUFFIX))
ifeq ($(CROSSBINDIR),)
CROSSBINDIR:=$(wildcard $(INSTALL_BASEDIR)/cross/$(TARGETSUFFIX)/bin/$(FULL_SOURCE))
endif
endif
else
CROSSBINDIR=
endif
BATCHEXT=.bat
LOADEREXT=.as
EXEEXT=.exe
PPLEXT=.ppl
PPUEXT=.ppu
OEXT=.o
ASMEXT=.s
SMARTEXT=.sl
STATICLIBEXT=.a
SHAREDLIBEXT=.so
SHAREDLIBPREFIX=libfp
STATICLIBPREFIX=libp
IMPORTLIBPREFIX=libimp
RSTEXT=.rst
EXEDBGEXT=.dbg
ifeq ($(OS_TARGET),go32v1)
STATICLIBPREFIX=
SHORTSUFFIX=v1
endif
ifeq ($(OS_TARGET),go32v2)
STATICLIBPREFIX=
SHORTSUFFIX=dos
IMPORTLIBPREFIX=
endif
ifeq ($(OS_TARGET),watcom)
STATICLIBPREFIX=
OEXT=.obj
ASMEXT=.asm
SHAREDLIBEXT=.dll
SHORTSUFFIX=wat
IMPORTLIBPREFIX=
endif
ifneq ($(CPU_TARGET),jvm)
ifeq ($(OS_TARGET),android)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=lnx
endif
endif
ifeq ($(OS_TARGET),linux)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=lnx
endif
ifeq ($(OS_TARGET),dragonfly)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=df
endif
ifeq ($(OS_TARGET),freebsd)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=fbs
endif
ifeq ($(OS_TARGET),netbsd)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=nbs
endif
ifeq ($(OS_TARGET),openbsd)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=obs
endif
ifeq ($(OS_TARGET),win32)
SHAREDLIBEXT=.dll
SHORTSUFFIX=w32
endif
ifeq ($(OS_TARGET),os2)
BATCHEXT=.cmd
AOUTEXT=.out
STATICLIBPREFIX=
SHAREDLIBEXT=.dll
SHORTSUFFIX=os2
ECHO=echo
IMPORTLIBPREFIX=
endif
ifeq ($(OS_TARGET),emx)
BATCHEXT=.cmd
AOUTEXT=.out
STATICLIBPREFIX=
SHAREDLIBEXT=.dll
SHORTSUFFIX=emx
ECHO=echo
IMPORTLIBPREFIX=
endif
ifeq ($(OS_TARGET),amiga)
EXEEXT=
SHAREDLIBEXT=.library
SHORTSUFFIX=amg
endif
ifeq ($(OS_TARGET),aros)
EXEEXT=
SHAREDLIBEXT=.library
SHORTSUFFIX=aros
endif
ifeq ($(OS_TARGET),morphos)
EXEEXT=
SHAREDLIBEXT=.library
SHORTSUFFIX=mos
endif
ifeq ($(OS_TARGET),atari)
EXEEXT=.ttp
SHORTSUFFIX=ata
endif
ifeq ($(OS_TARGET),beos)
BATCHEXT=.sh
EXEEXT=
SHORTSUFFIX=be
endif
ifeq ($(OS_TARGET),haiku)
BATCHEXT=.sh
EXEEXT=
SHORTSUFFIX=hai
endif
ifeq ($(OS_TARGET),solaris)
BATCHEXT=.sh
EXEEXT=
SHORTSUFFIX=sun
endif
ifeq ($(OS_TARGET),qnx)
BATCHEXT=.sh
EXEEXT=
SHORTSUFFIX=qnx
endif
ifeq ($(OS_TARGET),netware)
EXEEXT=.nlm
STATICLIBPREFIX=
SHORTSUFFIX=nw
IMPORTLIBPREFIX=imp
endif
ifeq ($(OS_TARGET),netwlibc)
EXEEXT=.nlm
STATICLIBPREFIX=
SHORTSUFFIX=nwl
IMPORTLIBPREFIX=imp
endif
ifeq ($(OS_TARGET),macosclassic)
BATCHEXT=
EXEEXT=
DEBUGSYMEXT=.xcoff
SHORTSUFFIX=mac
IMPORTLIBPREFIX=imp
endif
ifneq ($(findstring $(OS_TARGET),darwin iphonesim ios),)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=dwn
EXEDBGEXT=.dSYM
endif
ifeq ($(OS_TARGET),gba)
EXEEXT=.gba
SHAREDLIBEXT=.so
SHORTSUFFIX=gba
endif
ifeq ($(OS_TARGET),symbian)
SHAREDLIBEXT=.dll
SHORTSUFFIX=symbian
endif
ifeq ($(OS_TARGET),NativeNT)
SHAREDLIBEXT=.dll
SHORTSUFFIX=nativent
endif
ifeq ($(OS_TARGET),wii)
EXEEXT=.dol
SHAREDLIBEXT=.so
SHORTSUFFIX=wii
endif
ifeq ($(OS_TARGET),aix)
BATCHEXT=.sh
EXEEXT=
SHAREDLIBEXT=.a
SHORTSUFFIX=aix
endif
ifeq ($(OS_TARGET),java)
OEXT=.class
ASMEXT=.j
SHAREDLIBEXT=.jar
SHORTSUFFIX=java
endif
ifeq ($(CPU_TARGET),jvm)
ifeq ($(OS_TARGET),android)
OEXT=.class
ASMEXT=.j
SHAREDLIBEXT=.jar
SHORTSUFFIX=android
endif
endif
ifeq ($(OS_TARGET),msdos)
STATICLIBPREFIX=
STATICLIBEXT=.a
SHORTSUFFIX=d16
endif
ifeq ($(OS_TARGET),embedded)
ifeq ($(CPU_TARGET),i8086)
STATICLIBPREFIX=
STATICLIBEXT=.a
else
EXEEXT=.bin
endif
SHORTSUFFIX=emb
endif
ifeq ($(OS_TARGET),win16)
STATICLIBPREFIX=
STATICLIBEXT=.a
SHAREDLIBEXT=.dll
SHORTSUFFIX=w16
endif
ifneq ($(findstring $(OS_SOURCE),$(LIMIT83fs)),)
FPCMADE=fpcmade.$(SHORTSUFFIX)
ZIPSUFFIX=$(SHORTSUFFIX)
ZIPCROSSPREFIX=
ZIPSOURCESUFFIX=src
ZIPEXAMPLESUFFIX=exm
else
FPCMADE=fpcmade.$(TARGETSUFFIX)
ZIPSOURCESUFFIX=.source
ZIPEXAMPLESUFFIX=.examples
ifdef CROSSCOMPILE
ZIPSUFFIX=.$(SOURCESUFFIX)
ZIPCROSSPREFIX=$(TARGETSUFFIX)-
else
ZIPSUFFIX=.$(TARGETSUFFIX)
ZIPCROSSPREFIX=
endif
endif
ifndef ECHO
ECHO:=$(strip $(wildcard $(addsuffix /gecho$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO:=$(strip $(wildcard $(addsuffix /echo$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO= __missing_command_ECHO
else
ECHO:=$(firstword $(ECHO))
endif
else
ECHO:=$(firstword $(ECHO))
endif
endif
export ECHO
ifndef DATE
DATE:=$(strip $(wildcard $(addsuffix /gdate$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(DATE),)
DATE:=$(strip $(wildcard $(addsuffix /date$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(DATE),)
DATE= __missing_command_DATE
else
DATE:=$(firstword $(DATE))
endif
else
DATE:=$(firstword $(DATE))
endif
endif
export DATE
ifndef GINSTALL
GINSTALL:=$(strip $(wildcard $(addsuffix /ginstall$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(GINSTALL),)
GINSTALL:=$(strip $(wildcard $(addsuffix /install$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(GINSTALL),)
GINSTALL= __missing_command_GINSTALL
else
GINSTALL:=$(firstword $(GINSTALL))
endif
else
GINSTALL:=$(firstword $(GINSTALL))
endif
endif
export GINSTALL
ifndef CPPROG
CPPROG:=$(strip $(wildcard $(addsuffix /cp$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(CPPROG),)
CPPROG= __missing_command_CPPROG
else
CPPROG:=$(firstword $(CPPROG))
endif
endif
export CPPROG
ifndef RMPROG
RMPROG:=$(strip $(wildcard $(addsuffix /rm$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(RMPROG),)
RMPROG= __missing_command_RMPROG
else
RMPROG:=$(firstword $(RMPROG))
endif
endif
export RMPROG
ifndef MVPROG
MVPROG:=$(strip $(wildcard $(addsuffix /mv$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(MVPROG),)
MVPROG= __missing_command_MVPROG
else
MVPROG:=$(firstword $(MVPROG))
endif
endif
export MVPROG
ifndef MKDIRPROG
MKDIRPROG:=$(strip $(wildcard $(addsuffix /gmkdir$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(MKDIRPROG),)
MKDIRPROG:=$(strip $(wildcard $(addsuffix /mkdir$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(MKDIRPROG),)
MKDIRPROG= __missing_command_MKDIRPROG
else
MKDIRPROG:=$(firstword $(MKDIRPROG))
endif
else
MKDIRPROG:=$(firstword $(MKDIRPROG))
endif
endif
export MKDIRPROG
ifndef ECHOREDIR
ifndef inUnix
ECHOREDIR=echo
else
ECHOREDIR=$(ECHO)
endif
endif
ifndef COPY
COPY:=$(CPPROG) -fp
endif
ifndef COPYTREE
COPYTREE:=$(CPPROG) -Rfp
endif
ifndef MKDIRTREE
MKDIRTREE:=$(MKDIRPROG) -p
endif
ifndef MOVE
MOVE:=$(MVPROG) -f
endif
ifndef DEL
DEL:=$(RMPROG) -f
endif
ifndef DELTREE
DELTREE:=$(RMPROG) -rf
endif
ifndef INSTALL
ifdef inUnix
INSTALL:=$(GINSTALL) -c -m 644
else
INSTALL:=$(COPY)
endif
endif
ifndef INSTALLEXE
ifdef inUnix
INSTALLEXE:=$(GINSTALL) -c -m 755
else
INSTALLEXE:=$(COPY)
endif
endif
ifndef MKDIR
MKDIR:=$(GINSTALL) -m 755 -d
endif
export ECHOREDIR COPY COPYTREE MOVE DEL DELTREE INSTALL INSTALLEXE MKDIR
ifndef PPUMOVE
PPUMOVE:=$(strip $(wildcard $(addsuffix /ppumove$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(PPUMOVE),)
PPUMOVE= __missing_command_PPUMOVE
else
PPUMOVE:=$(firstword $(PPUMOVE))
endif
endif
export PPUMOVE
ifndef FPCMAKE
FPCMAKE:=$(strip $(wildcard $(addsuffix /fpcmake$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(FPCMAKE),)
FPCMAKE= __missing_command_FPCMAKE
else
FPCMAKE:=$(firstword $(FPCMAKE))
endif
endif
export FPCMAKE
ifndef ZIPPROG
ZIPPROG:=$(strip $(wildcard $(addsuffix /zip$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ZIPPROG),)
ZIPPROG= __missing_command_ZIPPROG
else
ZIPPROG:=$(firstword $(ZIPPROG))
endif
endif
export ZIPPROG
ifndef TARPROG
TARPROG:=$(strip $(wildcard $(addsuffix /gtar$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(TARPROG),)
TARPROG:=$(strip $(wildcard $(addsuffix /tar$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(TARPROG),)
TARPROG= __missing_command_TARPROG
else
TARPROG:=$(firstword $(TARPROG))
endif
else
TARPROG:=$(firstword $(TARPROG))
endif
endif
export TARPROG
ASNAME=$(BINUTILSPREFIX)as
LDNAME=$(BINUTILSPREFIX)ld
ARNAME=$(BINUTILSPREFIX)ar
RCNAME=$(BINUTILSPREFIX)rc
NASMNAME=$(BINUTILSPREFIX)nasm
ifndef ASPROG
ifdef CROSSBINDIR
ASPROG=$(CROSSBINDIR)/$(ASNAME)$(SRCEXEEXT)
else
ASPROG=$(ASNAME)
endif
endif
ifndef LDPROG
ifdef CROSSBINDIR
LDPROG=$(CROSSBINDIR)/$(LDNAME)$(SRCEXEEXT)
else
LDPROG=$(LDNAME)
endif
endif
ifndef RCPROG
ifdef CROSSBINDIR
RCPROG=$(CROSSBINDIR)/$(RCNAME)$(SRCEXEEXT)
else
RCPROG=$(RCNAME)
endif
endif
ifndef ARPROG
ifdef CROSSBINDIR
ARPROG=$(CROSSBINDIR)/$(ARNAME)$(SRCEXEEXT)
else
ARPROG=$(ARNAME)
endif
endif
ifndef NASMPROG
ifdef CROSSBINDIR
NASMPROG=$(CROSSBINDIR)/$(NASMNAME)$(SRCEXEEXT)
else
NASMPROG=$(NASMNAME)
endif
endif
AS=$(ASPROG)
LD=$(LDPROG)
RC=$(RCPROG)
AR=$(ARPROG)
NASM=$(NASMPROG)
ifdef inUnix
PPAS=./ppas$(SRCBATCHEXT)
else
PPAS=ppas$(SRCBATCHEXT)
endif
ifdef inUnix
LDCONFIG=ldconfig
else
LDCONFIG=
endif
ifdef DATE
DATESTR:=$(shell $(DATE) +%Y%m%d)
else
DATESTR=
endif
ZIPOPT=-9
ZIPEXT=.zip
ifeq ($(USETAR),bz2)
TAROPT=vj
TAREXT=.tar.bz2
else
TAROPT=vz
TAREXT=.tar.gz
endif
ifndef NOCPUDEF
override FPCOPTDEF=$(ARCH)
endif
ifneq ($(OS_TARGET),$(OS_SOURCE))
override FPCOPT+=-T$(OS_TARGET)
endif
ifneq ($(CPU_TARGET),$(CPU_SOURCE))
override FPCOPT+=-P$(ARCH)
endif
ifeq ($(OS_SOURCE),openbsd)
override FPCOPT+=-FD$(NEW_BINUTILS_PATH)
override FPCMAKEOPT+=-FD$(NEW_BINUTILS_PATH)
override FPMAKE_BUILD_OPT+=-FD$(NEW_BINUTILS_PATH)
endif
ifndef CROSSBOOTSTRAP
ifneq ($(BINUTILSPREFIX),)
override FPCOPT+=-XP$(BINUTILSPREFIX)
endif
ifneq ($(BINUTILSPREFIX),)
override FPCOPT+=-Xr$(RLINKPATH)
endif
endif
ifndef CROSSCOMPILE
ifneq ($(BINUTILSPREFIX),)
override FPCMAKEOPT+=-XP$(BINUTILSPREFIX)
override FPMAKE_BUILD_OPT+=-XP$(BINUTILSPREFIX)
endif
endif
ifdef UNITDIR
override FPCOPT+=$(addprefix -Fu,$(UNITDIR))
endif
ifdef LIBDIR
override FPCOPT+=$(addprefix -Fl,$(LIBDIR))
endif
ifdef OBJDIR
override FPCOPT+=$(addprefix -Fo,$(OBJDIR))
endif
ifdef INCDIR
override FPCOPT+=$(addprefix -Fi,$(INCDIR))
endif
ifdef LINKSMART
override FPCOPT+=-XX
endif
ifdef CREATESMART
override FPCOPT+=-CX
endif
ifdef DEBUG
override FPCOPT+=-gl
override FPCOPTDEF+=DEBUG
endif
ifdef RELEASE
FPCCPUOPT:=-O2
override FPCOPT+=-Ur -Xs $(FPCCPUOPT) -n
override FPCOPTDEF+=RELEASE
endif
ifdef STRIP
override FPCOPT+=-Xs
endif
ifdef OPTIMIZE
override FPCOPT+=-O2
endif
ifdef VERBOSE
override FPCOPT+=-vwni
endif
ifdef COMPILER_OPTIONS
override FPCOPT+=$(COMPILER_OPTIONS)
endif
ifdef COMPILER_UNITDIR
override FPCOPT+=$(addprefix -Fu,$(COMPILER_UNITDIR))
endif
ifdef COMPILER_LIBRARYDIR
override FPCOPT+=$(addprefix -Fl,$(COMPILER_LIBRARYDIR))
endif
ifdef COMPILER_OBJECTDIR
override FPCOPT+=$(addprefix -Fo,$(COMPILER_OBJECTDIR))
endif
ifdef COMPILER_INCLUDEDIR
override FPCOPT+=$(addprefix -Fi,$(COMPILER_INCLUDEDIR))
endif
ifdef CROSSBINDIR
override FPCOPT+=-FD$(CROSSBINDIR)
endif
ifdef COMPILER_TARGETDIR
override FPCOPT+=-FE$(COMPILER_TARGETDIR)
ifeq ($(COMPILER_TARGETDIR),.)
override TARGETDIRPREFIX=
else
override TARGETDIRPREFIX=$(COMPILER_TARGETDIR)/
endif
endif
ifdef COMPILER_UNITTARGETDIR
override FPCOPT+=-FU$(COMPILER_UNITTARGETDIR)
ifeq ($(COMPILER_UNITTARGETDIR),.)
override UNITTARGETDIRPREFIX=
else
override UNITTARGETDIRPREFIX=$(COMPILER_UNITTARGETDIR)/
endif
else
ifdef COMPILER_TARGETDIR
override COMPILER_UNITTARGETDIR=$(COMPILER_TARGETDIR)
override UNITTARGETDIRPREFIX=$(TARGETDIRPREFIX)
endif
endif
ifdef SYSROOTPATH
override FPCOPT+=-XR$(SYSROOTPATH)
else
ifeq ($(OS_TARGET),$(OS_SOURCE))
ifneq ($(findstring $(OS_TARGET),darwin),)
ifneq ($(findstring $(CPU_TARGET),aarch64),)
ifneq ($(wildcard /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk),)
override FPCOPT+=-XR/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk
endif
endif
endif
endif
endif
ifdef CREATESHARED
override FPCOPT+=-Cg
endif
ifneq ($(findstring $(OS_TARGET),dragonfly freebsd openbsd netbsd linux solaris),)
ifneq ($(findstring $(CPU_TARGET),x86_64 mips mipsel),)
override FPCOPT+=-Cg
endif
endif
ifdef LINKSHARED
endif
ifdef OPT
override FPCOPT+=$(OPT)
endif
ifdef FPMAKEBUILDOPT
override FPMAKE_BUILD_OPT+=$(FPMAKEBUILDOPT)
endif
ifdef FPCOPTDEF
override FPCOPT+=$(addprefix -d,$(FPCOPTDEF))
endif
ifdef CFGFILE
override FPCOPT+=@$(CFGFILE)
endif
ifdef USEENV
override FPCEXTCMD:=$(FPCOPT)
override FPCOPT:=!FPCEXTCMD
export FPCEXTCMD
endif
override AFULL_TARGET=$(CPU_TARGET)-$(OS_TARGET)
override AFULL_SOURCE=$(CPU_SOURCE)-$(OS_SOURCE)
ifneq ($(AFULL_TARGET),$(AFULL_SOURCE))
override ACROSSCOMPILE=1
endif
ifdef ACROSSCOMPILE
override FPCOPT+=$(CROSSOPT)
endif
override COMPILER:=$(strip $(FPC) $(FPCOPT))
ifneq (,$(findstring -sh ,$(COMPILER)))
UseEXECPPAS=1
endif
ifneq (,$(findstring -s ,$(COMPILER)))
ifeq ($(FULL_SOURCE),$(FULL_TARGET))
UseEXECPPAS=1
endif
endif
ifneq ($(UseEXECPPAS),1)
EXECPPAS=
else
ifdef RUNBATCH
EXECPPAS:=@$(RUNBATCH) $(PPAS)
else
EXECPPAS:=@$(PPAS)
endif
endif
ifdef TARGET_RSTS
override RSTFILES=$(addsuffix $(RSTEXT),$(TARGET_RSTS))
override CLEANRSTFILES+=$(RSTFILES)
endif
.PHONY: fpc_install fpc_sourceinstall fpc_exampleinstall
ifdef INSTALL_UNITS
override INSTALLPPUFILES+=$(addsuffix $(PPUEXT),$(INSTALL_UNITS))
endif
ifdef INSTALL_BUILDUNIT
override INSTALLPPUFILES:=$(filter-out $(INSTALL_BUILDUNIT)$(PPUEXT),$(INSTALLPPUFILES))
endif
ifdef INSTALLPPUFILES
ifneq ($(IMPORTLIBPREFIX)-$(STATICLIBEXT),$(STATICLIBPREFIX)-$(STATICLIBEXT))
override INSTALLPPULINKFILES:=$(subst $(PPUEXT),$(OEXT),$(INSTALLPPUFILES)) $(addprefix $(STATICLIBPREFIX),$(subst $(PPUEXT),$(STATICLIBEXT),$(INSTALLPPUFILES))) $(addprefix $(IMPORTLIBPREFIX),$(subst $(PPUEXT),$(STATICLIBEXT),$(INSTALLPPUFILES)))
else
override INSTALLPPULINKFILES:=$(subst $(PPUEXT),$(OEXT),$(INSTALLPPUFILES)) $(addprefix $(STATICLIBPREFIX),$(subst $(PPUEXT),$(STATICLIBEXT),$(INSTALLPPUFILES)))
endif
ifneq ($(UNITTARGETDIRPREFIX),)
override INSTALLPPUFILES:=$(addprefix $(UNITTARGETDIRPREFIX),$(notdir $(INSTALLPPUFILES)))
override INSTALLPPULINKFILES:=$(wildcard $(addprefix $(UNITTARGETDIRPREFIX),$(notdir $(INSTALLPPULINKFILES))))
endif
override INSTALL_CREATEPACKAGEFPC=1
endif
ifdef INSTALLEXEFILES
ifneq ($(TARGETDIRPREFIX),)
override INSTALLEXEFILES:=$(addprefix $(TARGETDIRPREFIX),$(notdir $(INSTALLEXEFILES)))
endif
endif
fpc_install: all $(INSTALLTARGET)
ifdef INSTALLEXEFILES
	$(MKDIR) $(INSTALL_BINDIR)
	$(INSTALLEXE) $(INSTALLEXEFILES) $(INSTALL_BINDIR)
endif
ifdef INSTALL_CREATEPACKAGEFPC
ifdef FPCMAKE
ifdef PACKAGE_VERSION
ifneq ($(wildcard Makefile.fpc),)
	$(FPCMAKE) -p -T$(CPU_TARGET)-$(OS_TARGET) Makefile.fpc
	$(MKDIR) $(INSTALL_UNITDIR)
	$(INSTALL) Package.fpc $(INSTALL_UNITDIR)
endif
endif
endif
endif
ifdef INSTALLPPUFILES
	$(MKDIR) $(INSTALL_UNITDIR)
	$(INSTALL) $(INSTALLPPUFILES) $(INSTALL_UNITDIR)
ifneq ($(INSTALLPPULINKFILES),)
	$(INSTALL) $(INSTALLPPULINKFILES) $(INSTALL_UNITDIR)
endif
ifneq ($(wildcard $(LIB_FULLNAME)),)
	$(MKDIR) $(INSTALL_LIBDIR)
	$(INSTALL) $(LIB_FULLNAME) $(INSTALL_LIBDIR)
ifdef inUnix
	ln -sf $(LIB_FULLNAME) $(INSTALL_LIBDIR)/$(LIB_NAME)
endif
endif
endif
ifdef INSTALL_FILES
	$(MKDIR) $(INSTALL_DATADIR)
	$(INSTALL) $(INSTALL_FILES) $(INSTALL_DATADIR)
endif
fpc_sourceinstall: distclean
	$(MKDIR) $(INSTALL_SOURCEDIR)
	$(COPYTREE) $(BASEDIR)/* $(INSTALL_SOURCEDIR)
fpc_exampleinstall: $(EXAMPLEINSTALLTARGET) $(addsuffix _distclean,$(TARGET_EXAMPLEDIRS))
ifdef HASEXAMPLES
	$(MKDIR) $(INSTALL_EXAMPLEDIR)
endif
ifdef EXAMPLESOURCEFILES
	$(COPY) $(EXAMPLESOURCEFILES) $(INSTALL_EXAMPLEDIR)
endif
ifdef TARGET_EXAMPLEDIRS
	$(COPYTREE) $(addsuffix /*,$(TARGET_EXAMPLEDIRS)) $(INSTALL_EXAMPLEDIR)
endif
.PHONY: fpc_distinstall
fpc_distinstall: install exampleinstall
.PHONY: fpc_zipinstall fpc_zipsourceinstall fpc_zipexampleinstall
ifndef PACKDIR
ifndef inUnix
PACKDIR=$(BASEDIR)/../fpc-pack
else
PACKDIR=/tmp/fpc-pack
endif
endif
ifndef ZIPNAME
ifdef DIST_ZIPNAME
ZIPNAME=$(DIST_ZIPNAME)
else
ZIPNAME=$(PACKAGE_NAME)
endif
endif
ifndef FULLZIPNAME
FULLZIPNAME=$(ZIPCROSSPREFIX)$(ZIPPREFIX)$(ZIPNAME)$(ZIPSUFFIX)
endif
ifndef ZIPTARGET
ifdef DIST_ZIPTARGET
ZIPTARGET=DIST_ZIPTARGET
else
ZIPTARGET=install
endif
endif
ifndef USEZIP
ifdef inUnix
USETAR=1
endif
endif
ifndef inUnix
USEZIPWRAPPER=1
endif
ifdef USEZIPWRAPPER
ZIPPATHSEP=$(PATHSEP)
ZIPWRAPPER=$(subst /,$(PATHSEP),$(DIST_DESTDIR)/fpczip$(SRCBATCHEXT))
else
ZIPPATHSEP=/
endif
ZIPCMD_CDPACK:=cd $(subst /,$(ZIPPATHSEP),$(PACKDIR))
ZIPCMD_CDBASE:=cd $(subst /,$(ZIPPATHSEP),$(BASEDIR))
ifdef USETAR
ZIPDESTFILE:=$(DIST_DESTDIR)/$(FULLZIPNAME)$(TAREXT)
ZIPCMD_ZIP:=$(TARPROG) c$(TAROPT)f $(ZIPDESTFILE) *
else
ZIPDESTFILE:=$(DIST_DESTDIR)/$(FULLZIPNAME)$(ZIPEXT)
ZIPCMD_ZIP:=$(subst /,$(ZIPPATHSEP),$(ZIPPROG)) -Dr $(ZIPOPT) $(ZIPDESTFILE) *
endif
fpc_zipinstall:
	$(MAKE) $(ZIPTARGET) INSTALL_PREFIX=$(PACKDIR) ZIPINSTALL=1
	$(MKDIR) $(DIST_DESTDIR)
	$(DEL) $(ZIPDESTFILE)
ifdef USEZIPWRAPPER
ifneq ($(ECHOREDIR),echo)
	$(ECHOREDIR) -e "$(subst \,\\,$(ZIPCMD_CDPACK))" > $(ZIPWRAPPER)
	$(ECHOREDIR) -e "$(subst \,\\,$(ZIPCMD_ZIP))" >> $(ZIPWRAPPER)
	$(ECHOREDIR) -e "$(subst \,\\,$(ZIPCMD_CDBASE))" >> $(ZIPWRAPPER)
else
	echo $(ZIPCMD_CDPACK) > $(ZIPWRAPPER)
	echo $(ZIPCMD_ZIP) >> $(ZIPWRAPPER)
	echo $(ZIPCMD_CDBASE) >> $(ZIPWRAPPER)
endif
ifdef inUnix
	/bin/sh $(ZIPWRAPPER)
else
ifdef RUNBATCH
	$(RUNBATCH) $(ZIPWRAPPER)
else
	$(ZIPWRAPPER)
endif
endif
	$(DEL) $(ZIPWRAPPER)
else
	$(ZIPCMD_CDPACK) ; $(ZIPCMD_ZIP) ; $(ZIPCMD_CDBASE)
endif
	$(DELTREE) $(PACKDIR)
fpc_zipsourceinstall:
	$(MAKE) fpc_zipinstall ZIPTARGET=sourceinstall ZIPSUFFIX=$(ZIPSOURCESUFFIX)
fpc_zipexampleinstall:
ifdef HASEXAMPLES
	$(MAKE) fpc_zipinstall ZIPTARGET=exampleinstall ZIPSUFFIX=$(ZIPEXAMPLESUFFIX)
endif
fpc_zipdistinstall:
	$(MAKE) fpc_zipinstall ZIPTARGET=distinstall
.PHONY: fpc_clean fpc_cleanall fpc_distclean
ifdef EXEFILES
override CLEANEXEFILES:=$(addprefix $(TARGETDIRPREFIX),$(CLEANEXEFILES))
override CLEANEXEDBGFILES:=$(addprefix $(TARGETDIRPREFIX),$(CLEANEXEDBGFILES))
endif
ifdef CLEAN_PROGRAMS
override CLEANEXEFILES+=$(addprefix $(TARGETDIRPREFIX),$(addsuffix $(EXEEXT), $(CLEAN_PROGRAMS)))
override CLEANEXEDBGFILES+=$(addprefix $(TARGETDIRPREFIX),$(addsuffix $(EXEDBGEXT), $(CLEAN_PROGRAMS)))
endif
ifdef CLEAN_UNITS
override CLEANPPUFILES+=$(addsuffix $(PPUEXT),$(CLEAN_UNITS))
endif
ifdef CLEANPPUFILES
override CLEANPPULINKFILES:=$(subst $(PPUEXT),$(OEXT),$(CLEANPPUFILES)) $(addprefix $(STATICLIBPREFIX),$(subst $(PPUEXT),$(STATICLIBEXT),$(CLEANPPUFILES))) $(addprefix $(IMPORTLIBPREFIX),$(subst $(PPUEXT),$(STATICLIBEXT),$(CLEANPPUFILES)))
ifdef DEBUGSYMEXT
override CLEANPPULINKFILES+=$(subst $(PPUEXT),$(DEBUGSYMEXT),$(CLEANPPUFILES))
endif
override CLEANPPUFILES:=$(addprefix $(UNITTARGETDIRPREFIX),$(CLEANPPUFILES))
override CLEANPPULINKFILES:=$(wildcard $(addprefix $(UNITTARGETDIRPREFIX),$(CLEANPPULINKFILES)))
endif
fpc_clean: $(CLEANTARGET)
ifdef CLEANEXEFILES
	-$(DEL) $(CLEANEXEFILES)
endif
ifdef CLEANEXEDBGFILES
	-$(DELTREE) $(CLEANEXEDBGFILES)
endif
ifdef CLEANPPUFILES
	-$(DEL) $(CLEANPPUFILES)
endif
ifneq ($(CLEANPPULINKFILES),)
	-$(DEL) $(CLEANPPULINKFILES)
endif
ifdef CLEANRSTFILES
	-$(DEL) $(addprefix $(UNITTARGETDIRPREFIX),$(CLEANRSTFILES))
endif
ifdef CLEAN_FILES
	-$(DEL) $(CLEAN_FILES)
endif
ifdef LIB_NAME
	-$(DEL) $(LIB_NAME) $(LIB_FULLNAME)
endif
	-$(DEL) $(FPCMADE) Package.fpc $(PPAS) script.res link.res $(FPCEXTFILE) $(REDIRFILE)
	-$(DEL) *$(ASMEXT) *_ppas$(BATCHEXT) ppas$(BATCHEXT) ppaslink$(BATCHEXT)
fpc_cleanall: $(CLEANTARGET)
ifdef CLEANEXEFILES
	-$(DEL) $(CLEANEXEFILES)
endif
ifdef COMPILER_UNITTARGETDIR
ifdef CLEANPPUFILES
	-$(DEL) $(CLEANPPUFILES)
endif
ifneq ($(CLEANPPULINKFILES),)
	-$(DEL) $(CLEANPPULINKFILES)
endif
ifdef CLEANRSTFILES
	-$(DEL) $(addprefix $(UNITTARGETDIRPREFIX),$(CLEANRSTFILES))
endif
endif
ifdef CLEAN_FILES
	-$(DEL) $(CLEAN_FILES)
endif
	-$(DELTREE) units
	-$(DELTREE) bin
	-$(DEL) *$(OEXT) *$(PPUEXT) *$(RSTEXT) *$(ASMEXT) *$(STATICLIBEXT) *$(SHAREDLIBEXT) *$(PPLEXT)
ifneq ($(PPUEXT),.ppu)
	-$(DEL) *.o *.ppu *.a
endif
	-$(DELTREE) *$(SMARTEXT)
	-$(DEL) fpcmade.* Package.fpc $(PPAS) script.res link.res $(FPCEXTFILE) $(REDIRFILE)
	-$(DEL) *_ppas$(BATCHEXT) ppas$(BATCHEXT) ppaslink$(BATCHEXT)
ifdef AOUTEXT
	-$(DEL) *$(AOUTEXT)
endif
ifdef DEBUGSYMEXT
	-$(DEL) *$(DEBUGSYMEXT)
endif
ifdef LOCALFPMAKEBIN
	-$(DEL) $(LOCALFPMAKEBIN)
	-$(DEL) $(FPMAKEBINOBJ)
endif
fpc_distclean: cleanall
.PHONY: fpc_baseinfo
override INFORULES+=fpc_baseinfo
fpc_baseinfo:
	@$(ECHO)
	@$(ECHO)  == Package info ==
	@$(ECHO)  Package Name..... $(PACKAGE_NAME)
	@$(ECHO)  Package Version.. $(PACKAGE_VERSION)
	@$(ECHO)
	@$(ECHO)  == Configuration info ==
	@$(ECHO)
	@$(ECHO)  FPC.......... $(FPC)
	@$(ECHO)  FPC Version.. $(FPC_VERSION)
	@$(ECHO)  Source CPU... $(CPU_SOURCE)
	@$(ECHO)  Target CPU... $(CPU_TARGET)
	@$(ECHO)  Source OS.... $(OS_SOURCE)
	@$(ECHO)  Target OS.... $(OS_TARGET)
	@$(ECHO)  Full Source.. $(FULL_SOURCE)
	@$(ECHO)  Full Target.. $(FULL_TARGET)
	@$(ECHO)  SourceSuffix. $(SOURCESUFFIX)
	@$(ECHO)  TargetSuffix. $(TARGETSUFFIX)
	@$(ECHO)  FPC fpmake... $(FPCFPMAKE)
	@$(ECHO)
	@$(ECHO)  == Directory info ==
	@$(ECHO)
	@$(ECHO)  Required pkgs... $(REQUIRE_PACKAGES)
	@$(ECHO)
	@$(ECHO)  Basedir......... $(BASEDIR)
	@$(ECHO)  FPCDir.......... $(FPCDIR)
	@$(ECHO)  CrossBinDir..... $(CROSSBINDIR)
	@$(ECHO)  UnitsDir........ $(UNITSDIR)
	@$(ECHO)  PackagesDir..... $(PACKAGESDIR)
	@$(ECHO)
	@$(ECHO)  GCC library..... $(GCCLIBDIR)
	@$(ECHO)  Other library... $(OTHERLIBDIR)
	@$(ECHO)
	@$(ECHO)  == Tools info ==
	@$(ECHO)
	@$(ECHO)  As........ $(AS)
	@$(ECHO)  Ld........ $(LD)
	@$(ECHO)  Ar........ $(AR)
	@$(ECHO)  Rc........ $(RC)
	@$(ECHO)
	@$(ECHO)  Mv........ $(MVPROG)
	@$(ECHO)  Cp........ $(CPPROG)
	@$(ECHO)  Rm........ $(RMPROG)
	@$(ECHO)  GInstall.. $(GINSTALL)
	@$(ECHO)  Echo...... $(ECHO)
	@$(ECHO)  Shell..... $(SHELL)
	@$(ECHO)  Date...... $(DATE)
	@$(ECHO)  FPCMake... $(FPCMAKE)
	@$(ECHO)  PPUMove... $(PPUMOVE)
	@$(ECHO)  Zip....... $(ZIPPROG)
	@$(ECHO)
	@$(ECHO)  == Object info ==
	@$(ECHO)
	@$(ECHO)  Target Loaders........ $(TARGET_LOADERS)
	@$(ECHO)  Target Units.......... $(TARGET_UNITS)
	@$(ECHO)  Target Implicit Units. $(TARGET_IMPLICITUNITS)
	@$(ECHO)  Target Programs....... $(TARGET_PROGRAMS)
	@$(ECHO)  Target Dirs........... $(TARGET_DIRS)
	@$(ECHO)  Target Examples....... $(TARGET_EXAMPLES)
	@$(ECHO)  Target ExampleDirs.... $(TARGET_EXAMPLEDIRS)
	@$(ECHO)
	@$(ECHO)  Clean Units......... $(CLEAN_UNITS)
	@$(ECHO)  Clean Files......... $(CLEAN_FILES)
	@$(ECHO)
	@$(ECHO)  Install Units....... $(INSTALL_UNITS)
	@$(ECHO)  Install Files....... $(INSTALL_FILES)
	@$(ECHO)
	@$(ECHO)  == Install info ==
	@$(ECHO)
	@$(ECHO)  DateStr.............. $(DATESTR)
	@$(ECHO)  ZipName.............. $(ZIPNAME)
	@$(ECHO)  ZipPrefix............ $(ZIPPREFIX)
	@$(ECHO)  ZipCrossPrefix....... $(ZIPCROSSPREFIX)
	@$(ECHO)  ZipSuffix............ $(ZIPSUFFIX)
	@$(ECHO)  FullZipName.......... $(FULLZIPNAME)
	@$(ECHO)  Install FPC Package.. $(INSTALL_FPCPACKAGE)
	@$(ECHO)
	@$(ECHO)  Install base dir..... $(INSTALL_BASEDIR)
	@$(ECHO)  Install binary dir... $(INSTALL_BINDIR)
	@$(ECHO)  Install library dir.. $(INSTALL_LIBDIR)
	@$(ECHO)  Install units dir.... $(INSTALL_UNITDIR)
	@$(ECHO)  Install source dir... $(INSTALL_SOURCEDIR)
	@$(ECHO)  Install doc dir...... $(INSTALL_DOCDIR)
	@$(ECHO)  Install example dir.. $(INSTALL_EXAMPLEDIR)
	@$(ECHO)  Install data dir..... $(INSTALL_DATADIR)
	@$(ECHO)
	@$(ECHO)  Dist destination dir. $(DIST_DESTDIR)
	@$(ECHO)  Dist zip name........ $(DIST_ZIPNAME)
	@$(ECHO)
.PHONY: fpc_info
fpc_info: $(INFORULES)
.PHONY: fpc_makefile fpc_makefiles fpc_makefile_sub1 fpc_makefile_sub2 \
	fpc_makefile_dirs
fpc_makefile:
	$(FPCMAKE) -w -T$(OS_TARGET) Makefile.fpc
fpc_makefile_sub1:
ifdef TARGET_DIRS
	$(FPCMAKE) -w -T$(OS_TARGET) $(addsuffix /Makefile.fpc,$(TARGET_DIRS))
endif
ifdef TARGET_EXAMPLEDIRS
	$(FPCMAKE) -w -T$(OS_TARGET) $(addsuffix /Makefile.fpc,$(TARGET_EXAMPLEDIRS))
endif
fpc_makefile_sub2: $(addsuffix _makefile_dirs,$(TARGET_DIRS) $(TARGET_EXAMPLEDIRS))
fpc_makefile_dirs: fpc_makefile_sub1 fpc_makefile_sub2
fpc_makefiles: fpc_makefile fpc_makefile_dirs
ifeq ($(FULL_TARGET),i386-linux)
TARGET_DIRS_LINUX=1
endif
ifeq ($(FULL_TARGET),i386-go32v2)
TARGET_DIRS_GO32V2=1
endif
ifeq ($(FULL_TARGET),i386-win32)
TARGET_DIRS_WIN32=1
endif
ifeq ($(FULL_TARGET),i386-os2)
TARGET_DIRS_OS2=1
endif
ifeq ($(FULL_TARGET),i386-freebsd)
TARGET_DIRS_FREEBSD=1
endif
ifeq ($(FULL_TARGET),i386-beos)
TARGET_DIRS_BEOS=1
endif
ifeq ($(FULL_TARGET),i386-haiku)
TARGET_DIRS_HAIKU=1
endif
ifeq ($(FULL_TARGET),i386-netbsd)
TARGET_DIRS_NETBSD=1
endif
ifeq ($(FULL_TARGET),i386-solaris)
TARGET_DIRS_SOLARIS=1
endif
ifeq ($(FULL_TARGET),i386-netware)
TARGET_DIRS_NETWARE=1
endif
ifeq ($(FULL_TARGET),i386-openbsd)
TARGET_DIRS_OPENBSD=1
endif
ifeq ($(FULL_TARGET),i386-wdosx)
TARGET_DIRS_WIN32=1
endif
ifeq ($(FULL_TARGET),i386-darwin)
TARGET_DIRS_DARWIN=1
endif
ifeq ($(FULL_TARGET),i386-emx)
TARGET_DIRS_EMX=1
endif
ifeq ($(FULL_TARGET),i386-watcom)
TARGET_DIRS_WATCOM=1
endif
ifeq ($(FULL_TARGET),i386-netwlibc)
TARGET_DIRS_NETWLIBC=1
endif
ifeq ($(FULL_TARGET),i386-wince)
TARGET_DIRS_WINCE=1
endif
ifeq ($(FULL_TARGET),i386-embedded)
TARGET_DIRS_EMBEDDED=1
endif
ifeq ($(FULL_TARGET),i386-symbian)
TARGET_DIRS_SYMBIAN=1
endif
ifeq ($(FULL_TARGET),i386-nativent)
TARGET_DIRS_NATIVENT=1
endif
ifeq ($(FULL_TARGET),i386-iphonesim)
TARGET_DIRS_DARWIN=1
endif
ifeq ($(FULL_TARGET),i386-android)
TARGET_DIRS_ANDROID=1
endif
ifeq ($(FULL_TARGET),i386-aros)
TARGET_DIRS_AROS=1
endif
ifeq ($(FULL_TARGET),m68k-linux)
TARGET_DIRS_LINUX=1
endif
ifeq ($(FULL_TARGET),m68k-netbsd)
TARGET_DIRS_NETBSD=1
endif
ifeq ($(FULL_TARGET),m68k-amiga)
TARGET_DIRS_AMIGA=1
endif
ifeq ($(FULL_TARGET),m68k-atari)
TARGET_DIRS_ATARI=1
endif
ifeq ($(FULL_TARGET),m68k-palmos)
TARGET_DIRS_PALMOS=1
endif
ifeq ($(FULL_TARGET),m68k-macosclassic)
TARGET_DIRS_MACOS=1
endif
ifeq ($(FULL_TARGET),m68k-embedded)
TARGET_DIRS_EMBEDDED=1
endif
ifeq ($(FULL_TARGET),powerpc-linux)
TARGET_DIRS_LINUX=1
endif
ifeq ($(FULL_TARGET),powerpc-netbsd)
TARGET_DIRS_NETBSD=1
endif
ifeq ($(FULL_TARGET),powerpc-amiga)
TARGET_DIRS_AMIGA=1
endif
ifeq ($(FULL_TARGET),powerpc-macosclassic)
TARGET_DIRS_MACOS=1
endif
ifeq ($(FULL_TARGET),powerpc-darwin)
TARGET_DIRS_DARWIN=1
endif
ifeq ($(FULL_TARGET),powerpc-morphos)
TARGET_DIRS_MORPHOS=1
endif
ifeq ($(FULL_TARGET),powerpc-embedded)
TARGET_DIRS_EMBEDDED=1
endif
ifeq ($(FULL_TARGET),powerpc-wii)
TARGET_DIRS_WII=1
endif
ifeq ($(FULL_TARGET),powerpc-aix)
TARGET_DIRS_AIX=1
endif
ifeq ($(FULL_TARGET),sparc-linux)
TARGET_DIRS_LINUX=1
endif
ifeq ($(FULL_TARGET),sparc-netbsd)
TARGET_DIRS_NETBSD=1
endif
ifeq ($(FULL_TARGET),sparc-solaris)
TARGET_DIRS_SOLARIS=1
endif
ifeq ($(FULL_TARGET),sparc-embedded)
TARGET_DIRS_EMBEDDED=1
endif
ifeq ($(FULL_TARGET),x86_64-linux)
TARGET_DIRS_LINUX=1
endif
ifeq ($(FULL_TARGET),x86_64-freebsd)
TARGET_DIRS_FREEBSD=1
endif
ifeq ($(FULL_TARGET),x86_64-haiku)
TARGET_DIRS_HAIKU=1
endif
ifeq ($(FULL_TARGET),x86_64-netbsd)
TARGET_DIRS_NETBSD=1
endif
ifeq ($(FULL_TARGET),x86_64-solaris)
TARGET_DIRS_SOLARIS=1
endif
ifeq ($(FULL_TARGET),x86_64-openbsd)
TARGET_DIRS_OPENBSD=1
endif
ifeq ($(FULL_TARGET),x86_64-darwin)
TARGET_DIRS_DARWIN=1
endif
ifeq ($(FULL_TARGET),x86_64-win64)
TARGET_DIRS_WIN64=1
endif
ifeq ($(FULL_TARGET),x86_64-embedded)
TARGET_DIRS_EMBEDDED=1
endif
ifeq ($(FULL_TARGET),x86_64-iphonesim)
TARGET_DIRS_DARWIN=1
endif
ifeq ($(FULL_TARGET),x86_64-android)
TARGET_DIRS_ANDROID=1
endif
ifeq ($(FULL_TARGET),x86_64-aros)
TARGET_DIRS_AROS=1
endif
ifeq ($(FULL_TARGET),x86_64-dragonfly)
TARGET_DIRS_DRAGONFLY=1
endif
ifeq ($(FULL_TARGET),arm-linux)
TARGET_DIRS_LINUX=1
endif
ifeq ($(FULL_TARGET),arm-netbsd)
TARGET_DIRS_NETBSD=1
endif
ifeq ($(FULL_TARGET),arm-palmos)
TARGET_DIRS_PALMOS=1
endif
ifeq ($(FULL_TARGET),arm-wince)
TARGET_DIRS_WINCE=1
endif
ifeq ($(FULL_TARGET),arm-gba)
TARGET_DIRS_GBA=1
endif
ifeq ($(FULL_TARGET),arm-nds)
TARGET_DIRS_NDS=1
endif
ifeq ($(FULL_TARGET),arm-embedded)
TARGET_DIRS_EMBEDDED=1
endif
ifeq ($(FULL_TARGET),arm-symbian)
TARGET_DIRS_SYMBIAN=1
endif
ifeq ($(FULL_TARGET),arm-android)
TARGET_DIRS_ANDROID=1
endif
ifeq ($(FULL_TARGET),arm-aros)
TARGET_DIRS_AROS=1
endif
ifeq ($(FULL_TARGET),arm-ios)
TARGET_DIRS_DARWIN=1
endif
ifeq ($(FULL_TARGET),powerpc64-linux)
TARGET_DIRS_LINUX=1
endif
ifeq ($(FULL_TARGET),powerpc64-darwin)
TARGET_DIRS_DARWIN=1
endif
ifeq ($(FULL_TARGET),powerpc64-embedded)
TARGET_DIRS_EMBEDDED=1
endif
ifeq ($(FULL_TARGET),powerpc64-aix)
TARGET_DIRS_AIX=1
endif
ifeq ($(FULL_TARGET),avr-embedded)
TARGET_DIRS_EMBEDDED=1
endif
ifeq ($(FULL_TARGET),armeb-linux)
TARGET_DIRS_LINUX=1
endif
ifeq ($(FULL_TARGET),armeb-embedded)
TARGET_DIRS_EMBEDDED=1
endif
ifeq ($(FULL_TARGET),mips-linux)
TARGET_DIRS_LINUX=1
endif
ifeq ($(FULL_TARGET),mipsel-linux)
TARGET_DIRS_LINUX=1
endif
ifeq ($(FULL_TARGET),mipsel-embedded)
TARGET_DIRS_EMBEDDED=1
endif
ifeq ($(FULL_TARGET),mipsel-android)
TARGET_DIRS_ANDROID=1
endif
ifeq ($(FULL_TARGET),jvm-java)
TARGET_DIRS_JAVA=1
endif
ifeq ($(FULL_TARGET),jvm-android)
TARGET_DIRS_ANDROID/JVM=1
endif
ifeq ($(FULL_TARGET),i8086-embedded)
TARGET_DIRS_EMBEDDED=1
endif
ifeq ($(FULL_TARGET),i8086-msdos)
TARGET_DIRS_MSDOS=1
endif
ifeq ($(FULL_TARGET),i8086-win16)
TARGET_DIRS_WIN16=1
endif
ifeq ($(FULL_TARGET),aarch64-linux)
TARGET_DIRS_LINUX=1
endif
ifeq ($(FULL_TARGET),aarch64-darwin)
TARGET_DIRS_DARWIN=1
endif
ifeq ($(FULL_TARGET),aarch64-android)
TARGET_DIRS_ANDROID=1
endif
ifeq ($(FULL_TARGET),aarch64-ios)
TARGET_DIRS_DARWIN=1
endif
ifeq ($(FULL_TARGET),sparc64-linux)
TARGET_DIRS_LINUX=1
endif
ifdef TARGET_DIRS_LINUX
linux_all:
	$(MAKE) -C linux all
linux_debug:
	$(MAKE) -C linux debug
linux_smart:
	$(MAKE) -C linux smart
linux_release:
	$(MAKE) -C linux release
linux_units:
	$(MAKE) -C linux units
linux_examples:
	$(MAKE) -C linux examples
linux_shared:
	$(MAKE) -C linux shared
linux_install:
	$(MAKE) -C linux install
linux_sourceinstall:
	$(MAKE) -C linux sourceinstall
linux_exampleinstall:
	$(MAKE) -C linux exampleinstall
linux_distinstall:
	$(MAKE) -C linux distinstall
linux_zipinstall:
	$(MAKE) -C linux zipinstall
linux_zipsourceinstall:
	$(MAKE) -C linux zipsourceinstall
linux_zipexampleinstall:
	$(MAKE) -C linux zipexampleinstall
linux_zipdistinstall:
	$(MAKE) -C linux zipdistinstall
linux_clean:
	$(MAKE) -C linux clean
linux_distclean:
	$(MAKE) -C linux distclean
linux_cleanall:
	$(MAKE) -C linux cleanall
linux_info:
	$(MAKE) -C linux info
linux_makefiles:
	$(MAKE) -C linux makefiles
linux:
	$(MAKE) -C linux all
.PHONY: linux_all linux_debug linux_smart linux_release linux_units linux_examples linux_shared linux_install linux_sourceinstall linux_exampleinstall linux_distinstall linux_zipinstall linux_zipsourceinstall linux_zipexampleinstall linux_zipdistinstall linux_clean linux_distclean linux_cleanall linux_info linux_makefiles linux
endif
ifdef TARGET_DIRS_GO32V2
go32v2_all:
	$(MAKE) -C go32v2 all
go32v2_debug:
	$(MAKE) -C go32v2 debug
go32v2_smart:
	$(MAKE) -C go32v2 smart
go32v2_release:
	$(MAKE) -C go32v2 release
go32v2_units:
	$(MAKE) -C go32v2 units
go32v2_examples:
	$(MAKE) -C go32v2 examples
go32v2_shared:
	$(MAKE) -C go32v2 shared
go32v2_install:
	$(MAKE) -C go32v2 install
go32v2_sourceinstall:
	$(MAKE) -C go32v2 sourceinstall
go32v2_exampleinstall:
	$(MAKE) -C go32v2 exampleinstall
go32v2_distinstall:
	$(MAKE) -C go32v2 distinstall
go32v2_zipinstall:
	$(MAKE) -C go32v2 zipinstall
go32v2_zipsourceinstall:
	$(MAKE) -C go32v2 zipsourceinstall
go32v2_zipexampleinstall:
	$(MAKE) -C go32v2 zipexampleinstall
go32v2_zipdistinstall:
	$(MAKE) -C go32v2 zipdistinstall
go32v2_clean:
	$(MAKE) -C go32v2 clean
go32v2_distclean:
	$(MAKE) -C go32v2 distclean
go32v2_cleanall:
	$(MAKE) -C go32v2 cleanall
go32v2_info:
	$(MAKE) -C go32v2 info
go32v2_makefiles:
	$(MAKE) -C go32v2 makefiles
go32v2:
	$(MAKE) -C go32v2 all
.PHONY: go32v2_all go32v2_debug go32v2_smart go32v2_release go32v2_units go32v2_examples go32v2_shared go32v2_install go32v2_sourceinstall go32v2_exampleinstall go32v2_distinstall go32v2_zipinstall go32v2_zipsourceinstall go32v2_zipexampleinstall go32v2_zipdistinstall go32v2_clean go32v2_distclean go32v2_cleanall go32v2_info go32v2_makefiles go32v2
endif
ifdef TARGET_DIRS_WIN32
win32_all:
	$(MAKE) -C win32 all
win32_debug:
	$(MAKE) -C win32 debug
win32_smart:
	$(MAKE) -C win32 smart
win32_release:
	$(MAKE) -C win32 release
win32_units:
	$(MAKE) -C win32 units
win32_examples:
	$(MAKE) -C win32 examples
win32_shared:
	$(MAKE) -C win32 shared
win32_install:
	$(MAKE) -C win32 install
win32_sourceinstall:
	$(MAKE) -C win32 sourceinstall
win32_exampleinstall:
	$(MAKE) -C win32 exampleinstall
win32_distinstall:
	$(MAKE) -C win32 distinstall
win32_zipinstall:
	$(MAKE) -C win32 zipinstall
win32_zipsourceinstall:
	$(MAKE) -C win32 zipsourceinstall
win32_zipexampleinstall:
	$(MAKE) -C win32 zipexampleinstall
win32_zipdistinstall:
	$(MAKE) -C win32 zipdistinstall
win32_clean:
	$(MAKE) -C win32 clean
win32_distclean:
	$(MAKE) -C win32 distclean
win32_cleanall:
	$(MAKE) -C win32 cleanall
win32_info:
	$(MAKE) -C win32 info
win32_makefiles:
	$(MAKE) -C win32 makefiles
win32:
	$(MAKE) -C win32 all
.PHONY: win32_all win32_debug win32_smart win32_release win32_units win32_examples win32_shared win32_install win32_sourceinstall win32_exampleinstall win32_distinstall win32_zipinstall win32_zipsourceinstall win32_zipexampleinstall win32_zipdistinstall win32_clean win32_distclean win32_cleanall win32_info win32_makefiles win32
endif
ifdef TARGET_DIRS_OS2
os2_all:
	$(MAKE) -C os2 all
os2_debug:
	$(MAKE) -C os2 debug
os2_smart:
	$(MAKE) -C os2 smart
os2_release:
	$(MAKE) -C os2 release
os2_units:
	$(MAKE) -C os2 units
os2_examples:
	$(MAKE) -C os2 examples
os2_shared:
	$(MAKE) -C os2 shared
os2_install:
	$(MAKE) -C os2 install
os2_sourceinstall:
	$(MAKE) -C os2 sourceinstall
os2_exampleinstall:
	$(MAKE) -C os2 exampleinstall
os2_distinstall:
	$(MAKE) -C os2 distinstall
os2_zipinstall:
	$(MAKE) -C os2 zipinstall
os2_zipsourceinstall:
	$(MAKE) -C os2 zipsourceinstall
os2_zipexampleinstall:
	$(MAKE) -C os2 zipexampleinstall
os2_zipdistinstall:
	$(MAKE) -C os2 zipdistinstall
os2_clean:
	$(MAKE) -C os2 clean
os2_distclean:
	$(MAKE) -C os2 distclean
os2_cleanall:
	$(MAKE) -C os2 cleanall
os2_info:
	$(MAKE) -C os2 info
os2_makefiles:
	$(MAKE) -C os2 makefiles
os2:
	$(MAKE) -C os2 all
.PHONY: os2_all os2_debug os2_smart os2_release os2_units os2_examples os2_shared os2_install os2_sourceinstall os2_exampleinstall os2_distinstall os2_zipinstall os2_zipsourceinstall os2_zipexampleinstall os2_zipdistinstall os2_clean os2_distclean os2_cleanall os2_info os2_makefiles os2
endif
ifdef TARGET_DIRS_FREEBSD
freebsd_all:
	$(MAKE) -C freebsd all
freebsd_debug:
	$(MAKE) -C freebsd debug
freebsd_smart:
	$(MAKE) -C freebsd smart
freebsd_release:
	$(MAKE) -C freebsd release
freebsd_units:
	$(MAKE) -C freebsd units
freebsd_examples:
	$(MAKE) -C freebsd examples
freebsd_shared:
	$(MAKE) -C freebsd shared
freebsd_install:
	$(MAKE) -C freebsd install
freebsd_sourceinstall:
	$(MAKE) -C freebsd sourceinstall
freebsd_exampleinstall:
	$(MAKE) -C freebsd exampleinstall
freebsd_distinstall:
	$(MAKE) -C freebsd distinstall
freebsd_zipinstall:
	$(MAKE) -C freebsd zipinstall
freebsd_zipsourceinstall:
	$(MAKE) -C freebsd zipsourceinstall
freebsd_zipexampleinstall:
	$(MAKE) -C freebsd zipexampleinstall
freebsd_zipdistinstall:
	$(MAKE) -C freebsd zipdistinstall
freebsd_clean:
	$(MAKE) -C freebsd clean
freebsd_distclean:
	$(MAKE) -C freebsd distclean
freebsd_cleanall:
	$(MAKE) -C freebsd cleanall
freebsd_info:
	$(MAKE) -C freebsd info
freebsd_makefiles:
	$(MAKE) -C freebsd makefiles
freebsd:
	$(MAKE) -C freebsd all
.PHONY: freebsd_all freebsd_debug freebsd_smart freebsd_release freebsd_units freebsd_examples freebsd_shared freebsd_install freebsd_sourceinstall freebsd_exampleinstall freebsd_distinstall freebsd_zipinstall freebsd_zipsourceinstall freebsd_zipexampleinstall freebsd_zipdistinstall freebsd_clean freebsd_distclean freebsd_cleanall freebsd_info freebsd_makefiles freebsd
endif
ifdef TARGET_DIRS_BEOS
beos_all:
	$(MAKE) -C beos all
beos_debug:
	$(MAKE) -C beos debug
beos_smart:
	$(MAKE) -C beos smart
beos_release:
	$(MAKE) -C beos release
beos_units:
	$(MAKE) -C beos units
beos_examples:
	$(MAKE) -C beos examples
beos_shared:
	$(MAKE) -C beos shared
beos_install:
	$(MAKE) -C beos install
beos_sourceinstall:
	$(MAKE) -C beos sourceinstall
beos_exampleinstall:
	$(MAKE) -C beos exampleinstall
beos_distinstall:
	$(MAKE) -C beos distinstall
beos_zipinstall:
	$(MAKE) -C beos zipinstall
beos_zipsourceinstall:
	$(MAKE) -C beos zipsourceinstall
beos_zipexampleinstall:
	$(MAKE) -C beos zipexampleinstall
beos_zipdistinstall:
	$(MAKE) -C beos zipdistinstall
beos_clean:
	$(MAKE) -C beos clean
beos_distclean:
	$(MAKE) -C beos distclean
beos_cleanall:
	$(MAKE) -C beos cleanall
beos_info:
	$(MAKE) -C beos info
beos_makefiles:
	$(MAKE) -C beos makefiles
beos:
	$(MAKE) -C beos all
.PHONY: beos_all beos_debug beos_smart beos_release beos_units beos_examples beos_shared beos_install beos_sourceinstall beos_exampleinstall beos_distinstall beos_zipinstall beos_zipsourceinstall beos_zipexampleinstall beos_zipdistinstall beos_clean beos_distclean beos_cleanall beos_info beos_makefiles beos
endif
ifdef TARGET_DIRS_HAIKU
haiku_all:
	$(MAKE) -C haiku all
haiku_debug:
	$(MAKE) -C haiku debug
haiku_smart:
	$(MAKE) -C haiku smart
haiku_release:
	$(MAKE) -C haiku release
haiku_units:
	$(MAKE) -C haiku units
haiku_examples:
	$(MAKE) -C haiku examples
haiku_shared:
	$(MAKE) -C haiku shared
haiku_install:
	$(MAKE) -C haiku install
haiku_sourceinstall:
	$(MAKE) -C haiku sourceinstall
haiku_exampleinstall:
	$(MAKE) -C haiku exampleinstall
haiku_distinstall:
	$(MAKE) -C haiku distinstall
haiku_zipinstall:
	$(MAKE) -C haiku zipinstall
haiku_zipsourceinstall:
	$(MAKE) -C haiku zipsourceinstall
haiku_zipexampleinstall:
	$(MAKE) -C haiku zipexampleinstall
haiku_zipdistinstall:
	$(MAKE) -C haiku zipdistinstall
haiku_clean:
	$(MAKE) -C haiku clean
haiku_distclean:
	$(MAKE) -C haiku distclean
haiku_cleanall:
	$(MAKE) -C haiku cleanall
haiku_info:
	$(MAKE) -C haiku info
haiku_makefiles:
	$(MAKE) -C haiku makefiles
haiku:
	$(MAKE) -C haiku all
.PHONY: haiku_all haiku_debug haiku_smart haiku_release haiku_units haiku_examples haiku_shared haiku_install haiku_sourceinstall haiku_exampleinstall haiku_distinstall haiku_zipinstall haiku_zipsourceinstall haiku_zipexampleinstall haiku_zipdistinstall haiku_clean haiku_distclean haiku_cleanall haiku_info haiku_makefiles haiku
endif
ifdef TARGET_DIRS_NETBSD
netbsd_all:
	$(MAKE) -C netbsd all
netbsd_debug:
	$(MAKE) -C netbsd debug
netbsd_smart:
	$(MAKE) -C netbsd smart
netbsd_release:
	$(MAKE) -C netbsd release
netbsd_units:
	$(MAKE) -C netbsd units
netbsd_examples:
	$(MAKE) -C netbsd examples
netbsd_shared:
	$(MAKE) -C netbsd shared
netbsd_install:
	$(MAKE) -C netbsd install
netbsd_sourceinstall:
	$(MAKE) -C netbsd sourceinstall
netbsd_exampleinstall:
	$(MAKE) -C netbsd exampleinstall
netbsd_distinstall:
	$(MAKE) -C netbsd distinstall
netbsd_zipinstall:
	$(MAKE) -C netbsd zipinstall
netbsd_zipsourceinstall:
	$(MAKE) -C netbsd zipsourceinstall
netbsd_zipexampleinstall:
	$(MAKE) -C netbsd zipexampleinstall
netbsd_zipdistinstall:
	$(MAKE) -C netbsd zipdistinstall
netbsd_clean:
	$(MAKE) -C netbsd clean
netbsd_distclean:
	$(MAKE) -C netbsd distclean
netbsd_cleanall:
	$(MAKE) -C netbsd cleanall
netbsd_info:
	$(MAKE) -C netbsd info
netbsd_makefiles:
	$(MAKE) -C netbsd makefiles
netbsd:
	$(MAKE) -C netbsd all
.PHONY: netbsd_all netbsd_debug netbsd_smart netbsd_release netbsd_units netbsd_examples netbsd_shared netbsd_install netbsd_sourceinstall netbsd_exampleinstall netbsd_distinstall netbsd_zipinstall netbsd_zipsourceinstall netbsd_zipexampleinstall netbsd_zipdistinstall netbsd_clean netbsd_distclean netbsd_cleanall netbsd_info netbsd_makefiles netbsd
endif
ifdef TARGET_DIRS_SOLARIS
solaris_all:
	$(MAKE) -C solaris all
solaris_debug:
	$(MAKE) -C solaris debug
solaris_smart:
	$(MAKE) -C solaris smart
solaris_release:
	$(MAKE) -C solaris release
solaris_units:
	$(MAKE) -C solaris units
solaris_examples:
	$(MAKE) -C solaris examples
solaris_shared:
	$(MAKE) -C solaris shared
solaris_install:
	$(MAKE) -C solaris install
solaris_sourceinstall:
	$(MAKE) -C solaris sourceinstall
solaris_exampleinstall:
	$(MAKE) -C solaris exampleinstall
solaris_distinstall:
	$(MAKE) -C solaris distinstall
solaris_zipinstall:
	$(MAKE) -C solaris zipinstall
solaris_zipsourceinstall:
	$(MAKE) -C solaris zipsourceinstall
solaris_zipexampleinstall:
	$(MAKE) -C solaris zipexampleinstall
solaris_zipdistinstall:
	$(MAKE) -C solaris zipdistinstall
solaris_clean:
	$(MAKE) -C solaris clean
solaris_distclean:
	$(MAKE) -C solaris distclean
solaris_cleanall:
	$(MAKE) -C solaris cleanall
solaris_info:
	$(MAKE) -C solaris info
solaris_makefiles:
	$(MAKE) -C solaris makefiles
solaris:
	$(MAKE) -C solaris all
.PHONY: solaris_all solaris_debug solaris_smart solaris_release solaris_units solaris_examples solaris_shared solaris_install solaris_sourceinstall solaris_exampleinstall solaris_distinstall solaris_zipinstall solaris_zipsourceinstall solaris_zipexampleinstall solaris_zipdistinstall solaris_clean solaris_distclean solaris_cleanall solaris_info solaris_makefiles solaris
endif
ifdef TARGET_DIRS_NETWARE
netware_all:
	$(MAKE) -C netware all
netware_debug:
	$(MAKE) -C netware debug
netware_smart:
	$(MAKE) -C netware smart
netware_release:
	$(MAKE) -C netware release
netware_units:
	$(MAKE) -C netware units
netware_examples:
	$(MAKE) -C netware examples
netware_shared:
	$(MAKE) -C netware shared
netware_install:
	$(MAKE) -C netware install
netware_sourceinstall:
	$(MAKE) -C netware sourceinstall
netware_exampleinstall:
	$(MAKE) -C netware exampleinstall
netware_distinstall:
	$(MAKE) -C netware distinstall
netware_zipinstall:
	$(MAKE) -C netware zipinstall
netware_zipsourceinstall:
	$(MAKE) -C netware zipsourceinstall
netware_zipexampleinstall:
	$(MAKE) -C netware zipexampleinstall
netware_zipdistinstall:
	$(MAKE) -C netware zipdistinstall
netware_clean:
	$(MAKE) -C netware clean
netware_distclean:
	$(MAKE) -C netware distclean
netware_cleanall:
	$(MAKE) -C netware cleanall
netware_info:
	$(MAKE) -C netware info
netware_makefiles:
	$(MAKE) -C netware makefiles
netware:
	$(MAKE) -C netware all
.PHONY: netware_all netware_debug netware_smart netware_release netware_units netware_examples netware_shared netware_install netware_sourceinstall netware_exampleinstall netware_distinstall netware_zipinstall netware_zipsourceinstall netware_zipexampleinstall netware_zipdistinstall netware_clean netware_distclean netware_cleanall netware_info netware_makefiles netware
endif
ifdef TARGET_DIRS_OPENBSD
openbsd_all:
	$(MAKE) -C openbsd all
openbsd_debug:
	$(MAKE) -C openbsd debug
openbsd_smart:
	$(MAKE) -C openbsd smart
openbsd_release:
	$(MAKE) -C openbsd release
openbsd_units:
	$(MAKE) -C openbsd units
openbsd_examples:
	$(MAKE) -C openbsd examples
openbsd_shared:
	$(MAKE) -C openbsd shared
openbsd_install:
	$(MAKE) -C openbsd install
openbsd_sourceinstall:
	$(MAKE) -C openbsd sourceinstall
openbsd_exampleinstall:
	$(MAKE) -C openbsd exampleinstall
openbsd_distinstall:
	$(MAKE) -C openbsd distinstall
openbsd_zipinstall:
	$(MAKE) -C openbsd zipinstall
openbsd_zipsourceinstall:
	$(MAKE) -C openbsd zipsourceinstall
openbsd_zipexampleinstall:
	$(MAKE) -C openbsd zipexampleinstall
openbsd_zipdistinstall:
	$(MAKE) -C openbsd zipdistinstall
openbsd_clean:
	$(MAKE) -C openbsd clean
openbsd_distclean:
	$(MAKE) -C openbsd distclean
openbsd_cleanall:
	$(MAKE) -C openbsd cleanall
openbsd_info:
	$(MAKE) -C openbsd info
openbsd_makefiles:
	$(MAKE) -C openbsd makefiles
openbsd:
	$(MAKE) -C openbsd all
.PHONY: openbsd_all openbsd_debug openbsd_smart openbsd_release openbsd_units openbsd_examples openbsd_shared openbsd_install openbsd_sourceinstall openbsd_exampleinstall openbsd_distinstall openbsd_zipinstall openbsd_zipsourceinstall openbsd_zipexampleinstall openbsd_zipdistinstall openbsd_clean openbsd_distclean openbsd_cleanall openbsd_info openbsd_makefiles openbsd
endif
ifdef TARGET_DIRS_DARWIN
darwin_all:
	$(MAKE) -C darwin all
darwin_debug:
	$(MAKE) -C darwin debug
darwin_smart:
	$(MAKE) -C darwin smart
darwin_release:
	$(MAKE) -C darwin release
darwin_units:
	$(MAKE) -C darwin units
darwin_examples:
	$(MAKE) -C darwin examples
darwin_shared:
	$(MAKE) -C darwin shared
darwin_install:
	$(MAKE) -C darwin install
darwin_sourceinstall:
	$(MAKE) -C darwin sourceinstall
darwin_exampleinstall:
	$(MAKE) -C darwin exampleinstall
darwin_distinstall:
	$(MAKE) -C darwin distinstall
darwin_zipinstall:
	$(MAKE) -C darwin zipinstall
darwin_zipsourceinstall:
	$(MAKE) -C darwin zipsourceinstall
darwin_zipexampleinstall:
	$(MAKE) -C darwin zipexampleinstall
darwin_zipdistinstall:
	$(MAKE) -C darwin zipdistinstall
darwin_clean:
	$(MAKE) -C darwin clean
darwin_distclean:
	$(MAKE) -C darwin distclean
darwin_cleanall:
	$(MAKE) -C darwin cleanall
darwin_info:
	$(MAKE) -C darwin info
darwin_makefiles:
	$(MAKE) -C darwin makefiles
darwin:
	$(MAKE) -C darwin all
.PHONY: darwin_all darwin_debug darwin_smart darwin_release darwin_units darwin_examples darwin_shared darwin_install darwin_sourceinstall darwin_exampleinstall darwin_distinstall darwin_zipinstall darwin_zipsourceinstall darwin_zipexampleinstall darwin_zipdistinstall darwin_clean darwin_distclean darwin_cleanall darwin_info darwin_makefiles darwin
endif
ifdef TARGET_DIRS_EMX
emx_all:
	$(MAKE) -C emx all
emx_debug:
	$(MAKE) -C emx debug
emx_smart:
	$(MAKE) -C emx smart
emx_release:
	$(MAKE) -C emx release
emx_units:
	$(MAKE) -C emx units
emx_examples:
	$(MAKE) -C emx examples
emx_shared:
	$(MAKE) -C emx shared
emx_install:
	$(MAKE) -C emx install
emx_sourceinstall:
	$(MAKE) -C emx sourceinstall
emx_exampleinstall:
	$(MAKE) -C emx exampleinstall
emx_distinstall:
	$(MAKE) -C emx distinstall
emx_zipinstall:
	$(MAKE) -C emx zipinstall
emx_zipsourceinstall:
	$(MAKE) -C emx zipsourceinstall
emx_zipexampleinstall:
	$(MAKE) -C emx zipexampleinstall
emx_zipdistinstall:
	$(MAKE) -C emx zipdistinstall
emx_clean:
	$(MAKE) -C emx clean
emx_distclean:
	$(MAKE) -C emx distclean
emx_cleanall:
	$(MAKE) -C emx cleanall
emx_info:
	$(MAKE) -C emx info
emx_makefiles:
	$(MAKE) -C emx makefiles
emx:
	$(MAKE) -C emx all
.PHONY: emx_all emx_debug emx_smart emx_release emx_units emx_examples emx_shared emx_install emx_sourceinstall emx_exampleinstall emx_distinstall emx_zipinstall emx_zipsourceinstall emx_zipexampleinstall emx_zipdistinstall emx_clean emx_distclean emx_cleanall emx_info emx_makefiles emx
endif
ifdef TARGET_DIRS_WATCOM
watcom_all:
	$(MAKE) -C watcom all
watcom_debug:
	$(MAKE) -C watcom debug
watcom_smart:
	$(MAKE) -C watcom smart
watcom_release:
	$(MAKE) -C watcom release
watcom_units:
	$(MAKE) -C watcom units
watcom_examples:
	$(MAKE) -C watcom examples
watcom_shared:
	$(MAKE) -C watcom shared
watcom_install:
	$(MAKE) -C watcom install
watcom_sourceinstall:
	$(MAKE) -C watcom sourceinstall
watcom_exampleinstall:
	$(MAKE) -C watcom exampleinstall
watcom_distinstall:
	$(MAKE) -C watcom distinstall
watcom_zipinstall:
	$(MAKE) -C watcom zipinstall
watcom_zipsourceinstall:
	$(MAKE) -C watcom zipsourceinstall
watcom_zipexampleinstall:
	$(MAKE) -C watcom zipexampleinstall
watcom_zipdistinstall:
	$(MAKE) -C watcom zipdistinstall
watcom_clean:
	$(MAKE) -C watcom clean
watcom_distclean:
	$(MAKE) -C watcom distclean
watcom_cleanall:
	$(MAKE) -C watcom cleanall
watcom_info:
	$(MAKE) -C watcom info
watcom_makefiles:
	$(MAKE) -C watcom makefiles
watcom:
	$(MAKE) -C watcom all
.PHONY: watcom_all watcom_debug watcom_smart watcom_release watcom_units watcom_examples watcom_shared watcom_install watcom_sourceinstall watcom_exampleinstall watcom_distinstall watcom_zipinstall watcom_zipsourceinstall watcom_zipexampleinstall watcom_zipdistinstall watcom_clean watcom_distclean watcom_cleanall watcom_info watcom_makefiles watcom
endif
ifdef TARGET_DIRS_NETWLIBC
netwlibc_all:
	$(MAKE) -C netwlibc all
netwlibc_debug:
	$(MAKE) -C netwlibc debug
netwlibc_smart:
	$(MAKE) -C netwlibc smart
netwlibc_release:
	$(MAKE) -C netwlibc release
netwlibc_units:
	$(MAKE) -C netwlibc units
netwlibc_examples:
	$(MAKE) -C netwlibc examples
netwlibc_shared:
	$(MAKE) -C netwlibc shared
netwlibc_install:
	$(MAKE) -C netwlibc install
netwlibc_sourceinstall:
	$(MAKE) -C netwlibc sourceinstall
netwlibc_exampleinstall:
	$(MAKE) -C netwlibc exampleinstall
netwlibc_distinstall:
	$(MAKE) -C netwlibc distinstall
netwlibc_zipinstall:
	$(MAKE) -C netwlibc zipinstall
netwlibc_zipsourceinstall:
	$(MAKE) -C netwlibc zipsourceinstall
netwlibc_zipexampleinstall:
	$(MAKE) -C netwlibc zipexampleinstall
netwlibc_zipdistinstall:
	$(MAKE) -C netwlibc zipdistinstall
netwlibc_clean:
	$(MAKE) -C netwlibc clean
netwlibc_distclean:
	$(MAKE) -C netwlibc distclean
netwlibc_cleanall:
	$(MAKE) -C netwlibc cleanall
netwlibc_info:
	$(MAKE) -C netwlibc info
netwlibc_makefiles:
	$(MAKE) -C netwlibc makefiles
netwlibc:
	$(MAKE) -C netwlibc all
.PHONY: netwlibc_all netwlibc_debug netwlibc_smart netwlibc_release netwlibc_units netwlibc_examples netwlibc_shared netwlibc_install netwlibc_sourceinstall netwlibc_exampleinstall netwlibc_distinstall netwlibc_zipinstall netwlibc_zipsourceinstall netwlibc_zipexampleinstall netwlibc_zipdistinstall netwlibc_clean netwlibc_distclean netwlibc_cleanall netwlibc_info netwlibc_makefiles netwlibc
endif
ifdef TARGET_DIRS_WINCE
wince_all:
	$(MAKE) -C wince all
wince_debug:
	$(MAKE) -C wince debug
wince_smart:
	$(MAKE) -C wince smart
wince_release:
	$(MAKE) -C wince release
wince_units:
	$(MAKE) -C wince units
wince_examples:
	$(MAKE) -C wince examples
wince_shared:
	$(MAKE) -C wince shared
wince_install:
	$(MAKE) -C wince install
wince_sourceinstall:
	$(MAKE) -C wince sourceinstall
wince_exampleinstall:
	$(MAKE) -C wince exampleinstall
wince_distinstall:
	$(MAKE) -C wince distinstall
wince_zipinstall:
	$(MAKE) -C wince zipinstall
wince_zipsourceinstall:
	$(MAKE) -C wince zipsourceinstall
wince_zipexampleinstall:
	$(MAKE) -C wince zipexampleinstall
wince_zipdistinstall:
	$(MAKE) -C wince zipdistinstall
wince_clean:
	$(MAKE) -C wince clean
wince_distclean:
	$(MAKE) -C wince distclean
wince_cleanall:
	$(MAKE) -C wince cleanall
wince_info:
	$(MAKE) -C wince info
wince_makefiles:
	$(MAKE) -C wince makefiles
wince:
	$(MAKE) -C wince all
.PHONY: wince_all wince_debug wince_smart wince_release wince_units wince_examples wince_shared wince_install wince_sourceinstall wince_exampleinstall wince_distinstall wince_zipinstall wince_zipsourceinstall wince_zipexampleinstall wince_zipdistinstall wince_clean wince_distclean wince_cleanall wince_info wince_makefiles wince
endif
ifdef TARGET_DIRS_EMBEDDED
embedded_all:
	$(MAKE) -C embedded all
embedded_debug:
	$(MAKE) -C embedded debug
embedded_smart:
	$(MAKE) -C embedded smart
embedded_release:
	$(MAKE) -C embedded release
embedded_units:
	$(MAKE) -C embedded units
embedded_examples:
	$(MAKE) -C embedded examples
embedded_shared:
	$(MAKE) -C embedded shared
embedded_install:
	$(MAKE) -C embedded install
embedded_sourceinstall:
	$(MAKE) -C embedded sourceinstall
embedded_exampleinstall:
	$(MAKE) -C embedded exampleinstall
embedded_distinstall:
	$(MAKE) -C embedded distinstall
embedded_zipinstall:
	$(MAKE) -C embedded zipinstall
embedded_zipsourceinstall:
	$(MAKE) -C embedded zipsourceinstall
embedded_zipexampleinstall:
	$(MAKE) -C embedded zipexampleinstall
embedded_zipdistinstall:
	$(MAKE) -C embedded zipdistinstall
embedded_clean:
	$(MAKE) -C embedded clean
embedded_distclean:
	$(MAKE) -C embedded distclean
embedded_cleanall:
	$(MAKE) -C embedded cleanall
embedded_info:
	$(MAKE) -C embedded info
embedded_makefiles:
	$(MAKE) -C embedded makefiles
embedded:
	$(MAKE) -C embedded all
.PHONY: embedded_all embedded_debug embedded_smart embedded_release embedded_units embedded_examples embedded_shared embedded_install embedded_sourceinstall embedded_exampleinstall embedded_distinstall embedded_zipinstall embedded_zipsourceinstall embedded_zipexampleinstall embedded_zipdistinstall embedded_clean embedded_distclean embedded_cleanall embedded_info embedded_makefiles embedded
endif
ifdef TARGET_DIRS_SYMBIAN
symbian_all:
	$(MAKE) -C symbian all
symbian_debug:
	$(MAKE) -C symbian debug
symbian_smart:
	$(MAKE) -C symbian smart
symbian_release:
	$(MAKE) -C symbian release
symbian_units:
	$(MAKE) -C symbian units
symbian_examples:
	$(MAKE) -C symbian examples
symbian_shared:
	$(MAKE) -C symbian shared
symbian_install:
	$(MAKE) -C symbian install
symbian_sourceinstall:
	$(MAKE) -C symbian sourceinstall
symbian_exampleinstall:
	$(MAKE) -C symbian exampleinstall
symbian_distinstall:
	$(MAKE) -C symbian distinstall
symbian_zipinstall:
	$(MAKE) -C symbian zipinstall
symbian_zipsourceinstall:
	$(MAKE) -C symbian zipsourceinstall
symbian_zipexampleinstall:
	$(MAKE) -C symbian zipexampleinstall
symbian_zipdistinstall:
	$(MAKE) -C symbian zipdistinstall
symbian_clean:
	$(MAKE) -C symbian clean
symbian_distclean:
	$(MAKE) -C symbian distclean
symbian_cleanall:
	$(MAKE) -C symbian cleanall
symbian_info:
	$(MAKE) -C symbian info
symbian_makefiles:
	$(MAKE) -C symbian makefiles
symbian:
	$(MAKE) -C symbian all
.PHONY: symbian_all symbian_debug symbian_smart symbian_release symbian_units symbian_examples symbian_shared symbian_install symbian_sourceinstall symbian_exampleinstall symbian_distinstall symbian_zipinstall symbian_zipsourceinstall symbian_zipexampleinstall symbian_zipdistinstall symbian_clean symbian_distclean symbian_cleanall symbian_info symbian_makefiles symbian
endif
ifdef TARGET_DIRS_NATIVENT
nativent_all:
	$(MAKE) -C nativent all
nativent_debug:
	$(MAKE) -C nativent debug
nativent_smart:
	$(MAKE) -C nativent smart
nativent_release:
	$(MAKE) -C nativent release
nativent_units:
	$(MAKE) -C nativent units
nativent_examples:
	$(MAKE) -C nativent examples
nativent_shared:
	$(MAKE) -C nativent shared
nativent_install:
	$(MAKE) -C nativent install
nativent_sourceinstall:
	$(MAKE) -C nativent sourceinstall
nativent_exampleinstall:
	$(MAKE) -C nativent exampleinstall
nativent_distinstall:
	$(MAKE) -C nativent distinstall
nativent_zipinstall:
	$(MAKE) -C nativent zipinstall
nativent_zipsourceinstall:
	$(MAKE) -C nativent zipsourceinstall
nativent_zipexampleinstall:
	$(MAKE) -C nativent zipexampleinstall
nativent_zipdistinstall:
	$(MAKE) -C nativent zipdistinstall
nativent_clean:
	$(MAKE) -C nativent clean
nativent_distclean:
	$(MAKE) -C nativent distclean
nativent_cleanall:
	$(MAKE) -C nativent cleanall
nativent_info:
	$(MAKE) -C nativent info
nativent_makefiles:
	$(MAKE) -C nativent makefiles
nativent:
	$(MAKE) -C nativent all
.PHONY: nativent_all nativent_debug nativent_smart nativent_release nativent_units nativent_examples nativent_shared nativent_install nativent_sourceinstall nativent_exampleinstall nativent_distinstall nativent_zipinstall nativent_zipsourceinstall nativent_zipexampleinstall nativent_zipdistinstall nativent_clean nativent_distclean nativent_cleanall nativent_info nativent_makefiles nativent
endif
ifdef TARGET_DIRS_ANDROID
android_all:
	$(MAKE) -C android all
android_debug:
	$(MAKE) -C android debug
android_smart:
	$(MAKE) -C android smart
android_release:
	$(MAKE) -C android release
android_units:
	$(MAKE) -C android units
android_examples:
	$(MAKE) -C android examples
android_shared:
	$(MAKE) -C android shared
android_install:
	$(MAKE) -C android install
android_sourceinstall:
	$(MAKE) -C android sourceinstall
android_exampleinstall:
	$(MAKE) -C android exampleinstall
android_distinstall:
	$(MAKE) -C android distinstall
android_zipinstall:
	$(MAKE) -C android zipinstall
android_zipsourceinstall:
	$(MAKE) -C android zipsourceinstall
android_zipexampleinstall:
	$(MAKE) -C android zipexampleinstall
android_zipdistinstall:
	$(MAKE) -C android zipdistinstall
android_clean:
	$(MAKE) -C android clean
android_distclean:
	$(MAKE) -C android distclean
android_cleanall:
	$(MAKE) -C android cleanall
android_info:
	$(MAKE) -C android info
android_makefiles:
	$(MAKE) -C android makefiles
android:
	$(MAKE) -C android all
.PHONY: android_all android_debug android_smart android_release android_units android_examples android_shared android_install android_sourceinstall android_exampleinstall android_distinstall android_zipinstall android_zipsourceinstall android_zipexampleinstall android_zipdistinstall android_clean android_distclean android_cleanall android_info android_makefiles android
endif
ifdef TARGET_DIRS_AROS
aros_all:
	$(MAKE) -C aros all
aros_debug:
	$(MAKE) -C aros debug
aros_smart:
	$(MAKE) -C aros smart
aros_release:
	$(MAKE) -C aros release
aros_units:
	$(MAKE) -C aros units
aros_examples:
	$(MAKE) -C aros examples
aros_shared:
	$(MAKE) -C aros shared
aros_install:
	$(MAKE) -C aros install
aros_sourceinstall:
	$(MAKE) -C aros sourceinstall
aros_exampleinstall:
	$(MAKE) -C aros exampleinstall
aros_distinstall:
	$(MAKE) -C aros distinstall
aros_zipinstall:
	$(MAKE) -C aros zipinstall
aros_zipsourceinstall:
	$(MAKE) -C aros zipsourceinstall
aros_zipexampleinstall:
	$(MAKE) -C aros zipexampleinstall
aros_zipdistinstall:
	$(MAKE) -C aros zipdistinstall
aros_clean:
	$(MAKE) -C aros clean
aros_distclean:
	$(MAKE) -C aros distclean
aros_cleanall:
	$(MAKE) -C aros cleanall
aros_info:
	$(MAKE) -C aros info
aros_makefiles:
	$(MAKE) -C aros makefiles
aros:
	$(MAKE) -C aros all
.PHONY: aros_all aros_debug aros_smart aros_release aros_units aros_examples aros_shared aros_install aros_sourceinstall aros_exampleinstall aros_distinstall aros_zipinstall aros_zipsourceinstall aros_zipexampleinstall aros_zipdistinstall aros_clean aros_distclean aros_cleanall aros_info aros_makefiles aros
endif
ifdef TARGET_DIRS_AMIGA
amiga_all:
	$(MAKE) -C amiga all
amiga_debug:
	$(MAKE) -C amiga debug
amiga_smart:
	$(MAKE) -C amiga smart
amiga_release:
	$(MAKE) -C amiga release
amiga_units:
	$(MAKE) -C amiga units
amiga_examples:
	$(MAKE) -C amiga examples
amiga_shared:
	$(MAKE) -C amiga shared
amiga_install:
	$(MAKE) -C amiga install
amiga_sourceinstall:
	$(MAKE) -C amiga sourceinstall
amiga_exampleinstall:
	$(MAKE) -C amiga exampleinstall
amiga_distinstall:
	$(MAKE) -C amiga distinstall
amiga_zipinstall:
	$(MAKE) -C amiga zipinstall
amiga_zipsourceinstall:
	$(MAKE) -C amiga zipsourceinstall
amiga_zipexampleinstall:
	$(MAKE) -C amiga zipexampleinstall
amiga_zipdistinstall:
	$(MAKE) -C amiga zipdistinstall
amiga_clean:
	$(MAKE) -C amiga clean
amiga_distclean:
	$(MAKE) -C amiga distclean
amiga_cleanall:
	$(MAKE) -C amiga cleanall
amiga_info:
	$(MAKE) -C amiga info
amiga_makefiles:
	$(MAKE) -C amiga makefiles
amiga:
	$(MAKE) -C amiga all
.PHONY: amiga_all amiga_debug amiga_smart amiga_release amiga_units amiga_examples amiga_shared amiga_install amiga_sourceinstall amiga_exampleinstall amiga_distinstall amiga_zipinstall amiga_zipsourceinstall amiga_zipexampleinstall amiga_zipdistinstall amiga_clean amiga_distclean amiga_cleanall amiga_info amiga_makefiles amiga
endif
ifdef TARGET_DIRS_ATARI
atari_all:
	$(MAKE) -C atari all
atari_debug:
	$(MAKE) -C atari debug
atari_smart:
	$(MAKE) -C atari smart
atari_release:
	$(MAKE) -C atari release
atari_units:
	$(MAKE) -C atari units
atari_examples:
	$(MAKE) -C atari examples
atari_shared:
	$(MAKE) -C atari shared
atari_install:
	$(MAKE) -C atari install
atari_sourceinstall:
	$(MAKE) -C atari sourceinstall
atari_exampleinstall:
	$(MAKE) -C atari exampleinstall
atari_distinstall:
	$(MAKE) -C atari distinstall
atari_zipinstall:
	$(MAKE) -C atari zipinstall
atari_zipsourceinstall:
	$(MAKE) -C atari zipsourceinstall
atari_zipexampleinstall:
	$(MAKE) -C atari zipexampleinstall
atari_zipdistinstall:
	$(MAKE) -C atari zipdistinstall
atari_clean:
	$(MAKE) -C atari clean
atari_distclean:
	$(MAKE) -C atari distclean
atari_cleanall:
	$(MAKE) -C atari cleanall
atari_info:
	$(MAKE) -C atari info
atari_makefiles:
	$(MAKE) -C atari makefiles
atari:
	$(MAKE) -C atari all
.PHONY: atari_all atari_debug atari_smart atari_release atari_units atari_examples atari_shared atari_install atari_sourceinstall atari_exampleinstall atari_distinstall atari_zipinstall atari_zipsourceinstall atari_zipexampleinstall atari_zipdistinstall atari_clean atari_distclean atari_cleanall atari_info atari_makefiles atari
endif
ifdef TARGET_DIRS_PALMOS
palmos_all:
	$(MAKE) -C palmos all
palmos_debug:
	$(MAKE) -C palmos debug
palmos_smart:
	$(MAKE) -C palmos smart
palmos_release:
	$(MAKE) -C palmos release
palmos_units:
	$(MAKE) -C palmos units
palmos_examples:
	$(MAKE) -C palmos examples
palmos_shared:
	$(MAKE) -C palmos shared
palmos_install:
	$(MAKE) -C palmos install
palmos_sourceinstall:
	$(MAKE) -C palmos sourceinstall
palmos_exampleinstall:
	$(MAKE) -C palmos exampleinstall
palmos_distinstall:
	$(MAKE) -C palmos distinstall
palmos_zipinstall:
	$(MAKE) -C palmos zipinstall
palmos_zipsourceinstall:
	$(MAKE) -C palmos zipsourceinstall
palmos_zipexampleinstall:
	$(MAKE) -C palmos zipexampleinstall
palmos_zipdistinstall:
	$(MAKE) -C palmos zipdistinstall
palmos_clean:
	$(MAKE) -C palmos clean
palmos_distclean:
	$(MAKE) -C palmos distclean
palmos_cleanall:
	$(MAKE) -C palmos cleanall
palmos_info:
	$(MAKE) -C palmos info
palmos_makefiles:
	$(MAKE) -C palmos makefiles
palmos:
	$(MAKE) -C palmos all
.PHONY: palmos_all palmos_debug palmos_smart palmos_release palmos_units palmos_examples palmos_shared palmos_install palmos_sourceinstall palmos_exampleinstall palmos_distinstall palmos_zipinstall palmos_zipsourceinstall palmos_zipexampleinstall palmos_zipdistinstall palmos_clean palmos_distclean palmos_cleanall palmos_info palmos_makefiles palmos
endif
ifdef TARGET_DIRS_MACOS
macos_all:
	$(MAKE) -C macos all
macos_debug:
	$(MAKE) -C macos debug
macos_smart:
	$(MAKE) -C macos smart
macos_release:
	$(MAKE) -C macos release
macos_units:
	$(MAKE) -C macos units
macos_examples:
	$(MAKE) -C macos examples
macos_shared:
	$(MAKE) -C macos shared
macos_install:
	$(MAKE) -C macos install
macos_sourceinstall:
	$(MAKE) -C macos sourceinstall
macos_exampleinstall:
	$(MAKE) -C macos exampleinstall
macos_distinstall:
	$(MAKE) -C macos distinstall
macos_zipinstall:
	$(MAKE) -C macos zipinstall
macos_zipsourceinstall:
	$(MAKE) -C macos zipsourceinstall
macos_zipexampleinstall:
	$(MAKE) -C macos zipexampleinstall
macos_zipdistinstall:
	$(MAKE) -C macos zipdistinstall
macos_clean:
	$(MAKE) -C macos clean
macos_distclean:
	$(MAKE) -C macos distclean
macos_cleanall:
	$(MAKE) -C macos cleanall
macos_info:
	$(MAKE) -C macos info
macos_makefiles:
	$(MAKE) -C macos makefiles
macos:
	$(MAKE) -C macos all
.PHONY: macos_all macos_debug macos_smart macos_release macos_units macos_examples macos_shared macos_install macos_sourceinstall macos_exampleinstall macos_distinstall macos_zipinstall macos_zipsourceinstall macos_zipexampleinstall macos_zipdistinstall macos_clean macos_distclean macos_cleanall macos_info macos_makefiles macos
endif
ifdef TARGET_DIRS_MORPHOS
morphos_all:
	$(MAKE) -C morphos all
morphos_debug:
	$(MAKE) -C morphos debug
morphos_smart:
	$(MAKE) -C morphos smart
morphos_release:
	$(MAKE) -C morphos release
morphos_units:
	$(MAKE) -C morphos units
morphos_examples:
	$(MAKE) -C morphos examples
morphos_shared:
	$(MAKE) -C morphos shared
morphos_install:
	$(MAKE) -C morphos install
morphos_sourceinstall:
	$(MAKE) -C morphos sourceinstall
morphos_exampleinstall:
	$(MAKE) -C morphos exampleinstall
morphos_distinstall:
	$(MAKE) -C morphos distinstall
morphos_zipinstall:
	$(MAKE) -C morphos zipinstall
morphos_zipsourceinstall:
	$(MAKE) -C morphos zipsourceinstall
morphos_zipexampleinstall:
	$(MAKE) -C morphos zipexampleinstall
morphos_zipdistinstall:
	$(MAKE) -C morphos zipdistinstall
morphos_clean:
	$(MAKE) -C morphos clean
morphos_distclean:
	$(MAKE) -C morphos distclean
morphos_cleanall:
	$(MAKE) -C morphos cleanall
morphos_info:
	$(MAKE) -C morphos info
morphos_makefiles:
	$(MAKE) -C morphos makefiles
morphos:
	$(MAKE) -C morphos all
.PHONY: morphos_all morphos_debug morphos_smart morphos_release morphos_units morphos_examples morphos_shared morphos_install morphos_sourceinstall morphos_exampleinstall morphos_distinstall morphos_zipinstall morphos_zipsourceinstall morphos_zipexampleinstall morphos_zipdistinstall morphos_clean morphos_distclean morphos_cleanall morphos_info morphos_makefiles morphos
endif
ifdef TARGET_DIRS_WII
wii_all:
	$(MAKE) -C wii all
wii_debug:
	$(MAKE) -C wii debug
wii_smart:
	$(MAKE) -C wii smart
wii_release:
	$(MAKE) -C wii release
wii_units:
	$(MAKE) -C wii units
wii_examples:
	$(MAKE) -C wii examples
wii_shared:
	$(MAKE) -C wii shared
wii_install:
	$(MAKE) -C wii install
wii_sourceinstall:
	$(MAKE) -C wii sourceinstall
wii_exampleinstall:
	$(MAKE) -C wii exampleinstall
wii_distinstall:
	$(MAKE) -C wii distinstall
wii_zipinstall:
	$(MAKE) -C wii zipinstall
wii_zipsourceinstall:
	$(MAKE) -C wii zipsourceinstall
wii_zipexampleinstall:
	$(MAKE) -C wii zipexampleinstall
wii_zipdistinstall:
	$(MAKE) -C wii zipdistinstall
wii_clean:
	$(MAKE) -C wii clean
wii_distclean:
	$(MAKE) -C wii distclean
wii_cleanall:
	$(MAKE) -C wii cleanall
wii_info:
	$(MAKE) -C wii info
wii_makefiles:
	$(MAKE) -C wii makefiles
wii:
	$(MAKE) -C wii all
.PHONY: wii_all wii_debug wii_smart wii_release wii_units wii_examples wii_shared wii_install wii_sourceinstall wii_exampleinstall wii_distinstall wii_zipinstall wii_zipsourceinstall wii_zipexampleinstall wii_zipdistinstall wii_clean wii_distclean wii_cleanall wii_info wii_makefiles wii
endif
ifdef TARGET_DIRS_AIX
aix_all:
	$(MAKE) -C aix all
aix_debug:
	$(MAKE) -C aix debug
aix_smart:
	$(MAKE) -C aix smart
aix_release:
	$(MAKE) -C aix release
aix_units:
	$(MAKE) -C aix units
aix_examples:
	$(MAKE) -C aix examples
aix_shared:
	$(MAKE) -C aix shared
aix_install:
	$(MAKE) -C aix install
aix_sourceinstall:
	$(MAKE) -C aix sourceinstall
aix_exampleinstall:
	$(MAKE) -C aix exampleinstall
aix_distinstall:
	$(MAKE) -C aix distinstall
aix_zipinstall:
	$(MAKE) -C aix zipinstall
aix_zipsourceinstall:
	$(MAKE) -C aix zipsourceinstall
aix_zipexampleinstall:
	$(MAKE) -C aix zipexampleinstall
aix_zipdistinstall:
	$(MAKE) -C aix zipdistinstall
aix_clean:
	$(MAKE) -C aix clean
aix_distclean:
	$(MAKE) -C aix distclean
aix_cleanall:
	$(MAKE) -C aix cleanall
aix_info:
	$(MAKE) -C aix info
aix_makefiles:
	$(MAKE) -C aix makefiles
aix:
	$(MAKE) -C aix all
.PHONY: aix_all aix_debug aix_smart aix_release aix_units aix_examples aix_shared aix_install aix_sourceinstall aix_exampleinstall aix_distinstall aix_zipinstall aix_zipsourceinstall aix_zipexampleinstall aix_zipdistinstall aix_clean aix_distclean aix_cleanall aix_info aix_makefiles aix
endif
ifdef TARGET_DIRS_WIN64
win64_all:
	$(MAKE) -C win64 all
win64_debug:
	$(MAKE) -C win64 debug
win64_smart:
	$(MAKE) -C win64 smart
win64_release:
	$(MAKE) -C win64 release
win64_units:
	$(MAKE) -C win64 units
win64_examples:
	$(MAKE) -C win64 examples
win64_shared:
	$(MAKE) -C win64 shared
win64_install:
	$(MAKE) -C win64 install
win64_sourceinstall:
	$(MAKE) -C win64 sourceinstall
win64_exampleinstall:
	$(MAKE) -C win64 exampleinstall
win64_distinstall:
	$(MAKE) -C win64 distinstall
win64_zipinstall:
	$(MAKE) -C win64 zipinstall
win64_zipsourceinstall:
	$(MAKE) -C win64 zipsourceinstall
win64_zipexampleinstall:
	$(MAKE) -C win64 zipexampleinstall
win64_zipdistinstall:
	$(MAKE) -C win64 zipdistinstall
win64_clean:
	$(MAKE) -C win64 clean
win64_distclean:
	$(MAKE) -C win64 distclean
win64_cleanall:
	$(MAKE) -C win64 cleanall
win64_info:
	$(MAKE) -C win64 info
win64_makefiles:
	$(MAKE) -C win64 makefiles
win64:
	$(MAKE) -C win64 all
.PHONY: win64_all win64_debug win64_smart win64_release win64_units win64_examples win64_shared win64_install win64_sourceinstall win64_exampleinstall win64_distinstall win64_zipinstall win64_zipsourceinstall win64_zipexampleinstall win64_zipdistinstall win64_clean win64_distclean win64_cleanall win64_info win64_makefiles win64
endif
ifdef TARGET_DIRS_DRAGONFLY
dragonfly_all:
	$(MAKE) -C dragonfly all
dragonfly_debug:
	$(MAKE) -C dragonfly debug
dragonfly_smart:
	$(MAKE) -C dragonfly smart
dragonfly_release:
	$(MAKE) -C dragonfly release
dragonfly_units:
	$(MAKE) -C dragonfly units
dragonfly_examples:
	$(MAKE) -C dragonfly examples
dragonfly_shared:
	$(MAKE) -C dragonfly shared
dragonfly_install:
	$(MAKE) -C dragonfly install
dragonfly_sourceinstall:
	$(MAKE) -C dragonfly sourceinstall
dragonfly_exampleinstall:
	$(MAKE) -C dragonfly exampleinstall
dragonfly_distinstall:
	$(MAKE) -C dragonfly distinstall
dragonfly_zipinstall:
	$(MAKE) -C dragonfly zipinstall
dragonfly_zipsourceinstall:
	$(MAKE) -C dragonfly zipsourceinstall
dragonfly_zipexampleinstall:
	$(MAKE) -C dragonfly zipexampleinstall
dragonfly_zipdistinstall:
	$(MAKE) -C dragonfly zipdistinstall
dragonfly_clean:
	$(MAKE) -C dragonfly clean
dragonfly_distclean:
	$(MAKE) -C dragonfly distclean
dragonfly_cleanall:
	$(MAKE) -C dragonfly cleanall
dragonfly_info:
	$(MAKE) -C dragonfly info
dragonfly_makefiles:
	$(MAKE) -C dragonfly makefiles
dragonfly:
	$(MAKE) -C dragonfly all
.PHONY: dragonfly_all dragonfly_debug dragonfly_smart dragonfly_release dragonfly_units dragonfly_examples dragonfly_shared dragonfly_install dragonfly_sourceinstall dragonfly_exampleinstall dragonfly_distinstall dragonfly_zipinstall dragonfly_zipsourceinstall dragonfly_zipexampleinstall dragonfly_zipdistinstall dragonfly_clean dragonfly_distclean dragonfly_cleanall dragonfly_info dragonfly_makefiles dragonfly
endif
ifdef TARGET_DIRS_GBA
gba_all:
	$(MAKE) -C gba all
gba_debug:
	$(MAKE) -C gba debug
gba_smart:
	$(MAKE) -C gba smart
gba_release:
	$(MAKE) -C gba release
gba_units:
	$(MAKE) -C gba units
gba_examples:
	$(MAKE) -C gba examples
gba_shared:
	$(MAKE) -C gba shared
gba_install:
	$(MAKE) -C gba install
gba_sourceinstall:
	$(MAKE) -C gba sourceinstall
gba_exampleinstall:
	$(MAKE) -C gba exampleinstall
gba_distinstall:
	$(MAKE) -C gba distinstall
gba_zipinstall:
	$(MAKE) -C gba zipinstall
gba_zipsourceinstall:
	$(MAKE) -C gba zipsourceinstall
gba_zipexampleinstall:
	$(MAKE) -C gba zipexampleinstall
gba_zipdistinstall:
	$(MAKE) -C gba zipdistinstall
gba_clean:
	$(MAKE) -C gba clean
gba_distclean:
	$(MAKE) -C gba distclean
gba_cleanall:
	$(MAKE) -C gba cleanall
gba_info:
	$(MAKE) -C gba info
gba_makefiles:
	$(MAKE) -C gba makefiles
gba:
	$(MAKE) -C gba all
.PHONY: gba_all gba_debug gba_smart gba_release gba_units gba_examples gba_shared gba_install gba_sourceinstall gba_exampleinstall gba_distinstall gba_zipinstall gba_zipsourceinstall gba_zipexampleinstall gba_zipdistinstall gba_clean gba_distclean gba_cleanall gba_info gba_makefiles gba
endif
ifdef TARGET_DIRS_NDS
nds_all:
	$(MAKE) -C nds all
nds_debug:
	$(MAKE) -C nds debug
nds_smart:
	$(MAKE) -C nds smart
nds_release:
	$(MAKE) -C nds release
nds_units:
	$(MAKE) -C nds units
nds_examples:
	$(MAKE) -C nds examples
nds_shared:
	$(MAKE) -C nds shared
nds_install:
	$(MAKE) -C nds install
nds_sourceinstall:
	$(MAKE) -C nds sourceinstall
nds_exampleinstall:
	$(MAKE) -C nds exampleinstall
nds_distinstall:
	$(MAKE) -C nds distinstall
nds_zipinstall:
	$(MAKE) -C nds zipinstall
nds_zipsourceinstall:
	$(MAKE) -C nds zipsourceinstall
nds_zipexampleinstall:
	$(MAKE) -C nds zipexampleinstall
nds_zipdistinstall:
	$(MAKE) -C nds zipdistinstall
nds_clean:
	$(MAKE) -C nds clean
nds_distclean:
	$(MAKE) -C nds distclean
nds_cleanall:
	$(MAKE) -C nds cleanall
nds_info:
	$(MAKE) -C nds info
nds_makefiles:
	$(MAKE) -C nds makefiles
nds:
	$(MAKE) -C nds all
.PHONY: nds_all nds_debug nds_smart nds_release nds_units nds_examples nds_shared nds_install nds_sourceinstall nds_exampleinstall nds_distinstall nds_zipinstall nds_zipsourceinstall nds_zipexampleinstall nds_zipdistinstall nds_clean nds_distclean nds_cleanall nds_info nds_makefiles nds
endif
ifdef TARGET_DIRS_JAVA
java_all:
	$(MAKE) -C java all
java_debug:
	$(MAKE) -C java debug
java_smart:
	$(MAKE) -C java smart
java_release:
	$(MAKE) -C java release
java_units:
	$(MAKE) -C java units
java_examples:
	$(MAKE) -C java examples
java_shared:
	$(MAKE) -C java shared
java_install:
	$(MAKE) -C java install
java_sourceinstall:
	$(MAKE) -C java sourceinstall
java_exampleinstall:
	$(MAKE) -C java exampleinstall
java_distinstall:
	$(MAKE) -C java distinstall
java_zipinstall:
	$(MAKE) -C java zipinstall
java_zipsourceinstall:
	$(MAKE) -C java zipsourceinstall
java_zipexampleinstall:
	$(MAKE) -C java zipexampleinstall
java_zipdistinstall:
	$(MAKE) -C java zipdistinstall
java_clean:
	$(MAKE) -C java clean
java_distclean:
	$(MAKE) -C java distclean
java_cleanall:
	$(MAKE) -C java cleanall
java_info:
	$(MAKE) -C java info
java_makefiles:
	$(MAKE) -C java makefiles
java:
	$(MAKE) -C java all
.PHONY: java_all java_debug java_smart java_release java_units java_examples java_shared java_install java_sourceinstall java_exampleinstall java_distinstall java_zipinstall java_zipsourceinstall java_zipexampleinstall java_zipdistinstall java_clean java_distclean java_cleanall java_info java_makefiles java
endif
ifdef TARGET_DIRS_ANDROID/JVM
android/jvm_all:
	$(MAKE) -C android/jvm all
android/jvm_debug:
	$(MAKE) -C android/jvm debug
android/jvm_smart:
	$(MAKE) -C android/jvm smart
android/jvm_release:
	$(MAKE) -C android/jvm release
android/jvm_units:
	$(MAKE) -C android/jvm units
android/jvm_examples:
	$(MAKE) -C android/jvm examples
android/jvm_shared:
	$(MAKE) -C android/jvm shared
android/jvm_install:
	$(MAKE) -C android/jvm install
android/jvm_sourceinstall:
	$(MAKE) -C android/jvm sourceinstall
android/jvm_exampleinstall:
	$(MAKE) -C android/jvm exampleinstall
android/jvm_distinstall:
	$(MAKE) -C android/jvm distinstall
android/jvm_zipinstall:
	$(MAKE) -C android/jvm zipinstall
android/jvm_zipsourceinstall:
	$(MAKE) -C android/jvm zipsourceinstall
android/jvm_zipexampleinstall:
	$(MAKE) -C android/jvm zipexampleinstall
android/jvm_zipdistinstall:
	$(MAKE) -C android/jvm zipdistinstall
android/jvm_clean:
	$(MAKE) -C android/jvm clean
android/jvm_distclean:
	$(MAKE) -C android/jvm distclean
android/jvm_cleanall:
	$(MAKE) -C android/jvm cleanall
android/jvm_info:
	$(MAKE) -C android/jvm info
android/jvm_makefiles:
	$(MAKE) -C android/jvm makefiles
android/jvm:
	$(MAKE) -C android/jvm all
.PHONY: android/jvm_all android/jvm_debug android/jvm_smart android/jvm_release android/jvm_units android/jvm_examples android/jvm_shared android/jvm_install android/jvm_sourceinstall android/jvm_exampleinstall android/jvm_distinstall android/jvm_zipinstall android/jvm_zipsourceinstall android/jvm_zipexampleinstall android/jvm_zipdistinstall android/jvm_clean android/jvm_distclean android/jvm_cleanall android/jvm_info android/jvm_makefiles android/jvm
endif
ifdef TARGET_DIRS_MSDOS
msdos_all:
	$(MAKE) -C msdos all
msdos_debug:
	$(MAKE) -C msdos debug
msdos_smart:
	$(MAKE) -C msdos smart
msdos_release:
	$(MAKE) -C msdos release
msdos_units:
	$(MAKE) -C msdos units
msdos_examples:
	$(MAKE) -C msdos examples
msdos_shared:
	$(MAKE) -C msdos shared
msdos_install:
	$(MAKE) -C msdos install
msdos_sourceinstall:
	$(MAKE) -C msdos sourceinstall
msdos_exampleinstall:
	$(MAKE) -C msdos exampleinstall
msdos_distinstall:
	$(MAKE) -C msdos distinstall
msdos_zipinstall:
	$(MAKE) -C msdos zipinstall
msdos_zipsourceinstall:
	$(MAKE) -C msdos zipsourceinstall
msdos_zipexampleinstall:
	$(MAKE) -C msdos zipexampleinstall
msdos_zipdistinstall:
	$(MAKE) -C msdos zipdistinstall
msdos_clean:
	$(MAKE) -C msdos clean
msdos_distclean:
	$(MAKE) -C msdos distclean
msdos_cleanall:
	$(MAKE) -C msdos cleanall
msdos_info:
	$(MAKE) -C msdos info
msdos_makefiles:
	$(MAKE) -C msdos makefiles
msdos:
	$(MAKE) -C msdos all
.PHONY: msdos_all msdos_debug msdos_smart msdos_release msdos_units msdos_examples msdos_shared msdos_install msdos_sourceinstall msdos_exampleinstall msdos_distinstall msdos_zipinstall msdos_zipsourceinstall msdos_zipexampleinstall msdos_zipdistinstall msdos_clean msdos_distclean msdos_cleanall msdos_info msdos_makefiles msdos
endif
ifdef TARGET_DIRS_WIN16
win16_all:
	$(MAKE) -C win16 all
win16_debug:
	$(MAKE) -C win16 debug
win16_smart:
	$(MAKE) -C win16 smart
win16_release:
	$(MAKE) -C win16 release
win16_units:
	$(MAKE) -C win16 units
win16_examples:
	$(MAKE) -C win16 examples
win16_shared:
	$(MAKE) -C win16 shared
win16_install:
	$(MAKE) -C win16 install
win16_sourceinstall:
	$(MAKE) -C win16 sourceinstall
win16_exampleinstall:
	$(MAKE) -C win16 exampleinstall
win16_distinstall:
	$(MAKE) -C win16 distinstall
win16_zipinstall:
	$(MAKE) -C win16 zipinstall
win16_zipsourceinstall:
	$(MAKE) -C win16 zipsourceinstall
win16_zipexampleinstall:
	$(MAKE) -C win16 zipexampleinstall
win16_zipdistinstall:
	$(MAKE) -C win16 zipdistinstall
win16_clean:
	$(MAKE) -C win16 clean
win16_distclean:
	$(MAKE) -C win16 distclean
win16_cleanall:
	$(MAKE) -C win16 cleanall
win16_info:
	$(MAKE) -C win16 info
win16_makefiles:
	$(MAKE) -C win16 makefiles
win16:
	$(MAKE) -C win16 all
.PHONY: win16_all win16_debug win16_smart win16_release win16_units win16_examples win16_shared win16_install win16_sourceinstall win16_exampleinstall win16_distinstall win16_zipinstall win16_zipsourceinstall win16_zipexampleinstall win16_zipdistinstall win16_clean win16_distclean win16_cleanall win16_info win16_makefiles win16
endif
all: $(addsuffix _all,$(TARGET_DIRS))
debug: $(addsuffix _debug,$(TARGET_DIRS))
smart: $(addsuffix _smart,$(TARGET_DIRS))
release: $(addsuffix _release,$(TARGET_DIRS))
units: $(addsuffix _units,$(TARGET_DIRS))
examples: $(addsuffix _examples,$(TARGET_DIRS))
shared: $(addsuffix _shared,$(TARGET_DIRS))
install: fpc_install $(addsuffix _install,$(TARGET_DIRS))
sourceinstall: fpc_sourceinstall
exampleinstall: fpc_exampleinstall $(addsuffix _exampleinstall,$(TARGET_DIRS))
distinstall: fpc_distinstall
zipinstall: fpc_zipinstall
zipsourceinstall: fpc_zipsourceinstall
zipexampleinstall: fpc_zipexampleinstall $(addsuffix _zipexampleinstall,$(TARGET_DIRS))
zipdistinstall: fpc_zipdistinstall
clean: fpc_clean $(addsuffix _clean,$(TARGET_DIRS))
distclean: fpc_distclean $(addsuffix _distclean,$(TARGET_DIRS))
cleanall: fpc_cleanall $(addsuffix _cleanall,$(TARGET_DIRS))
info: fpc_info
makefiles: fpc_makefiles
.PHONY: all debug smart release units examples shared install sourceinstall exampleinstall distinstall zipinstall zipsourceinstall zipexampleinstall zipdistinstall clean distclean cleanall info makefiles
ifneq ($(wildcard fpcmake.loc),)
include fpcmake.loc
endif
.NOTPARALLEL:
