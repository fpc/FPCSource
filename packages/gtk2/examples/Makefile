#
# Don't edit, this file is generated by FPCMake Version 2.0.0
#
default: all
MAKEFILETARGETS=i386-linux i386-go32v2 i386-win32 i386-os2 i386-freebsd i386-beos i386-haiku i386-netbsd i386-solaris i386-netware i386-openbsd i386-wdosx i386-darwin i386-emx i386-watcom i386-netwlibc i386-wince i386-embedded i386-symbian i386-nativent i386-iphonesim i386-android i386-aros m68k-linux m68k-netbsd m68k-amiga m68k-atari m68k-palmos m68k-macosclassic m68k-embedded powerpc-linux powerpc-netbsd powerpc-amiga powerpc-macosclassic powerpc-darwin powerpc-morphos powerpc-embedded powerpc-wii powerpc-aix sparc-linux sparc-netbsd sparc-solaris sparc-embedded x86_64-linux x86_64-freebsd x86_64-haiku x86_64-netbsd x86_64-solaris x86_64-openbsd x86_64-darwin x86_64-win64 x86_64-embedded x86_64-iphonesim x86_64-android x86_64-aros x86_64-dragonfly arm-linux arm-netbsd arm-palmos arm-wince arm-gba arm-nds arm-embedded arm-symbian arm-android arm-aros arm-ios powerpc64-linux powerpc64-darwin powerpc64-embedded powerpc64-aix avr-embedded armeb-linux armeb-embedded mips-linux mipsel-linux mipsel-embedded mipsel-android jvm-java jvm-android i8086-embedded i8086-msdos i8086-win16 aarch64-linux aarch64-darwin aarch64-android aarch64-ios wasm-wasm sparc64-linux
BSDs = freebsd netbsd openbsd darwin dragonfly
UNIXs = linux $(BSDs) solaris qnx haiku aix
LIMIT83fs = go32v2 os2 emx watcom msdos win16 atari
OSNeedsComspecToRunBatch = go32v2 watcom
FORCE:
.PHONY: FORCE
override PATH:=$(patsubst %/,%,$(subst \,/,$(PATH)))
ifneq ($(findstring darwin,$(OSTYPE)),)
inUnix=1 #darwin
SEARCHPATH:=$(filter-out .,$(subst :, ,$(PATH)))
else
ifeq ($(findstring ;,$(PATH)),)
inUnix=1
SEARCHPATH:=$(filter-out .,$(subst :, ,$(PATH)))
else
SEARCHPATH:=$(subst ;, ,$(PATH))
endif
endif
SEARCHPATH+=$(patsubst %/,%,$(subst \,/,$(dir $(MAKE))))
PWD:=$(strip $(wildcard $(addsuffix /pwd.exe,$(SEARCHPATH))))
ifeq ($(PWD),)
PWD:=$(strip $(wildcard $(addsuffix /pwd,$(SEARCHPATH))))
ifeq ($(PWD),)
$(error You need the GNU utils package to use this Makefile)
else
PWD:=$(firstword $(PWD))
SRCEXEEXT=
endif
else
PWD:=$(firstword $(PWD))
SRCEXEEXT=.exe
endif
ifndef inUnix
ifeq ($(OS),Windows_NT)
inWinNT=1
else
ifdef OS2_SHELL
inOS2=1
endif
endif
else
ifneq ($(findstring cygdrive,$(PATH)),)
inCygWin=1
endif
endif
ifdef inUnix
SRCBATCHEXT=.sh
else
ifdef inOS2
SRCBATCHEXT=.cmd
else
SRCBATCHEXT=.bat
endif
endif
ifdef COMSPEC
ifneq ($(findstring $(OS_SOURCE),$(OSNeedsComspecToRunBatch)),)
ifndef RUNBATCH
RUNBATCH=$(COMSPEC) /C
endif
endif
endif
ifdef inUnix
PATHSEP=/
else
PATHSEP:=$(subst /,\,/)
ifdef inCygWin
PATHSEP=/
endif
endif
ifdef PWD
BASEDIR:=$(subst \,/,$(shell $(PWD)))
ifdef inCygWin
ifneq ($(findstring /cygdrive/,$(BASEDIR)),)
BASENODIR:=$(patsubst /cygdrive%,%,$(BASEDIR))
BASEDRIVE:=$(firstword $(subst /, ,$(BASENODIR)))
BASEDIR:=$(subst /cygdrive/$(BASEDRIVE)/,$(BASEDRIVE):/,$(BASEDIR))
endif
endif
else
BASEDIR=.
endif
ifdef inOS2
ifndef ECHO
ECHO:=$(strip $(wildcard $(addsuffix /gecho$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO:=$(strip $(wildcard $(addsuffix /echo$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO=echo
else
ECHO:=$(firstword $(ECHO))
endif
else
ECHO:=$(firstword $(ECHO))
endif
endif
export ECHO
endif
override DEFAULT_FPCDIR=../../..
ifndef FPC
ifdef PP
FPC=$(PP)
endif
endif
ifndef FPC
FPCPROG:=$(strip $(wildcard $(addsuffix /fpc$(SRCEXEEXT),$(SEARCHPATH))))
ifneq ($(FPCPROG),)
FPCPROG:=$(firstword $(FPCPROG))
ifneq ($(CPU_TARGET),)
FPC:=$(shell $(FPCPROG) -P$(CPU_TARGET) -PB)
else
FPC:=$(shell $(FPCPROG) -PB)
endif
ifneq ($(findstring Error,$(FPC)),)
override FPC=$(firstword $(strip $(wildcard $(addsuffix /ppc386$(SRCEXEEXT),$(SEARCHPATH)))))
else
ifeq ($(strip $(wildcard $(FPC))),)
FPC:=$(firstword $(FPCPROG))
endif
endif
else
override FPC=$(firstword $(strip $(wildcard $(addsuffix /ppc386$(SRCEXEEXT),$(SEARCHPATH)))))
endif
endif
override FPC:=$(subst $(SRCEXEEXT),,$(FPC))
override FPC:=$(subst \,/,$(FPC))$(SRCEXEEXT)
FOUNDFPC:=$(strip $(wildcard $(FPC)))
ifeq ($(FOUNDFPC),)
FOUNDFPC=$(strip $(wildcard $(addsuffix /$(FPC),$(SEARCHPATH))))
ifeq ($(FOUNDFPC),)
$(error Compiler $(FPC) not found)
endif
endif
ifndef FPC_COMPILERINFO
FPC_COMPILERINFO:=$(shell $(FPC) -iVSPTPSOTO)
endif
ifndef FPC_VERSION
FPC_VERSION:=$(word 1,$(FPC_COMPILERINFO))
endif
export FPC FPC_VERSION FPC_COMPILERINFO
unexport CHECKDEPEND ALLDEPENDENCIES
ifndef CPU_TARGET
ifdef CPU_TARGET_DEFAULT
CPU_TARGET=$(CPU_TARGET_DEFAULT)
endif
endif
ifndef OS_TARGET
ifdef OS_TARGET_DEFAULT
OS_TARGET=$(OS_TARGET_DEFAULT)
endif
endif
ifndef CPU_SOURCE
CPU_SOURCE:=$(word 2,$(FPC_COMPILERINFO))
endif
ifndef CPU_TARGET
CPU_TARGET:=$(word 3,$(FPC_COMPILERINFO))
endif
ifndef OS_SOURCE
OS_SOURCE:=$(word 4,$(FPC_COMPILERINFO))
endif
ifndef OS_TARGET
OS_TARGET:=$(word 5,$(FPC_COMPILERINFO))
endif
FULL_TARGET=$(CPU_TARGET)-$(OS_TARGET)
FULL_SOURCE=$(CPU_SOURCE)-$(OS_SOURCE)
ifeq ($(CPU_TARGET),armeb)
ARCH=arm
override FPCOPT+=-Cb
else
ifeq ($(CPU_TARGET),armel)
ARCH=arm
override FPCOPT+=-CaEABI
else
ARCH=$(CPU_TARGET)
endif
endif
ifeq ($(FULL_TARGET),arm-embedded)
ifeq ($(SUBARCH),)
$(error When compiling for arm-embedded, a sub-architecture (e.g. SUBARCH=armv4t or SUBARCH=armv7m) must be defined)
endif
override FPCOPT+=-Cp$(SUBARCH)
endif
ifeq ($(FULL_TARGET),avr-embedded)
ifeq ($(SUBARCH),)
$(error When compiling for avr-embedded, a sub-architecture (e.g. SUBARCH=avr25 or SUBARCH=avr35) must be defined)
endif
override FPCOPT+=-Cp$(SUBARCH)
endif
ifeq ($(FULL_TARGET),mipsel-embedded)
ifeq ($(SUBARCH),)
$(error When compiling for mipsel-embedded, a sub-architecture (e.g. SUBARCH=pic32mx) must be defined)
endif
override FPCOPT+=-Cp$(SUBARCH)
endif
ifneq ($(findstring $(OS_SOURCE),$(LIMIT83fs)),)
TARGETSUFFIX=$(OS_TARGET)
SOURCESUFFIX=$(OS_SOURCE)
else
ifneq ($(findstring $(OS_TARGET),$(LIMIT83fs)),)
TARGETSUFFIX=$(OS_TARGET)
else
TARGETSUFFIX=$(FULL_TARGET)
endif
SOURCESUFFIX=$(FULL_SOURCE)
endif
ifneq ($(FULL_TARGET),$(FULL_SOURCE))
CROSSCOMPILE=1
endif
ifeq ($(findstring makefile,$(MAKECMDGOALS)),)
ifeq ($(findstring $(FULL_TARGET),$(MAKEFILETARGETS)),)
$(error The Makefile doesn't support target $(FULL_TARGET), please run fpcmake first)
endif
endif
ifneq ($(findstring $(OS_TARGET),$(BSDs)),)
BSDhier=1
endif
ifeq ($(OS_TARGET),linux)
linuxHier=1
endif
ifndef CROSSCOMPILE
BUILDFULLNATIVE=1
export BUILDFULLNATIVE
endif
ifdef BUILDFULLNATIVE
BUILDNATIVE=1
export BUILDNATIVE
endif
export OS_TARGET OS_SOURCE ARCH CPU_TARGET CPU_SOURCE FULL_TARGET FULL_SOURCE TARGETSUFFIX SOURCESUFFIX CROSSCOMPILE
ifdef FPCDIR
override FPCDIR:=$(subst \,/,$(FPCDIR))
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl)),)
override FPCDIR=wrong
endif
else
override FPCDIR=wrong
endif
ifdef DEFAULT_FPCDIR
ifeq ($(FPCDIR),wrong)
override FPCDIR:=$(subst \,/,$(DEFAULT_FPCDIR))
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl)),)
override FPCDIR=wrong
endif
endif
endif
ifeq ($(FPCDIR),wrong)
ifdef inUnix
override FPCDIR=/usr/local/lib/fpc/$(FPC_VERSION)
ifeq ($(wildcard $(FPCDIR)/units),)
override FPCDIR=/usr/lib/fpc/$(FPC_VERSION)
endif
else
override FPCDIR:=$(subst /$(FPC),,$(firstword $(strip $(wildcard $(addsuffix /$(FPC),$(SEARCHPATH))))))
override FPCDIR:=$(FPCDIR)/..
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl)),)
override FPCDIR:=$(FPCDIR)/..
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl)),)
override FPCDIR:=$(BASEDIR)
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl)),)
override FPCDIR=c:/pp
endif
endif
endif
endif
endif
ifndef CROSSBINDIR
CROSSBINDIR:=$(wildcard $(FPCDIR)/bin/$(TARGETSUFFIX))
endif
ifneq ($(findstring $(OS_TARGET),darwin iphonesim ios),)
ifneq ($(findstring $(OS_SOURCE),darwin ios),)
DARWIN2DARWIN=1
endif
endif
ifndef BINUTILSPREFIX
ifndef CROSSBINDIR
ifdef CROSSCOMPILE
ifneq ($(OS_TARGET),msdos)
ifndef DARWIN2DARWIN
ifneq ($(CPU_TARGET),jvm)
BINUTILSPREFIX=$(CPU_TARGET)-$(OS_TARGET)-
ifeq ($(OS_TARGET),android)
ifeq ($(CPU_TARGET),arm)
BINUTILSPREFIX=arm-linux-androideabi-
else
ifeq ($(CPU_TARGET),i386)
BINUTILSPREFIX=i686-linux-android-
else
BINUTILSPREFIX=$(CPU_TARGET)-linux-android-
endif
endif
endif
endif
endif
else
BINUTILSPREFIX=$(OS_TARGET)-
endif
endif
endif
endif
UNITSDIR:=$(wildcard $(FPCDIR)/units/$(TARGETSUFFIX))
ifeq ($(UNITSDIR),)
UNITSDIR:=$(wildcard $(FPCDIR)/units/$(OS_TARGET))
endif
PACKAGESDIR:=$(wildcard $(FPCDIR) $(FPCDIR)/packages)
ifndef FPCFPMAKE
ifdef CROSSCOMPILE
ifeq ($(strip $(wildcard $(addsuffix /compiler/ppc$(SRCEXEEXT),$(FPCDIR)))),)
FPCPROG:=$(strip $(wildcard $(addsuffix /fpc$(SRCEXEEXT),$(SEARCHPATH))))
ifneq ($(FPCPROG),)
FPCPROG:=$(firstword $(FPCPROG))
FPCFPMAKE:=$(shell $(FPCPROG) -PB)
ifeq ($(strip $(wildcard $(FPCFPMAKE))),)
FPCFPMAKE:=$(firstword $(FPCPROG))
endif
else
override FPCFPMAKE=$(firstword $(strip $(wildcard $(addsuffix /ppc386$(SRCEXEEXT),$(SEARCHPATH)))))
endif
else
FPCFPMAKE=$(strip $(wildcard $(addsuffix /compiler/ppc$(SRCEXEEXT),$(FPCDIR))))
FPMAKE_SKIP_CONFIG=-n
export FPCFPMAKE
export FPMAKE_SKIP_CONFIG
endif
else
FPMAKE_SKIP_CONFIG=-n
FPCFPMAKE=$(FPC)
endif
endif
ifeq ($(FULL_TARGET),i386-linux)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),i386-go32v2)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),i386-win32)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),i386-os2)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),i386-freebsd)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),i386-beos)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),i386-haiku)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),i386-netbsd)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),i386-solaris)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),i386-netware)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),i386-openbsd)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),i386-wdosx)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),i386-darwin)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),i386-emx)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),i386-watcom)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),i386-netwlibc)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),i386-wince)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),i386-embedded)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),i386-symbian)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),i386-nativent)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),i386-iphonesim)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),i386-android)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),i386-aros)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),m68k-linux)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),m68k-netbsd)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),m68k-amiga)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),m68k-atari)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),m68k-palmos)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),m68k-macosclassic)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),m68k-embedded)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),powerpc-linux)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),powerpc-netbsd)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),powerpc-amiga)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),powerpc-macosclassic)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),powerpc-darwin)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),powerpc-morphos)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),powerpc-embedded)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),powerpc-wii)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),powerpc-aix)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),sparc-linux)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),sparc-netbsd)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),sparc-solaris)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),sparc-embedded)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),x86_64-linux)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),x86_64-freebsd)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),x86_64-haiku)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),x86_64-netbsd)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),x86_64-solaris)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),x86_64-openbsd)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),x86_64-darwin)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),x86_64-win64)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),x86_64-embedded)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),x86_64-iphonesim)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),x86_64-android)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),x86_64-aros)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),x86_64-dragonfly)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),arm-linux)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),arm-netbsd)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),arm-palmos)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),arm-wince)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),arm-gba)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),arm-nds)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),arm-embedded)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),arm-symbian)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),arm-android)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),arm-aros)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),arm-ios)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),powerpc64-linux)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),powerpc64-darwin)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),powerpc64-embedded)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),powerpc64-aix)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),avr-embedded)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),armeb-linux)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),armeb-embedded)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),mips-linux)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),mipsel-linux)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),mipsel-embedded)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),mipsel-android)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),jvm-java)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),jvm-android)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),i8086-embedded)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),i8086-msdos)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),i8086-win16)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),aarch64-linux)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),aarch64-darwin)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),aarch64-android)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),aarch64-ios)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),wasm-wasm)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
ifeq ($(FULL_TARGET),sparc64-linux)
override TARGET_DIRS+=helloworld helloworld2 gtk_demo gettingstarted plugins scribble_simple gtkglext
endif
override INSTALL_FPCPACKAGE=y
ifdef REQUIRE_UNITSDIR
override UNITSDIR+=$(REQUIRE_UNITSDIR)
endif
ifdef REQUIRE_PACKAGESDIR
override PACKAGESDIR+=$(REQUIRE_PACKAGESDIR)
endif
ifdef ZIPINSTALL
ifneq ($(findstring $(OS_TARGET),$(UNIXs)),)
UNIXHier=1
endif
else
ifneq ($(findstring $(OS_SOURCE),$(UNIXs)),)
UNIXHier=1
endif
endif
ifndef INSTALL_PREFIX
ifdef PREFIX
INSTALL_PREFIX=$(PREFIX)
endif
endif
ifndef INSTALL_PREFIX
ifdef UNIXHier
INSTALL_PREFIX=/usr/local
else
ifdef INSTALL_FPCPACKAGE
INSTALL_BASEDIR:=/pp
else
INSTALL_BASEDIR:=/$(PACKAGE_NAME)
endif
endif
endif
export INSTALL_PREFIX
ifdef INSTALL_FPCSUBDIR
export INSTALL_FPCSUBDIR
endif
ifndef DIST_DESTDIR
DIST_DESTDIR:=$(BASEDIR)
endif
export DIST_DESTDIR
ifndef COMPILER_UNITTARGETDIR
ifdef PACKAGEDIR_MAIN
COMPILER_UNITTARGETDIR=$(PACKAGEDIR_MAIN)/units/$(TARGETSUFFIX)
else
COMPILER_UNITTARGETDIR=units/$(TARGETSUFFIX)
endif
endif
ifndef COMPILER_TARGETDIR
COMPILER_TARGETDIR=.
endif
ifndef INSTALL_BASEDIR
ifdef UNIXHier
ifdef INSTALL_FPCPACKAGE
INSTALL_BASEDIR:=$(INSTALL_PREFIX)/lib/fpc/$(FPC_VERSION)
else
INSTALL_BASEDIR:=$(INSTALL_PREFIX)/lib/$(PACKAGE_NAME)
endif
else
INSTALL_BASEDIR:=$(INSTALL_PREFIX)
endif
endif
ifndef INSTALL_BINDIR
ifdef UNIXHier
INSTALL_BINDIR:=$(INSTALL_PREFIX)/bin
else
INSTALL_BINDIR:=$(INSTALL_BASEDIR)/bin
ifdef INSTALL_FPCPACKAGE
ifdef CROSSCOMPILE
ifdef CROSSINSTALL
INSTALL_BINDIR:=$(INSTALL_BINDIR)/$(SOURCESUFFIX)
else
INSTALL_BINDIR:=$(INSTALL_BINDIR)/$(TARGETSUFFIX)
endif
else
INSTALL_BINDIR:=$(INSTALL_BINDIR)/$(TARGETSUFFIX)
endif
endif
endif
endif
ifndef INSTALL_UNITDIR
INSTALL_UNITDIR:=$(INSTALL_BASEDIR)/units/$(TARGETSUFFIX)
ifdef INSTALL_FPCPACKAGE
ifdef PACKAGE_NAME
INSTALL_UNITDIR:=$(INSTALL_UNITDIR)/$(PACKAGE_NAME)
endif
endif
endif
ifndef INSTALL_LIBDIR
ifdef UNIXHier
INSTALL_LIBDIR:=$(INSTALL_PREFIX)/lib
else
INSTALL_LIBDIR:=$(INSTALL_UNITDIR)
endif
endif
ifndef INSTALL_SOURCEDIR
ifdef UNIXHier
ifdef BSDhier
SRCPREFIXDIR=share/src
else
ifdef linuxHier
SRCPREFIXDIR=share/src
else
SRCPREFIXDIR=src
endif
endif
ifdef INSTALL_FPCPACKAGE
ifdef INSTALL_FPCSUBDIR
INSTALL_SOURCEDIR:=$(INSTALL_PREFIX)/$(SRCPREFIXDIR)/fpc-$(FPC_VERSION)/$(INSTALL_FPCSUBDIR)/$(PACKAGE_NAME)
else
INSTALL_SOURCEDIR:=$(INSTALL_PREFIX)/$(SRCPREFIXDIR)/fpc-$(FPC_VERSION)/$(PACKAGE_NAME)
endif
else
INSTALL_SOURCEDIR:=$(INSTALL_PREFIX)/$(SRCPREFIXDIR)/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
endif
else
ifdef INSTALL_FPCPACKAGE
ifdef INSTALL_FPCSUBDIR
INSTALL_SOURCEDIR:=$(INSTALL_BASEDIR)/source/$(INSTALL_FPCSUBDIR)/$(PACKAGE_NAME)
else
INSTALL_SOURCEDIR:=$(INSTALL_BASEDIR)/source/$(PACKAGE_NAME)
endif
else
INSTALL_SOURCEDIR:=$(INSTALL_BASEDIR)/source
endif
endif
endif
ifndef INSTALL_DOCDIR
ifdef UNIXHier
ifdef BSDhier
DOCPREFIXDIR=share/doc
else
ifdef linuxHier
DOCPREFIXDIR=share/doc
else
DOCPREFIXDIR=doc
endif
endif
ifdef INSTALL_FPCPACKAGE
INSTALL_DOCDIR:=$(INSTALL_PREFIX)/$(DOCPREFIXDIR)/fpc-$(FPC_VERSION)/$(PACKAGE_NAME)
else
INSTALL_DOCDIR:=$(INSTALL_PREFIX)/$(DOCPREFIXDIR)/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
endif
else
ifdef INSTALL_FPCPACKAGE
INSTALL_DOCDIR:=$(INSTALL_BASEDIR)/doc/$(PACKAGE_NAME)
else
INSTALL_DOCDIR:=$(INSTALL_BASEDIR)/doc
endif
endif
endif
ifndef INSTALL_EXAMPLEDIR
ifdef UNIXHier
ifdef INSTALL_FPCPACKAGE
ifdef BSDhier
INSTALL_EXAMPLEDIR:=$(INSTALL_PREFIX)/share/examples/fpc-$(FPC_VERSION)/$(PACKAGE_NAME)
else
ifdef linuxHier
INSTALL_EXAMPLEDIR:=$(INSTALL_DOCDIR)/examples
else
INSTALL_EXAMPLEDIR:=$(INSTALL_PREFIX)/doc/fpc-$(FPC_VERSION)/examples/$(PACKAGE_NAME)
endif
endif
else
ifdef BSDhier
INSTALL_EXAMPLEDIR:=$(INSTALL_PREFIX)/share/examples/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
else
ifdef linuxHier
INSTALL_EXAMPLEDIR:=$(INSTALL_DOCDIR)/examples/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
else
INSTALL_EXAMPLEDIR:=$(INSTALL_PREFIX)/doc/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
endif
endif
endif
else
ifdef INSTALL_FPCPACKAGE
INSTALL_EXAMPLEDIR:=$(INSTALL_BASEDIR)/examples/$(PACKAGE_NAME)
else
INSTALL_EXAMPLEDIR:=$(INSTALL_BASEDIR)/examples
endif
endif
endif
ifndef INSTALL_DATADIR
INSTALL_DATADIR=$(INSTALL_BASEDIR)
endif
ifndef INSTALL_SHAREDDIR
INSTALL_SHAREDDIR=$(INSTALL_PREFIX)/lib
endif
ifdef CROSSCOMPILE
ifndef CROSSBINDIR
CROSSBINDIR:=$(wildcard $(CROSSTARGETDIR)/bin/$(SOURCESUFFIX))
ifeq ($(CROSSBINDIR),)
CROSSBINDIR:=$(wildcard $(INSTALL_BASEDIR)/cross/$(TARGETSUFFIX)/bin/$(FULL_SOURCE))
endif
endif
else
CROSSBINDIR=
endif
BATCHEXT=.bat
LOADEREXT=.as
EXEEXT=.exe
PPLEXT=.ppl
PPUEXT=.ppu
OEXT=.o
ASMEXT=.s
SMARTEXT=.sl
STATICLIBEXT=.a
SHAREDLIBEXT=.so
SHAREDLIBPREFIX=libfp
STATICLIBPREFIX=libp
IMPORTLIBPREFIX=libimp
RSTEXT=.rst
EXEDBGEXT=.dbg
ifeq ($(OS_TARGET),go32v1)
STATICLIBPREFIX=
SHORTSUFFIX=v1
endif
ifeq ($(OS_TARGET),go32v2)
STATICLIBPREFIX=
SHORTSUFFIX=dos
IMPORTLIBPREFIX=
endif
ifeq ($(OS_TARGET),watcom)
STATICLIBPREFIX=
OEXT=.obj
ASMEXT=.asm
SHAREDLIBEXT=.dll
SHORTSUFFIX=wat
IMPORTLIBPREFIX=
endif
ifneq ($(CPU_TARGET),jvm)
ifeq ($(OS_TARGET),android)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=lnx
endif
endif
ifeq ($(OS_TARGET),linux)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=lnx
endif
ifeq ($(OS_TARGET),dragonfly)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=df
endif
ifeq ($(OS_TARGET),freebsd)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=fbs
endif
ifeq ($(OS_TARGET),netbsd)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=nbs
endif
ifeq ($(OS_TARGET),openbsd)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=obs
endif
ifeq ($(OS_TARGET),win32)
SHAREDLIBEXT=.dll
SHORTSUFFIX=w32
endif
ifeq ($(OS_TARGET),os2)
BATCHEXT=.cmd
AOUTEXT=.out
STATICLIBPREFIX=
SHAREDLIBEXT=.dll
SHORTSUFFIX=os2
ECHO=echo
IMPORTLIBPREFIX=
endif
ifeq ($(OS_TARGET),emx)
BATCHEXT=.cmd
AOUTEXT=.out
STATICLIBPREFIX=
SHAREDLIBEXT=.dll
SHORTSUFFIX=emx
ECHO=echo
IMPORTLIBPREFIX=
endif
ifeq ($(OS_TARGET),amiga)
EXEEXT=
SHAREDLIBEXT=.library
SHORTSUFFIX=amg
endif
ifeq ($(OS_TARGET),aros)
EXEEXT=
SHAREDLIBEXT=.library
SHORTSUFFIX=aros
endif
ifeq ($(OS_TARGET),morphos)
EXEEXT=
SHAREDLIBEXT=.library
SHORTSUFFIX=mos
endif
ifeq ($(OS_TARGET),atari)
EXEEXT=.ttp
SHORTSUFFIX=ata
endif
ifeq ($(OS_TARGET),beos)
BATCHEXT=.sh
EXEEXT=
SHORTSUFFIX=be
endif
ifeq ($(OS_TARGET),haiku)
BATCHEXT=.sh
EXEEXT=
SHORTSUFFIX=hai
endif
ifeq ($(OS_TARGET),solaris)
BATCHEXT=.sh
EXEEXT=
SHORTSUFFIX=sun
endif
ifeq ($(OS_TARGET),qnx)
BATCHEXT=.sh
EXEEXT=
SHORTSUFFIX=qnx
endif
ifeq ($(OS_TARGET),netware)
EXEEXT=.nlm
STATICLIBPREFIX=
SHORTSUFFIX=nw
IMPORTLIBPREFIX=imp
endif
ifeq ($(OS_TARGET),netwlibc)
EXEEXT=.nlm
STATICLIBPREFIX=
SHORTSUFFIX=nwl
IMPORTLIBPREFIX=imp
endif
ifeq ($(OS_TARGET),macosclassic)
BATCHEXT=
EXEEXT=
DEBUGSYMEXT=.xcoff
SHORTSUFFIX=mac
IMPORTLIBPREFIX=imp
endif
ifneq ($(findstring $(OS_TARGET),darwin iphonesim ios),)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=dwn
EXEDBGEXT=.dSYM
endif
ifeq ($(OS_TARGET),gba)
EXEEXT=.gba
SHAREDLIBEXT=.so
SHORTSUFFIX=gba
endif
ifeq ($(OS_TARGET),symbian)
SHAREDLIBEXT=.dll
SHORTSUFFIX=symbian
endif
ifeq ($(OS_TARGET),NativeNT)
SHAREDLIBEXT=.dll
SHORTSUFFIX=nativent
endif
ifeq ($(OS_TARGET),wii)
EXEEXT=.dol
SHAREDLIBEXT=.so
SHORTSUFFIX=wii
endif
ifeq ($(OS_TARGET),aix)
BATCHEXT=.sh
EXEEXT=
SHAREDLIBEXT=.a
SHORTSUFFIX=aix
endif
ifeq ($(OS_TARGET),java)
OEXT=.class
ASMEXT=.j
SHAREDLIBEXT=.jar
SHORTSUFFIX=java
endif
ifeq ($(CPU_TARGET),jvm)
ifeq ($(OS_TARGET),android)
OEXT=.class
ASMEXT=.j
SHAREDLIBEXT=.jar
SHORTSUFFIX=android
endif
endif
ifeq ($(OS_TARGET),msdos)
STATICLIBPREFIX=
STATICLIBEXT=.a
SHORTSUFFIX=d16
endif
ifeq ($(OS_TARGET),embedded)
ifeq ($(CPU_TARGET),i8086)
STATICLIBPREFIX=
STATICLIBEXT=.a
else
EXEEXT=.bin
endif
SHORTSUFFIX=emb
endif
ifeq ($(OS_TARGET),win16)
STATICLIBPREFIX=
STATICLIBEXT=.a
SHAREDLIBEXT=.dll
SHORTSUFFIX=w16
endif
ifneq ($(findstring $(OS_SOURCE),$(LIMIT83fs)),)
FPCMADE=fpcmade.$(SHORTSUFFIX)
ZIPSUFFIX=$(SHORTSUFFIX)
ZIPCROSSPREFIX=
ZIPSOURCESUFFIX=src
ZIPEXAMPLESUFFIX=exm
else
FPCMADE=fpcmade.$(TARGETSUFFIX)
ZIPSOURCESUFFIX=.source
ZIPEXAMPLESUFFIX=.examples
ifdef CROSSCOMPILE
ZIPSUFFIX=.$(SOURCESUFFIX)
ZIPCROSSPREFIX=$(TARGETSUFFIX)-
else
ZIPSUFFIX=.$(TARGETSUFFIX)
ZIPCROSSPREFIX=
endif
endif
ifndef ECHO
ECHO:=$(strip $(wildcard $(addsuffix /gecho$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO:=$(strip $(wildcard $(addsuffix /echo$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO= __missing_command_ECHO
else
ECHO:=$(firstword $(ECHO))
endif
else
ECHO:=$(firstword $(ECHO))
endif
endif
export ECHO
ifndef DATE
DATE:=$(strip $(wildcard $(addsuffix /gdate$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(DATE),)
DATE:=$(strip $(wildcard $(addsuffix /date$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(DATE),)
DATE= __missing_command_DATE
else
DATE:=$(firstword $(DATE))
endif
else
DATE:=$(firstword $(DATE))
endif
endif
export DATE
ifndef GINSTALL
GINSTALL:=$(strip $(wildcard $(addsuffix /ginstall$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(GINSTALL),)
GINSTALL:=$(strip $(wildcard $(addsuffix /install$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(GINSTALL),)
GINSTALL= __missing_command_GINSTALL
else
GINSTALL:=$(firstword $(GINSTALL))
endif
else
GINSTALL:=$(firstword $(GINSTALL))
endif
endif
export GINSTALL
ifndef CPPROG
CPPROG:=$(strip $(wildcard $(addsuffix /cp$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(CPPROG),)
CPPROG= __missing_command_CPPROG
else
CPPROG:=$(firstword $(CPPROG))
endif
endif
export CPPROG
ifndef RMPROG
RMPROG:=$(strip $(wildcard $(addsuffix /rm$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(RMPROG),)
RMPROG= __missing_command_RMPROG
else
RMPROG:=$(firstword $(RMPROG))
endif
endif
export RMPROG
ifndef MVPROG
MVPROG:=$(strip $(wildcard $(addsuffix /mv$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(MVPROG),)
MVPROG= __missing_command_MVPROG
else
MVPROG:=$(firstword $(MVPROG))
endif
endif
export MVPROG
ifndef MKDIRPROG
MKDIRPROG:=$(strip $(wildcard $(addsuffix /gmkdir$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(MKDIRPROG),)
MKDIRPROG:=$(strip $(wildcard $(addsuffix /mkdir$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(MKDIRPROG),)
MKDIRPROG= __missing_command_MKDIRPROG
else
MKDIRPROG:=$(firstword $(MKDIRPROG))
endif
else
MKDIRPROG:=$(firstword $(MKDIRPROG))
endif
endif
export MKDIRPROG
ifndef ECHOREDIR
ifndef inUnix
ECHOREDIR=echo
else
ECHOREDIR=$(ECHO)
endif
endif
ifndef COPY
COPY:=$(CPPROG) -fp
endif
ifndef COPYTREE
COPYTREE:=$(CPPROG) -Rfp
endif
ifndef MKDIRTREE
MKDIRTREE:=$(MKDIRPROG) -p
endif
ifndef MOVE
MOVE:=$(MVPROG) -f
endif
ifndef DEL
DEL:=$(RMPROG) -f
endif
ifndef DELTREE
DELTREE:=$(RMPROG) -rf
endif
ifndef INSTALL
ifdef inUnix
INSTALL:=$(GINSTALL) -c -m 644
else
INSTALL:=$(COPY)
endif
endif
ifndef INSTALLEXE
ifdef inUnix
INSTALLEXE:=$(GINSTALL) -c -m 755
else
INSTALLEXE:=$(COPY)
endif
endif
ifndef MKDIR
MKDIR:=$(GINSTALL) -m 755 -d
endif
export ECHOREDIR COPY COPYTREE MOVE DEL DELTREE INSTALL INSTALLEXE MKDIR
ifndef PPUMOVE
PPUMOVE:=$(strip $(wildcard $(addsuffix /ppumove$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(PPUMOVE),)
PPUMOVE= __missing_command_PPUMOVE
else
PPUMOVE:=$(firstword $(PPUMOVE))
endif
endif
export PPUMOVE
ifndef FPCMAKE
FPCMAKE:=$(strip $(wildcard $(addsuffix /fpcmake$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(FPCMAKE),)
FPCMAKE= __missing_command_FPCMAKE
else
FPCMAKE:=$(firstword $(FPCMAKE))
endif
endif
export FPCMAKE
ifndef ZIPPROG
ZIPPROG:=$(strip $(wildcard $(addsuffix /zip$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ZIPPROG),)
ZIPPROG= __missing_command_ZIPPROG
else
ZIPPROG:=$(firstword $(ZIPPROG))
endif
endif
export ZIPPROG
ifndef TARPROG
TARPROG:=$(strip $(wildcard $(addsuffix /gtar$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(TARPROG),)
TARPROG:=$(strip $(wildcard $(addsuffix /tar$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(TARPROG),)
TARPROG= __missing_command_TARPROG
else
TARPROG:=$(firstword $(TARPROG))
endif
else
TARPROG:=$(firstword $(TARPROG))
endif
endif
export TARPROG
ASNAME=$(BINUTILSPREFIX)as
LDNAME=$(BINUTILSPREFIX)ld
ARNAME=$(BINUTILSPREFIX)ar
RCNAME=$(BINUTILSPREFIX)rc
NASMNAME=$(BINUTILSPREFIX)nasm
ifndef ASPROG
ifdef CROSSBINDIR
ASPROG=$(CROSSBINDIR)/$(ASNAME)$(SRCEXEEXT)
else
ASPROG=$(ASNAME)
endif
endif
ifndef LDPROG
ifdef CROSSBINDIR
LDPROG=$(CROSSBINDIR)/$(LDNAME)$(SRCEXEEXT)
else
LDPROG=$(LDNAME)
endif
endif
ifndef RCPROG
ifdef CROSSBINDIR
RCPROG=$(CROSSBINDIR)/$(RCNAME)$(SRCEXEEXT)
else
RCPROG=$(RCNAME)
endif
endif
ifndef ARPROG
ifdef CROSSBINDIR
ARPROG=$(CROSSBINDIR)/$(ARNAME)$(SRCEXEEXT)
else
ARPROG=$(ARNAME)
endif
endif
ifndef NASMPROG
ifdef CROSSBINDIR
NASMPROG=$(CROSSBINDIR)/$(NASMNAME)$(SRCEXEEXT)
else
NASMPROG=$(NASMNAME)
endif
endif
AS=$(ASPROG)
LD=$(LDPROG)
RC=$(RCPROG)
AR=$(ARPROG)
NASM=$(NASMPROG)
ifdef inUnix
PPAS=./ppas$(SRCBATCHEXT)
else
PPAS=ppas$(SRCBATCHEXT)
endif
ifdef inUnix
LDCONFIG=ldconfig
else
LDCONFIG=
endif
ifdef DATE
DATESTR:=$(shell $(DATE) +%Y%m%d)
else
DATESTR=
endif
ZIPOPT=-9
ZIPEXT=.zip
ifeq ($(USETAR),bz2)
TAROPT=vj
TAREXT=.tar.bz2
else
TAROPT=vz
TAREXT=.tar.gz
endif
override REQUIRE_PACKAGES=gtk2
ifeq ($(FULL_TARGET),i386-linux)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),i386-go32v2)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),i386-win32)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),i386-os2)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),i386-freebsd)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),i386-beos)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),i386-haiku)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),i386-netbsd)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),i386-solaris)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),i386-netware)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),i386-openbsd)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),i386-wdosx)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),i386-darwin)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),i386-emx)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),i386-watcom)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),i386-netwlibc)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),i386-wince)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),i386-embedded)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),i386-symbian)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),i386-nativent)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),i386-iphonesim)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),i386-android)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),i386-aros)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),m68k-linux)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),m68k-netbsd)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),m68k-amiga)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),m68k-atari)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),m68k-palmos)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),m68k-macosclassic)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),m68k-embedded)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),powerpc-linux)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),powerpc-netbsd)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),powerpc-amiga)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),powerpc-macosclassic)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),powerpc-darwin)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),powerpc-morphos)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),powerpc-embedded)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),powerpc-wii)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),powerpc-aix)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),sparc-linux)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),sparc-netbsd)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),sparc-solaris)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),sparc-embedded)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),x86_64-linux)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),x86_64-freebsd)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),x86_64-haiku)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),x86_64-netbsd)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),x86_64-solaris)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),x86_64-openbsd)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),x86_64-darwin)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),x86_64-win64)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),x86_64-embedded)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),x86_64-iphonesim)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),x86_64-android)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),x86_64-aros)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),x86_64-dragonfly)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),arm-linux)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),arm-netbsd)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),arm-palmos)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),arm-wince)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),arm-gba)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),arm-nds)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),arm-embedded)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),arm-symbian)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),arm-android)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),arm-aros)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),arm-ios)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),powerpc64-linux)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),powerpc64-darwin)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),powerpc64-embedded)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),powerpc64-aix)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),avr-embedded)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),armeb-linux)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),armeb-embedded)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),mips-linux)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),mipsel-linux)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),mipsel-embedded)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),mipsel-android)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),jvm-java)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),jvm-android)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),i8086-embedded)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),i8086-msdos)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),i8086-win16)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),aarch64-linux)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),aarch64-darwin)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),aarch64-android)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),aarch64-ios)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),wasm-wasm)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifeq ($(FULL_TARGET),sparc64-linux)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_GTK2=1
REQUIRE_PACKAGES_OPENGL=1
endif
ifdef REQUIRE_PACKAGES_RTL
PACKAGEDIR_RTL:=$(firstword $(subst /Makefile.fpc,,$(strip $(wildcard $(addsuffix /rtl/Makefile.fpc,$(PACKAGESDIR))))))
ifneq ($(PACKAGEDIR_RTL),)
ifneq ($(wildcard $(PACKAGEDIR_RTL)/units/$(TARGETSUFFIX)),)
UNITDIR_RTL=$(PACKAGEDIR_RTL)/units/$(TARGETSUFFIX)
else
UNITDIR_RTL=$(PACKAGEDIR_RTL)
endif
ifneq ($(wildcard $(PACKAGEDIR_RTL)/units/$(SOURCESUFFIX)),)
UNITDIR_FPMAKE_RTL=$(PACKAGEDIR_RTL)/units/$(SOURCESUFFIX)
else
ifneq ($(wildcard $(PACKAGEDIR_RTL)/units_bs/$(SOURCESUFFIX)),)
UNITDIR_FPMAKE_RTL=$(PACKAGEDIR_RTL)/units_bs/$(SOURCESUFFIX)
else
UNITDIR_FPMAKE_RTL=$(PACKAGEDIR_RTL)
endif
endif
ifdef CHECKDEPEND
$(PACKAGEDIR_RTL)/$(OS_TARGET)/$(FPCMADE):
	$(MAKE) -C $(PACKAGEDIR_RTL)/$(OS_TARGET) $(FPCMADE)
override ALLDEPENDENCIES+=$(PACKAGEDIR_RTL)/$(OS_TARGET)/$(FPCMADE)
endif
else
PACKAGEDIR_RTL=
UNITDIR_RTL:=$(subst /Package.fpc,,$(strip $(wildcard $(addsuffix /rtl/Package.fpc,$(UNITSDIR)))))
ifneq ($(UNITDIR_RTL),)
UNITDIR_RTL:=$(firstword $(UNITDIR_RTL))
else
UNITDIR_RTL=
endif
endif
ifdef UNITDIR_RTL
override COMPILER_UNITDIR+=$(UNITDIR_RTL)
endif
ifdef UNITDIR_FPMAKE_RTL
override COMPILER_FPMAKE_UNITDIR+=$(UNITDIR_FPMAKE_RTL)
endif
endif
ifdef REQUIRE_PACKAGES_PASZLIB
PACKAGEDIR_PASZLIB:=$(firstword $(subst /Makefile.fpc,,$(strip $(wildcard $(addsuffix /paszlib/Makefile.fpc,$(PACKAGESDIR))))))
ifneq ($(PACKAGEDIR_PASZLIB),)
ifneq ($(wildcard $(PACKAGEDIR_PASZLIB)/units/$(TARGETSUFFIX)),)
UNITDIR_PASZLIB=$(PACKAGEDIR_PASZLIB)/units/$(TARGETSUFFIX)
else
UNITDIR_PASZLIB=$(PACKAGEDIR_PASZLIB)
endif
ifneq ($(wildcard $(PACKAGEDIR_PASZLIB)/units/$(SOURCESUFFIX)),)
UNITDIR_FPMAKE_PASZLIB=$(PACKAGEDIR_PASZLIB)/units/$(SOURCESUFFIX)
else
ifneq ($(wildcard $(PACKAGEDIR_PASZLIB)/units_bs/$(SOURCESUFFIX)),)
UNITDIR_FPMAKE_PASZLIB=$(PACKAGEDIR_PASZLIB)/units_bs/$(SOURCESUFFIX)
else
UNITDIR_FPMAKE_PASZLIB=$(PACKAGEDIR_PASZLIB)
endif
endif
ifdef CHECKDEPEND
$(PACKAGEDIR_PASZLIB)/$(FPCMADE):
	$(MAKE) -C $(PACKAGEDIR_PASZLIB) $(FPCMADE)
override ALLDEPENDENCIES+=$(PACKAGEDIR_PASZLIB)/$(FPCMADE)
endif
else
PACKAGEDIR_PASZLIB=
UNITDIR_PASZLIB:=$(subst /Package.fpc,,$(strip $(wildcard $(addsuffix /paszlib/Package.fpc,$(UNITSDIR)))))
ifneq ($(UNITDIR_PASZLIB),)
UNITDIR_PASZLIB:=$(firstword $(UNITDIR_PASZLIB))
else
UNITDIR_PASZLIB=
endif
endif
ifdef UNITDIR_PASZLIB
override COMPILER_UNITDIR+=$(UNITDIR_PASZLIB)
endif
ifdef UNITDIR_FPMAKE_PASZLIB
override COMPILER_FPMAKE_UNITDIR+=$(UNITDIR_FPMAKE_PASZLIB)
endif
endif
ifdef REQUIRE_PACKAGES_FCL-PROCESS
PACKAGEDIR_FCL-PROCESS:=$(firstword $(subst /Makefile.fpc,,$(strip $(wildcard $(addsuffix /fcl-process/Makefile.fpc,$(PACKAGESDIR))))))
ifneq ($(PACKAGEDIR_FCL-PROCESS),)
ifneq ($(wildcard $(PACKAGEDIR_FCL-PROCESS)/units/$(TARGETSUFFIX)),)
UNITDIR_FCL-PROCESS=$(PACKAGEDIR_FCL-PROCESS)/units/$(TARGETSUFFIX)
else
UNITDIR_FCL-PROCESS=$(PACKAGEDIR_FCL-PROCESS)
endif
ifneq ($(wildcard $(PACKAGEDIR_FCL-PROCESS)/units/$(SOURCESUFFIX)),)
UNITDIR_FPMAKE_FCL-PROCESS=$(PACKAGEDIR_FCL-PROCESS)/units/$(SOURCESUFFIX)
else
ifneq ($(wildcard $(PACKAGEDIR_FCL-PROCESS)/units_bs/$(SOURCESUFFIX)),)
UNITDIR_FPMAKE_FCL-PROCESS=$(PACKAGEDIR_FCL-PROCESS)/units_bs/$(SOURCESUFFIX)
else
UNITDIR_FPMAKE_FCL-PROCESS=$(PACKAGEDIR_FCL-PROCESS)
endif
endif
ifdef CHECKDEPEND
$(PACKAGEDIR_FCL-PROCESS)/$(FPCMADE):
	$(MAKE) -C $(PACKAGEDIR_FCL-PROCESS) $(FPCMADE)
override ALLDEPENDENCIES+=$(PACKAGEDIR_FCL-PROCESS)/$(FPCMADE)
endif
else
PACKAGEDIR_FCL-PROCESS=
UNITDIR_FCL-PROCESS:=$(subst /Package.fpc,,$(strip $(wildcard $(addsuffix /fcl-process/Package.fpc,$(UNITSDIR)))))
ifneq ($(UNITDIR_FCL-PROCESS),)
UNITDIR_FCL-PROCESS:=$(firstword $(UNITDIR_FCL-PROCESS))
else
UNITDIR_FCL-PROCESS=
endif
endif
ifdef UNITDIR_FCL-PROCESS
override COMPILER_UNITDIR+=$(UNITDIR_FCL-PROCESS)
endif
ifdef UNITDIR_FPMAKE_FCL-PROCESS
override COMPILER_FPMAKE_UNITDIR+=$(UNITDIR_FPMAKE_FCL-PROCESS)
endif
endif
ifdef REQUIRE_PACKAGES_HASH
PACKAGEDIR_HASH:=$(firstword $(subst /Makefile.fpc,,$(strip $(wildcard $(addsuffix /hash/Makefile.fpc,$(PACKAGESDIR))))))
ifneq ($(PACKAGEDIR_HASH),)
ifneq ($(wildcard $(PACKAGEDIR_HASH)/units/$(TARGETSUFFIX)),)
UNITDIR_HASH=$(PACKAGEDIR_HASH)/units/$(TARGETSUFFIX)
else
UNITDIR_HASH=$(PACKAGEDIR_HASH)
endif
ifneq ($(wildcard $(PACKAGEDIR_HASH)/units/$(SOURCESUFFIX)),)
UNITDIR_FPMAKE_HASH=$(PACKAGEDIR_HASH)/units/$(SOURCESUFFIX)
else
ifneq ($(wildcard $(PACKAGEDIR_HASH)/units_bs/$(SOURCESUFFIX)),)
UNITDIR_FPMAKE_HASH=$(PACKAGEDIR_HASH)/units_bs/$(SOURCESUFFIX)
else
UNITDIR_FPMAKE_HASH=$(PACKAGEDIR_HASH)
endif
endif
ifdef CHECKDEPEND
$(PACKAGEDIR_HASH)/$(FPCMADE):
	$(MAKE) -C $(PACKAGEDIR_HASH) $(FPCMADE)
override ALLDEPENDENCIES+=$(PACKAGEDIR_HASH)/$(FPCMADE)
endif
else
PACKAGEDIR_HASH=
UNITDIR_HASH:=$(subst /Package.fpc,,$(strip $(wildcard $(addsuffix /hash/Package.fpc,$(UNITSDIR)))))
ifneq ($(UNITDIR_HASH),)
UNITDIR_HASH:=$(firstword $(UNITDIR_HASH))
else
UNITDIR_HASH=
endif
endif
ifdef UNITDIR_HASH
override COMPILER_UNITDIR+=$(UNITDIR_HASH)
endif
ifdef UNITDIR_FPMAKE_HASH
override COMPILER_FPMAKE_UNITDIR+=$(UNITDIR_FPMAKE_HASH)
endif
endif
ifdef REQUIRE_PACKAGES_LIBTAR
PACKAGEDIR_LIBTAR:=$(firstword $(subst /Makefile.fpc,,$(strip $(wildcard $(addsuffix /libtar/Makefile.fpc,$(PACKAGESDIR))))))
ifneq ($(PACKAGEDIR_LIBTAR),)
ifneq ($(wildcard $(PACKAGEDIR_LIBTAR)/units/$(TARGETSUFFIX)),)
UNITDIR_LIBTAR=$(PACKAGEDIR_LIBTAR)/units/$(TARGETSUFFIX)
else
UNITDIR_LIBTAR=$(PACKAGEDIR_LIBTAR)
endif
ifneq ($(wildcard $(PACKAGEDIR_LIBTAR)/units/$(SOURCESUFFIX)),)
UNITDIR_FPMAKE_LIBTAR=$(PACKAGEDIR_LIBTAR)/units/$(SOURCESUFFIX)
else
ifneq ($(wildcard $(PACKAGEDIR_LIBTAR)/units_bs/$(SOURCESUFFIX)),)
UNITDIR_FPMAKE_LIBTAR=$(PACKAGEDIR_LIBTAR)/units_bs/$(SOURCESUFFIX)
else
UNITDIR_FPMAKE_LIBTAR=$(PACKAGEDIR_LIBTAR)
endif
endif
ifdef CHECKDEPEND
$(PACKAGEDIR_LIBTAR)/$(FPCMADE):
	$(MAKE) -C $(PACKAGEDIR_LIBTAR) $(FPCMADE)
override ALLDEPENDENCIES+=$(PACKAGEDIR_LIBTAR)/$(FPCMADE)
endif
else
PACKAGEDIR_LIBTAR=
UNITDIR_LIBTAR:=$(subst /Package.fpc,,$(strip $(wildcard $(addsuffix /libtar/Package.fpc,$(UNITSDIR)))))
ifneq ($(UNITDIR_LIBTAR),)
UNITDIR_LIBTAR:=$(firstword $(UNITDIR_LIBTAR))
else
UNITDIR_LIBTAR=
endif
endif
ifdef UNITDIR_LIBTAR
override COMPILER_UNITDIR+=$(UNITDIR_LIBTAR)
endif
ifdef UNITDIR_FPMAKE_LIBTAR
override COMPILER_FPMAKE_UNITDIR+=$(UNITDIR_FPMAKE_LIBTAR)
endif
endif
ifdef REQUIRE_PACKAGES_FPMKUNIT
PACKAGEDIR_FPMKUNIT:=$(firstword $(subst /Makefile.fpc,,$(strip $(wildcard $(addsuffix /fpmkunit/Makefile.fpc,$(PACKAGESDIR))))))
ifneq ($(PACKAGEDIR_FPMKUNIT),)
ifneq ($(wildcard $(PACKAGEDIR_FPMKUNIT)/units/$(TARGETSUFFIX)),)
UNITDIR_FPMKUNIT=$(PACKAGEDIR_FPMKUNIT)/units/$(TARGETSUFFIX)
else
UNITDIR_FPMKUNIT=$(PACKAGEDIR_FPMKUNIT)
endif
ifneq ($(wildcard $(PACKAGEDIR_FPMKUNIT)/units/$(SOURCESUFFIX)),)
UNITDIR_FPMAKE_FPMKUNIT=$(PACKAGEDIR_FPMKUNIT)/units/$(SOURCESUFFIX)
else
ifneq ($(wildcard $(PACKAGEDIR_FPMKUNIT)/units_bs/$(SOURCESUFFIX)),)
UNITDIR_FPMAKE_FPMKUNIT=$(PACKAGEDIR_FPMKUNIT)/units_bs/$(SOURCESUFFIX)
else
UNITDIR_FPMAKE_FPMKUNIT=$(PACKAGEDIR_FPMKUNIT)
endif
endif
ifdef CHECKDEPEND
$(PACKAGEDIR_FPMKUNIT)/$(FPCMADE):
	$(MAKE) -C $(PACKAGEDIR_FPMKUNIT) $(FPCMADE)
override ALLDEPENDENCIES+=$(PACKAGEDIR_FPMKUNIT)/$(FPCMADE)
endif
else
PACKAGEDIR_FPMKUNIT=
UNITDIR_FPMKUNIT:=$(subst /Package.fpc,,$(strip $(wildcard $(addsuffix /fpmkunit/Package.fpc,$(UNITSDIR)))))
ifneq ($(UNITDIR_FPMKUNIT),)
UNITDIR_FPMKUNIT:=$(firstword $(UNITDIR_FPMKUNIT))
else
UNITDIR_FPMKUNIT=
endif
endif
ifdef UNITDIR_FPMKUNIT
override COMPILER_UNITDIR+=$(UNITDIR_FPMKUNIT)
endif
ifdef UNITDIR_FPMAKE_FPMKUNIT
override COMPILER_FPMAKE_UNITDIR+=$(UNITDIR_FPMAKE_FPMKUNIT)
endif
endif
ifdef REQUIRE_PACKAGES_GTK2
PACKAGEDIR_GTK2:=$(firstword $(subst /Makefile.fpc,,$(strip $(wildcard $(addsuffix /gtk2/Makefile.fpc,$(PACKAGESDIR))))))
ifneq ($(PACKAGEDIR_GTK2),)
ifneq ($(wildcard $(PACKAGEDIR_GTK2)/units/$(TARGETSUFFIX)),)
UNITDIR_GTK2=$(PACKAGEDIR_GTK2)/units/$(TARGETSUFFIX)
else
UNITDIR_GTK2=$(PACKAGEDIR_GTK2)
endif
ifneq ($(wildcard $(PACKAGEDIR_GTK2)/units/$(SOURCESUFFIX)),)
UNITDIR_FPMAKE_GTK2=$(PACKAGEDIR_GTK2)/units/$(SOURCESUFFIX)
else
ifneq ($(wildcard $(PACKAGEDIR_GTK2)/units_bs/$(SOURCESUFFIX)),)
UNITDIR_FPMAKE_GTK2=$(PACKAGEDIR_GTK2)/units_bs/$(SOURCESUFFIX)
else
UNITDIR_FPMAKE_GTK2=$(PACKAGEDIR_GTK2)
endif
endif
ifdef CHECKDEPEND
$(PACKAGEDIR_GTK2)/$(FPCMADE):
	$(MAKE) -C $(PACKAGEDIR_GTK2) $(FPCMADE)
override ALLDEPENDENCIES+=$(PACKAGEDIR_GTK2)/$(FPCMADE)
endif
else
PACKAGEDIR_GTK2=
UNITDIR_GTK2:=$(subst /Package.fpc,,$(strip $(wildcard $(addsuffix /gtk2/Package.fpc,$(UNITSDIR)))))
ifneq ($(UNITDIR_GTK2),)
UNITDIR_GTK2:=$(firstword $(UNITDIR_GTK2))
else
UNITDIR_GTK2=
endif
endif
ifdef UNITDIR_GTK2
override COMPILER_UNITDIR+=$(UNITDIR_GTK2)
endif
ifdef UNITDIR_FPMAKE_GTK2
override COMPILER_FPMAKE_UNITDIR+=$(UNITDIR_FPMAKE_GTK2)
endif
endif
ifdef REQUIRE_PACKAGES_OPENGL
PACKAGEDIR_OPENGL:=$(firstword $(subst /Makefile.fpc,,$(strip $(wildcard $(addsuffix /opengl/Makefile.fpc,$(PACKAGESDIR))))))
ifneq ($(PACKAGEDIR_OPENGL),)
ifneq ($(wildcard $(PACKAGEDIR_OPENGL)/units/$(TARGETSUFFIX)),)
UNITDIR_OPENGL=$(PACKAGEDIR_OPENGL)/units/$(TARGETSUFFIX)
else
UNITDIR_OPENGL=$(PACKAGEDIR_OPENGL)
endif
ifneq ($(wildcard $(PACKAGEDIR_OPENGL)/units/$(SOURCESUFFIX)),)
UNITDIR_FPMAKE_OPENGL=$(PACKAGEDIR_OPENGL)/units/$(SOURCESUFFIX)
else
ifneq ($(wildcard $(PACKAGEDIR_OPENGL)/units_bs/$(SOURCESUFFIX)),)
UNITDIR_FPMAKE_OPENGL=$(PACKAGEDIR_OPENGL)/units_bs/$(SOURCESUFFIX)
else
UNITDIR_FPMAKE_OPENGL=$(PACKAGEDIR_OPENGL)
endif
endif
ifdef CHECKDEPEND
$(PACKAGEDIR_OPENGL)/$(FPCMADE):
	$(MAKE) -C $(PACKAGEDIR_OPENGL) $(FPCMADE)
override ALLDEPENDENCIES+=$(PACKAGEDIR_OPENGL)/$(FPCMADE)
endif
else
PACKAGEDIR_OPENGL=
UNITDIR_OPENGL:=$(subst /Package.fpc,,$(strip $(wildcard $(addsuffix /opengl/Package.fpc,$(UNITSDIR)))))
ifneq ($(UNITDIR_OPENGL),)
UNITDIR_OPENGL:=$(firstword $(UNITDIR_OPENGL))
else
UNITDIR_OPENGL=
endif
endif
ifdef UNITDIR_OPENGL
override COMPILER_UNITDIR+=$(UNITDIR_OPENGL)
endif
ifdef UNITDIR_FPMAKE_OPENGL
override COMPILER_FPMAKE_UNITDIR+=$(UNITDIR_FPMAKE_OPENGL)
endif
endif
ifndef NOCPUDEF
override FPCOPTDEF=$(ARCH)
endif
ifneq ($(OS_TARGET),$(OS_SOURCE))
override FPCOPT+=-T$(OS_TARGET)
endif
ifneq ($(CPU_TARGET),$(CPU_SOURCE))
override FPCOPT+=-P$(ARCH)
endif
ifeq ($(OS_SOURCE),openbsd)
override FPCOPT+=-FD$(NEW_BINUTILS_PATH)
override FPCMAKEOPT+=-FD$(NEW_BINUTILS_PATH)
override FPMAKE_BUILD_OPT+=-FD$(NEW_BINUTILS_PATH)
endif
ifndef CROSSBOOTSTRAP
ifneq ($(BINUTILSPREFIX),)
override FPCOPT+=-XP$(BINUTILSPREFIX)
endif
ifneq ($(BINUTILSPREFIX),)
override FPCOPT+=-Xr$(RLINKPATH)
endif
endif
ifndef CROSSCOMPILE
ifneq ($(BINUTILSPREFIX),)
override FPCMAKEOPT+=-XP$(BINUTILSPREFIX)
override FPMAKE_BUILD_OPT+=-XP$(BINUTILSPREFIX)
endif
endif
ifdef UNITDIR
override FPCOPT+=$(addprefix -Fu,$(UNITDIR))
endif
ifdef LIBDIR
override FPCOPT+=$(addprefix -Fl,$(LIBDIR))
endif
ifdef OBJDIR
override FPCOPT+=$(addprefix -Fo,$(OBJDIR))
endif
ifdef INCDIR
override FPCOPT+=$(addprefix -Fi,$(INCDIR))
endif
ifdef LINKSMART
override FPCOPT+=-XX
endif
ifdef CREATESMART
override FPCOPT+=-CX
endif
ifdef DEBUG
override FPCOPT+=-gl
override FPCOPTDEF+=DEBUG
endif
ifdef RELEASE
FPCCPUOPT:=-O2
override FPCOPT+=-Ur -Xs $(FPCCPUOPT) -n
override FPCOPTDEF+=RELEASE
endif
ifdef STRIP
override FPCOPT+=-Xs
endif
ifdef OPTIMIZE
override FPCOPT+=-O2
endif
ifdef VERBOSE
override FPCOPT+=-vwni
endif
ifdef COMPILER_OPTIONS
override FPCOPT+=$(COMPILER_OPTIONS)
endif
ifdef COMPILER_UNITDIR
override FPCOPT+=$(addprefix -Fu,$(COMPILER_UNITDIR))
endif
ifdef COMPILER_LIBRARYDIR
override FPCOPT+=$(addprefix -Fl,$(COMPILER_LIBRARYDIR))
endif
ifdef COMPILER_OBJECTDIR
override FPCOPT+=$(addprefix -Fo,$(COMPILER_OBJECTDIR))
endif
ifdef COMPILER_INCLUDEDIR
override FPCOPT+=$(addprefix -Fi,$(COMPILER_INCLUDEDIR))
endif
ifdef CROSSBINDIR
override FPCOPT+=-FD$(CROSSBINDIR)
endif
ifdef COMPILER_TARGETDIR
override FPCOPT+=-FE$(COMPILER_TARGETDIR)
ifeq ($(COMPILER_TARGETDIR),.)
override TARGETDIRPREFIX=
else
override TARGETDIRPREFIX=$(COMPILER_TARGETDIR)/
endif
endif
ifdef COMPILER_UNITTARGETDIR
override FPCOPT+=-FU$(COMPILER_UNITTARGETDIR)
ifeq ($(COMPILER_UNITTARGETDIR),.)
override UNITTARGETDIRPREFIX=
else
override UNITTARGETDIRPREFIX=$(COMPILER_UNITTARGETDIR)/
endif
else
ifdef COMPILER_TARGETDIR
override COMPILER_UNITTARGETDIR=$(COMPILER_TARGETDIR)
override UNITTARGETDIRPREFIX=$(TARGETDIRPREFIX)
endif
endif
ifdef SYSROOTPATH
override FPCOPT+=-XR$(SYSROOTPATH)
else
ifeq ($(OS_TARGET),$(OS_SOURCE))
ifneq ($(findstring $(OS_TARGET),darwin),)
ifneq ($(findstring $(CPU_TARGET),aarch64),)
ifneq ($(wildcard /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk),)
override FPCOPT+=-XR/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk
endif
endif
endif
endif
endif
ifdef CREATESHARED
override FPCOPT+=-Cg
endif
ifneq ($(findstring $(OS_TARGET),dragonfly freebsd openbsd netbsd linux solaris),)
ifneq ($(findstring $(CPU_TARGET),x86_64 mips mipsel),)
override FPCOPT+=-Cg
endif
endif
ifdef LINKSHARED
endif
ifdef OPT
override FPCOPT+=$(OPT)
endif
ifdef FPMAKEBUILDOPT
override FPMAKE_BUILD_OPT+=$(FPMAKEBUILDOPT)
endif
ifdef FPCOPTDEF
override FPCOPT+=$(addprefix -d,$(FPCOPTDEF))
endif
ifdef CFGFILE
override FPCOPT+=@$(CFGFILE)
endif
ifdef USEENV
override FPCEXTCMD:=$(FPCOPT)
override FPCOPT:=!FPCEXTCMD
export FPCEXTCMD
endif
override AFULL_TARGET=$(CPU_TARGET)-$(OS_TARGET)
override AFULL_SOURCE=$(CPU_SOURCE)-$(OS_SOURCE)
ifneq ($(AFULL_TARGET),$(AFULL_SOURCE))
override ACROSSCOMPILE=1
endif
ifdef ACROSSCOMPILE
override FPCOPT+=$(CROSSOPT)
endif
override COMPILER:=$(strip $(FPC) $(FPCOPT))
ifneq (,$(findstring -sh ,$(COMPILER)))
UseEXECPPAS=1
endif
ifneq (,$(findstring -s ,$(COMPILER)))
ifeq ($(FULL_SOURCE),$(FULL_TARGET))
UseEXECPPAS=1
endif
endif
ifneq ($(UseEXECPPAS),1)
EXECPPAS=
else
ifdef RUNBATCH
EXECPPAS:=@$(RUNBATCH) $(PPAS)
else
EXECPPAS:=@$(PPAS)
endif
endif
ifdef TARGET_RSTS
override RSTFILES=$(addsuffix $(RSTEXT),$(TARGET_RSTS))
override CLEANRSTFILES+=$(RSTFILES)
endif
.PHONY: fpc_clean fpc_cleanall fpc_distclean
ifdef EXEFILES
override CLEANEXEFILES:=$(addprefix $(TARGETDIRPREFIX),$(CLEANEXEFILES))
override CLEANEXEDBGFILES:=$(addprefix $(TARGETDIRPREFIX),$(CLEANEXEDBGFILES))
endif
ifdef CLEAN_PROGRAMS
override CLEANEXEFILES+=$(addprefix $(TARGETDIRPREFIX),$(addsuffix $(EXEEXT), $(CLEAN_PROGRAMS)))
override CLEANEXEDBGFILES+=$(addprefix $(TARGETDIRPREFIX),$(addsuffix $(EXEDBGEXT), $(CLEAN_PROGRAMS)))
endif
ifdef CLEAN_UNITS
override CLEANPPUFILES+=$(addsuffix $(PPUEXT),$(CLEAN_UNITS))
endif
ifdef CLEANPPUFILES
override CLEANPPULINKFILES:=$(subst $(PPUEXT),$(OEXT),$(CLEANPPUFILES)) $(addprefix $(STATICLIBPREFIX),$(subst $(PPUEXT),$(STATICLIBEXT),$(CLEANPPUFILES))) $(addprefix $(IMPORTLIBPREFIX),$(subst $(PPUEXT),$(STATICLIBEXT),$(CLEANPPUFILES)))
ifdef DEBUGSYMEXT
override CLEANPPULINKFILES+=$(subst $(PPUEXT),$(DEBUGSYMEXT),$(CLEANPPUFILES))
endif
override CLEANPPUFILES:=$(addprefix $(UNITTARGETDIRPREFIX),$(CLEANPPUFILES))
override CLEANPPULINKFILES:=$(wildcard $(addprefix $(UNITTARGETDIRPREFIX),$(CLEANPPULINKFILES)))
endif
fpc_clean: $(CLEANTARGET)
ifdef CLEANEXEFILES
	-$(DEL) $(CLEANEXEFILES)
endif
ifdef CLEANEXEDBGFILES
	-$(DELTREE) $(CLEANEXEDBGFILES)
endif
ifdef CLEANPPUFILES
	-$(DEL) $(CLEANPPUFILES)
endif
ifneq ($(CLEANPPULINKFILES),)
	-$(DEL) $(CLEANPPULINKFILES)
endif
ifdef CLEANRSTFILES
	-$(DEL) $(addprefix $(UNITTARGETDIRPREFIX),$(CLEANRSTFILES))
endif
ifdef CLEAN_FILES
	-$(DEL) $(CLEAN_FILES)
endif
ifdef LIB_NAME
	-$(DEL) $(LIB_NAME) $(LIB_FULLNAME)
endif
	-$(DEL) $(FPCMADE) Package.fpc $(PPAS) script.res link.res $(FPCEXTFILE) $(REDIRFILE)
	-$(DEL) *$(ASMEXT) *_ppas$(BATCHEXT) ppas$(BATCHEXT) ppaslink$(BATCHEXT)
fpc_cleanall: $(CLEANTARGET)
ifdef CLEANEXEFILES
	-$(DEL) $(CLEANEXEFILES)
endif
ifdef COMPILER_UNITTARGETDIR
ifdef CLEANPPUFILES
	-$(DEL) $(CLEANPPUFILES)
endif
ifneq ($(CLEANPPULINKFILES),)
	-$(DEL) $(CLEANPPULINKFILES)
endif
ifdef CLEANRSTFILES
	-$(DEL) $(addprefix $(UNITTARGETDIRPREFIX),$(CLEANRSTFILES))
endif
endif
ifdef CLEAN_FILES
	-$(DEL) $(CLEAN_FILES)
endif
	-$(DELTREE) units
	-$(DELTREE) bin
	-$(DEL) *$(OEXT) *$(PPUEXT) *$(RSTEXT) *$(ASMEXT) *$(STATICLIBEXT) *$(SHAREDLIBEXT) *$(PPLEXT)
ifneq ($(PPUEXT),.ppu)
	-$(DEL) *.o *.ppu *.a
endif
	-$(DELTREE) *$(SMARTEXT)
	-$(DEL) fpcmade.* Package.fpc $(PPAS) script.res link.res $(FPCEXTFILE) $(REDIRFILE)
	-$(DEL) *_ppas$(BATCHEXT) ppas$(BATCHEXT) ppaslink$(BATCHEXT)
ifdef AOUTEXT
	-$(DEL) *$(AOUTEXT)
endif
ifdef DEBUGSYMEXT
	-$(DEL) *$(DEBUGSYMEXT)
endif
ifdef LOCALFPMAKEBIN
	-$(DEL) $(LOCALFPMAKEBIN)
	-$(DEL) $(FPMAKEBINOBJ)
endif
fpc_distclean: cleanall
.PHONY: fpc_baseinfo
override INFORULES+=fpc_baseinfo
fpc_baseinfo:
	@$(ECHO)
	@$(ECHO)  == Package info ==
	@$(ECHO)  Package Name..... $(PACKAGE_NAME)
	@$(ECHO)  Package Version.. $(PACKAGE_VERSION)
	@$(ECHO)
	@$(ECHO)  == Configuration info ==
	@$(ECHO)
	@$(ECHO)  FPC.......... $(FPC)
	@$(ECHO)  FPC Version.. $(FPC_VERSION)
	@$(ECHO)  Source CPU... $(CPU_SOURCE)
	@$(ECHO)  Target CPU... $(CPU_TARGET)
	@$(ECHO)  Source OS.... $(OS_SOURCE)
	@$(ECHO)  Target OS.... $(OS_TARGET)
	@$(ECHO)  Full Source.. $(FULL_SOURCE)
	@$(ECHO)  Full Target.. $(FULL_TARGET)
	@$(ECHO)  SourceSuffix. $(SOURCESUFFIX)
	@$(ECHO)  TargetSuffix. $(TARGETSUFFIX)
	@$(ECHO)  FPC fpmake... $(FPCFPMAKE)
	@$(ECHO)
	@$(ECHO)  == Directory info ==
	@$(ECHO)
	@$(ECHO)  Required pkgs... $(REQUIRE_PACKAGES)
	@$(ECHO)
	@$(ECHO)  Basedir......... $(BASEDIR)
	@$(ECHO)  FPCDir.......... $(FPCDIR)
	@$(ECHO)  CrossBinDir..... $(CROSSBINDIR)
	@$(ECHO)  UnitsDir........ $(UNITSDIR)
	@$(ECHO)  PackagesDir..... $(PACKAGESDIR)
	@$(ECHO)
	@$(ECHO)  GCC library..... $(GCCLIBDIR)
	@$(ECHO)  Other library... $(OTHERLIBDIR)
	@$(ECHO)
	@$(ECHO)  == Tools info ==
	@$(ECHO)
	@$(ECHO)  As........ $(AS)
	@$(ECHO)  Ld........ $(LD)
	@$(ECHO)  Ar........ $(AR)
	@$(ECHO)  Rc........ $(RC)
	@$(ECHO)
	@$(ECHO)  Mv........ $(MVPROG)
	@$(ECHO)  Cp........ $(CPPROG)
	@$(ECHO)  Rm........ $(RMPROG)
	@$(ECHO)  GInstall.. $(GINSTALL)
	@$(ECHO)  Echo...... $(ECHO)
	@$(ECHO)  Shell..... $(SHELL)
	@$(ECHO)  Date...... $(DATE)
	@$(ECHO)  FPCMake... $(FPCMAKE)
	@$(ECHO)  PPUMove... $(PPUMOVE)
	@$(ECHO)  Zip....... $(ZIPPROG)
	@$(ECHO)
	@$(ECHO)  == Object info ==
	@$(ECHO)
	@$(ECHO)  Target Loaders........ $(TARGET_LOADERS)
	@$(ECHO)  Target Units.......... $(TARGET_UNITS)
	@$(ECHO)  Target Implicit Units. $(TARGET_IMPLICITUNITS)
	@$(ECHO)  Target Programs....... $(TARGET_PROGRAMS)
	@$(ECHO)  Target Dirs........... $(TARGET_DIRS)
	@$(ECHO)  Target Examples....... $(TARGET_EXAMPLES)
	@$(ECHO)  Target ExampleDirs.... $(TARGET_EXAMPLEDIRS)
	@$(ECHO)
	@$(ECHO)  Clean Units......... $(CLEAN_UNITS)
	@$(ECHO)  Clean Files......... $(CLEAN_FILES)
	@$(ECHO)
	@$(ECHO)  Install Units....... $(INSTALL_UNITS)
	@$(ECHO)  Install Files....... $(INSTALL_FILES)
	@$(ECHO)
	@$(ECHO)  == Install info ==
	@$(ECHO)
	@$(ECHO)  DateStr.............. $(DATESTR)
	@$(ECHO)  ZipName.............. $(ZIPNAME)
	@$(ECHO)  ZipPrefix............ $(ZIPPREFIX)
	@$(ECHO)  ZipCrossPrefix....... $(ZIPCROSSPREFIX)
	@$(ECHO)  ZipSuffix............ $(ZIPSUFFIX)
	@$(ECHO)  FullZipName.......... $(FULLZIPNAME)
	@$(ECHO)  Install FPC Package.. $(INSTALL_FPCPACKAGE)
	@$(ECHO)
	@$(ECHO)  Install base dir..... $(INSTALL_BASEDIR)
	@$(ECHO)  Install binary dir... $(INSTALL_BINDIR)
	@$(ECHO)  Install library dir.. $(INSTALL_LIBDIR)
	@$(ECHO)  Install units dir.... $(INSTALL_UNITDIR)
	@$(ECHO)  Install source dir... $(INSTALL_SOURCEDIR)
	@$(ECHO)  Install doc dir...... $(INSTALL_DOCDIR)
	@$(ECHO)  Install example dir.. $(INSTALL_EXAMPLEDIR)
	@$(ECHO)  Install data dir..... $(INSTALL_DATADIR)
	@$(ECHO)
	@$(ECHO)  Dist destination dir. $(DIST_DESTDIR)
	@$(ECHO)  Dist zip name........ $(DIST_ZIPNAME)
	@$(ECHO)
.PHONY: fpc_info
fpc_info: $(INFORULES)
.PHONY: fpc_makefile fpc_makefiles fpc_makefile_sub1 fpc_makefile_sub2 \
	fpc_makefile_dirs
fpc_makefile:
	$(FPCMAKE) -w -T$(OS_TARGET) Makefile.fpc
fpc_makefile_sub1:
ifdef TARGET_DIRS
	$(FPCMAKE) -w -T$(OS_TARGET) $(addsuffix /Makefile.fpc,$(TARGET_DIRS))
endif
ifdef TARGET_EXAMPLEDIRS
	$(FPCMAKE) -w -T$(OS_TARGET) $(addsuffix /Makefile.fpc,$(TARGET_EXAMPLEDIRS))
endif
fpc_makefile_sub2: $(addsuffix _makefile_dirs,$(TARGET_DIRS) $(TARGET_EXAMPLEDIRS))
fpc_makefile_dirs: fpc_makefile_sub1 fpc_makefile_sub2
fpc_makefiles: fpc_makefile fpc_makefile_dirs
ifeq ($(FULL_TARGET),i386-linux)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),i386-go32v2)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),i386-win32)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),i386-os2)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),i386-freebsd)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),i386-beos)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),i386-haiku)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),i386-netbsd)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),i386-solaris)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),i386-netware)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),i386-openbsd)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),i386-wdosx)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),i386-darwin)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),i386-emx)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),i386-watcom)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),i386-netwlibc)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),i386-wince)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),i386-embedded)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),i386-symbian)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),i386-nativent)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),i386-iphonesim)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),i386-android)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),i386-aros)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),m68k-linux)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),m68k-netbsd)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),m68k-amiga)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),m68k-atari)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),m68k-palmos)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),m68k-macosclassic)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),m68k-embedded)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),powerpc-linux)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),powerpc-netbsd)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),powerpc-amiga)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),powerpc-macosclassic)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),powerpc-darwin)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),powerpc-morphos)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),powerpc-embedded)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),powerpc-wii)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),powerpc-aix)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),sparc-linux)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),sparc-netbsd)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),sparc-solaris)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),sparc-embedded)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),x86_64-linux)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),x86_64-freebsd)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),x86_64-haiku)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),x86_64-netbsd)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),x86_64-solaris)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),x86_64-openbsd)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),x86_64-darwin)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),x86_64-win64)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),x86_64-embedded)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),x86_64-iphonesim)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),x86_64-android)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),x86_64-aros)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),x86_64-dragonfly)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),arm-linux)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),arm-netbsd)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),arm-palmos)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),arm-wince)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),arm-gba)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),arm-nds)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),arm-embedded)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),arm-symbian)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),arm-android)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),arm-aros)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),arm-ios)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),powerpc64-linux)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),powerpc64-darwin)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),powerpc64-embedded)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),powerpc64-aix)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),avr-embedded)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),armeb-linux)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),armeb-embedded)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),mips-linux)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),mipsel-linux)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),mipsel-embedded)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),mipsel-android)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),jvm-java)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),jvm-android)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),i8086-embedded)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),i8086-msdos)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),i8086-win16)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),aarch64-linux)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),aarch64-darwin)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),aarch64-android)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),aarch64-ios)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),wasm-wasm)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifeq ($(FULL_TARGET),sparc64-linux)
TARGET_DIRS_HELLOWORLD=1
TARGET_DIRS_HELLOWORLD2=1
TARGET_DIRS_GTK_DEMO=1
TARGET_DIRS_GETTINGSTARTED=1
TARGET_DIRS_PLUGINS=1
TARGET_DIRS_SCRIBBLE_SIMPLE=1
TARGET_DIRS_GTKGLEXT=1
endif
ifdef TARGET_DIRS_HELLOWORLD
helloworld_all:
	$(MAKE) -C helloworld all
helloworld_debug:
	$(MAKE) -C helloworld debug
helloworld_smart:
	$(MAKE) -C helloworld smart
helloworld_release:
	$(MAKE) -C helloworld release
helloworld_units:
	$(MAKE) -C helloworld units
helloworld_examples:
	$(MAKE) -C helloworld examples
helloworld_shared:
	$(MAKE) -C helloworld shared
helloworld_install:
	$(MAKE) -C helloworld install
helloworld_sourceinstall:
	$(MAKE) -C helloworld sourceinstall
helloworld_exampleinstall:
	$(MAKE) -C helloworld exampleinstall
helloworld_distinstall:
	$(MAKE) -C helloworld distinstall
helloworld_zipinstall:
	$(MAKE) -C helloworld zipinstall
helloworld_zipsourceinstall:
	$(MAKE) -C helloworld zipsourceinstall
helloworld_zipexampleinstall:
	$(MAKE) -C helloworld zipexampleinstall
helloworld_zipdistinstall:
	$(MAKE) -C helloworld zipdistinstall
helloworld_clean:
	$(MAKE) -C helloworld clean
helloworld_distclean:
	$(MAKE) -C helloworld distclean
helloworld_cleanall:
	$(MAKE) -C helloworld cleanall
helloworld_info:
	$(MAKE) -C helloworld info
helloworld_makefiles:
	$(MAKE) -C helloworld makefiles
helloworld:
	$(MAKE) -C helloworld all
.PHONY: helloworld_all helloworld_debug helloworld_smart helloworld_release helloworld_units helloworld_examples helloworld_shared helloworld_install helloworld_sourceinstall helloworld_exampleinstall helloworld_distinstall helloworld_zipinstall helloworld_zipsourceinstall helloworld_zipexampleinstall helloworld_zipdistinstall helloworld_clean helloworld_distclean helloworld_cleanall helloworld_info helloworld_makefiles helloworld
endif
ifdef TARGET_DIRS_HELLOWORLD2
helloworld2_all:
	$(MAKE) -C helloworld2 all
helloworld2_debug:
	$(MAKE) -C helloworld2 debug
helloworld2_smart:
	$(MAKE) -C helloworld2 smart
helloworld2_release:
	$(MAKE) -C helloworld2 release
helloworld2_units:
	$(MAKE) -C helloworld2 units
helloworld2_examples:
	$(MAKE) -C helloworld2 examples
helloworld2_shared:
	$(MAKE) -C helloworld2 shared
helloworld2_install:
	$(MAKE) -C helloworld2 install
helloworld2_sourceinstall:
	$(MAKE) -C helloworld2 sourceinstall
helloworld2_exampleinstall:
	$(MAKE) -C helloworld2 exampleinstall
helloworld2_distinstall:
	$(MAKE) -C helloworld2 distinstall
helloworld2_zipinstall:
	$(MAKE) -C helloworld2 zipinstall
helloworld2_zipsourceinstall:
	$(MAKE) -C helloworld2 zipsourceinstall
helloworld2_zipexampleinstall:
	$(MAKE) -C helloworld2 zipexampleinstall
helloworld2_zipdistinstall:
	$(MAKE) -C helloworld2 zipdistinstall
helloworld2_clean:
	$(MAKE) -C helloworld2 clean
helloworld2_distclean:
	$(MAKE) -C helloworld2 distclean
helloworld2_cleanall:
	$(MAKE) -C helloworld2 cleanall
helloworld2_info:
	$(MAKE) -C helloworld2 info
helloworld2_makefiles:
	$(MAKE) -C helloworld2 makefiles
helloworld2:
	$(MAKE) -C helloworld2 all
.PHONY: helloworld2_all helloworld2_debug helloworld2_smart helloworld2_release helloworld2_units helloworld2_examples helloworld2_shared helloworld2_install helloworld2_sourceinstall helloworld2_exampleinstall helloworld2_distinstall helloworld2_zipinstall helloworld2_zipsourceinstall helloworld2_zipexampleinstall helloworld2_zipdistinstall helloworld2_clean helloworld2_distclean helloworld2_cleanall helloworld2_info helloworld2_makefiles helloworld2
endif
ifdef TARGET_DIRS_GTK_DEMO
gtk_demo_all:
	$(MAKE) -C gtk_demo all
gtk_demo_debug:
	$(MAKE) -C gtk_demo debug
gtk_demo_smart:
	$(MAKE) -C gtk_demo smart
gtk_demo_release:
	$(MAKE) -C gtk_demo release
gtk_demo_units:
	$(MAKE) -C gtk_demo units
gtk_demo_examples:
	$(MAKE) -C gtk_demo examples
gtk_demo_shared:
	$(MAKE) -C gtk_demo shared
gtk_demo_install:
	$(MAKE) -C gtk_demo install
gtk_demo_sourceinstall:
	$(MAKE) -C gtk_demo sourceinstall
gtk_demo_exampleinstall:
	$(MAKE) -C gtk_demo exampleinstall
gtk_demo_distinstall:
	$(MAKE) -C gtk_demo distinstall
gtk_demo_zipinstall:
	$(MAKE) -C gtk_demo zipinstall
gtk_demo_zipsourceinstall:
	$(MAKE) -C gtk_demo zipsourceinstall
gtk_demo_zipexampleinstall:
	$(MAKE) -C gtk_demo zipexampleinstall
gtk_demo_zipdistinstall:
	$(MAKE) -C gtk_demo zipdistinstall
gtk_demo_clean:
	$(MAKE) -C gtk_demo clean
gtk_demo_distclean:
	$(MAKE) -C gtk_demo distclean
gtk_demo_cleanall:
	$(MAKE) -C gtk_demo cleanall
gtk_demo_info:
	$(MAKE) -C gtk_demo info
gtk_demo_makefiles:
	$(MAKE) -C gtk_demo makefiles
gtk_demo:
	$(MAKE) -C gtk_demo all
.PHONY: gtk_demo_all gtk_demo_debug gtk_demo_smart gtk_demo_release gtk_demo_units gtk_demo_examples gtk_demo_shared gtk_demo_install gtk_demo_sourceinstall gtk_demo_exampleinstall gtk_demo_distinstall gtk_demo_zipinstall gtk_demo_zipsourceinstall gtk_demo_zipexampleinstall gtk_demo_zipdistinstall gtk_demo_clean gtk_demo_distclean gtk_demo_cleanall gtk_demo_info gtk_demo_makefiles gtk_demo
endif
ifdef TARGET_DIRS_GETTINGSTARTED
gettingstarted_all:
	$(MAKE) -C gettingstarted all
gettingstarted_debug:
	$(MAKE) -C gettingstarted debug
gettingstarted_smart:
	$(MAKE) -C gettingstarted smart
gettingstarted_release:
	$(MAKE) -C gettingstarted release
gettingstarted_units:
	$(MAKE) -C gettingstarted units
gettingstarted_examples:
	$(MAKE) -C gettingstarted examples
gettingstarted_shared:
	$(MAKE) -C gettingstarted shared
gettingstarted_install:
	$(MAKE) -C gettingstarted install
gettingstarted_sourceinstall:
	$(MAKE) -C gettingstarted sourceinstall
gettingstarted_exampleinstall:
	$(MAKE) -C gettingstarted exampleinstall
gettingstarted_distinstall:
	$(MAKE) -C gettingstarted distinstall
gettingstarted_zipinstall:
	$(MAKE) -C gettingstarted zipinstall
gettingstarted_zipsourceinstall:
	$(MAKE) -C gettingstarted zipsourceinstall
gettingstarted_zipexampleinstall:
	$(MAKE) -C gettingstarted zipexampleinstall
gettingstarted_zipdistinstall:
	$(MAKE) -C gettingstarted zipdistinstall
gettingstarted_clean:
	$(MAKE) -C gettingstarted clean
gettingstarted_distclean:
	$(MAKE) -C gettingstarted distclean
gettingstarted_cleanall:
	$(MAKE) -C gettingstarted cleanall
gettingstarted_info:
	$(MAKE) -C gettingstarted info
gettingstarted_makefiles:
	$(MAKE) -C gettingstarted makefiles
gettingstarted:
	$(MAKE) -C gettingstarted all
.PHONY: gettingstarted_all gettingstarted_debug gettingstarted_smart gettingstarted_release gettingstarted_units gettingstarted_examples gettingstarted_shared gettingstarted_install gettingstarted_sourceinstall gettingstarted_exampleinstall gettingstarted_distinstall gettingstarted_zipinstall gettingstarted_zipsourceinstall gettingstarted_zipexampleinstall gettingstarted_zipdistinstall gettingstarted_clean gettingstarted_distclean gettingstarted_cleanall gettingstarted_info gettingstarted_makefiles gettingstarted
endif
ifdef TARGET_DIRS_PLUGINS
plugins_all:
	$(MAKE) -C plugins all
plugins_debug:
	$(MAKE) -C plugins debug
plugins_smart:
	$(MAKE) -C plugins smart
plugins_release:
	$(MAKE) -C plugins release
plugins_units:
	$(MAKE) -C plugins units
plugins_examples:
	$(MAKE) -C plugins examples
plugins_shared:
	$(MAKE) -C plugins shared
plugins_install:
	$(MAKE) -C plugins install
plugins_sourceinstall:
	$(MAKE) -C plugins sourceinstall
plugins_exampleinstall:
	$(MAKE) -C plugins exampleinstall
plugins_distinstall:
	$(MAKE) -C plugins distinstall
plugins_zipinstall:
	$(MAKE) -C plugins zipinstall
plugins_zipsourceinstall:
	$(MAKE) -C plugins zipsourceinstall
plugins_zipexampleinstall:
	$(MAKE) -C plugins zipexampleinstall
plugins_zipdistinstall:
	$(MAKE) -C plugins zipdistinstall
plugins_clean:
	$(MAKE) -C plugins clean
plugins_distclean:
	$(MAKE) -C plugins distclean
plugins_cleanall:
	$(MAKE) -C plugins cleanall
plugins_info:
	$(MAKE) -C plugins info
plugins_makefiles:
	$(MAKE) -C plugins makefiles
plugins:
	$(MAKE) -C plugins all
.PHONY: plugins_all plugins_debug plugins_smart plugins_release plugins_units plugins_examples plugins_shared plugins_install plugins_sourceinstall plugins_exampleinstall plugins_distinstall plugins_zipinstall plugins_zipsourceinstall plugins_zipexampleinstall plugins_zipdistinstall plugins_clean plugins_distclean plugins_cleanall plugins_info plugins_makefiles plugins
endif
ifdef TARGET_DIRS_SCRIBBLE_SIMPLE
scribble_simple_all:
	$(MAKE) -C scribble_simple all
scribble_simple_debug:
	$(MAKE) -C scribble_simple debug
scribble_simple_smart:
	$(MAKE) -C scribble_simple smart
scribble_simple_release:
	$(MAKE) -C scribble_simple release
scribble_simple_units:
	$(MAKE) -C scribble_simple units
scribble_simple_examples:
	$(MAKE) -C scribble_simple examples
scribble_simple_shared:
	$(MAKE) -C scribble_simple shared
scribble_simple_install:
	$(MAKE) -C scribble_simple install
scribble_simple_sourceinstall:
	$(MAKE) -C scribble_simple sourceinstall
scribble_simple_exampleinstall:
	$(MAKE) -C scribble_simple exampleinstall
scribble_simple_distinstall:
	$(MAKE) -C scribble_simple distinstall
scribble_simple_zipinstall:
	$(MAKE) -C scribble_simple zipinstall
scribble_simple_zipsourceinstall:
	$(MAKE) -C scribble_simple zipsourceinstall
scribble_simple_zipexampleinstall:
	$(MAKE) -C scribble_simple zipexampleinstall
scribble_simple_zipdistinstall:
	$(MAKE) -C scribble_simple zipdistinstall
scribble_simple_clean:
	$(MAKE) -C scribble_simple clean
scribble_simple_distclean:
	$(MAKE) -C scribble_simple distclean
scribble_simple_cleanall:
	$(MAKE) -C scribble_simple cleanall
scribble_simple_info:
	$(MAKE) -C scribble_simple info
scribble_simple_makefiles:
	$(MAKE) -C scribble_simple makefiles
scribble_simple:
	$(MAKE) -C scribble_simple all
.PHONY: scribble_simple_all scribble_simple_debug scribble_simple_smart scribble_simple_release scribble_simple_units scribble_simple_examples scribble_simple_shared scribble_simple_install scribble_simple_sourceinstall scribble_simple_exampleinstall scribble_simple_distinstall scribble_simple_zipinstall scribble_simple_zipsourceinstall scribble_simple_zipexampleinstall scribble_simple_zipdistinstall scribble_simple_clean scribble_simple_distclean scribble_simple_cleanall scribble_simple_info scribble_simple_makefiles scribble_simple
endif
ifdef TARGET_DIRS_GTKGLEXT
gtkglext_all:
	$(MAKE) -C gtkglext all
gtkglext_debug:
	$(MAKE) -C gtkglext debug
gtkglext_smart:
	$(MAKE) -C gtkglext smart
gtkglext_release:
	$(MAKE) -C gtkglext release
gtkglext_units:
	$(MAKE) -C gtkglext units
gtkglext_examples:
	$(MAKE) -C gtkglext examples
gtkglext_shared:
	$(MAKE) -C gtkglext shared
gtkglext_install:
	$(MAKE) -C gtkglext install
gtkglext_sourceinstall:
	$(MAKE) -C gtkglext sourceinstall
gtkglext_exampleinstall:
	$(MAKE) -C gtkglext exampleinstall
gtkglext_distinstall:
	$(MAKE) -C gtkglext distinstall
gtkglext_zipinstall:
	$(MAKE) -C gtkglext zipinstall
gtkglext_zipsourceinstall:
	$(MAKE) -C gtkglext zipsourceinstall
gtkglext_zipexampleinstall:
	$(MAKE) -C gtkglext zipexampleinstall
gtkglext_zipdistinstall:
	$(MAKE) -C gtkglext zipdistinstall
gtkglext_clean:
	$(MAKE) -C gtkglext clean
gtkglext_distclean:
	$(MAKE) -C gtkglext distclean
gtkglext_cleanall:
	$(MAKE) -C gtkglext cleanall
gtkglext_info:
	$(MAKE) -C gtkglext info
gtkglext_makefiles:
	$(MAKE) -C gtkglext makefiles
gtkglext:
	$(MAKE) -C gtkglext all
.PHONY: gtkglext_all gtkglext_debug gtkglext_smart gtkglext_release gtkglext_units gtkglext_examples gtkglext_shared gtkglext_install gtkglext_sourceinstall gtkglext_exampleinstall gtkglext_distinstall gtkglext_zipinstall gtkglext_zipsourceinstall gtkglext_zipexampleinstall gtkglext_zipdistinstall gtkglext_clean gtkglext_distclean gtkglext_cleanall gtkglext_info gtkglext_makefiles gtkglext
endif
all: $(addsuffix _all,$(TARGET_DIRS))
debug: $(addsuffix _debug,$(TARGET_DIRS))
smart: $(addsuffix _smart,$(TARGET_DIRS))
release: $(addsuffix _release,$(TARGET_DIRS))
units: $(addsuffix _units,$(TARGET_DIRS))
examples: $(addsuffix _examples,$(TARGET_DIRS))
shared: $(addsuffix _shared,$(TARGET_DIRS))
install: $(addsuffix _install,$(TARGET_DIRS))
sourceinstall: $(addsuffix _sourceinstall,$(TARGET_DIRS))
exampleinstall: $(addsuffix _exampleinstall,$(TARGET_DIRS))
distinstall: $(addsuffix _distinstall,$(TARGET_DIRS))
zipinstall: $(addsuffix _zipinstall,$(TARGET_DIRS))
zipsourceinstall: $(addsuffix _zipsourceinstall,$(TARGET_DIRS))
zipexampleinstall: $(addsuffix _zipexampleinstall,$(TARGET_DIRS))
zipdistinstall: $(addsuffix _zipdistinstall,$(TARGET_DIRS))
clean: $(addsuffix _clean,$(TARGET_DIRS))
distclean: $(addsuffix _distclean,$(TARGET_DIRS))
cleanall: $(addsuffix _cleanall,$(TARGET_DIRS))
info: fpc_info
makefiles: fpc_makefiles $(addsuffix _makefiles,$(TARGET_DIRS))
.PHONY: all debug smart release units examples shared install sourceinstall exampleinstall distinstall zipinstall zipsourceinstall zipexampleinstall zipdistinstall clean distclean cleanall info makefiles
ifneq ($(wildcard fpcmake.loc),)
include fpcmake.loc
endif
.NOTPARALLEL:
