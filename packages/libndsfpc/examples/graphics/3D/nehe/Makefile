#
# Don't edit, this file is generated by FPCMake Version 2.0.0
#
default: all
MAKEFILETARGETS=i386-linux i386-go32v2 i386-win32 i386-os2 i386-freebsd i386-beos i386-haiku i386-netbsd i386-solaris i386-netware i386-openbsd i386-wdosx i386-darwin i386-emx i386-watcom i386-netwlibc i386-wince i386-embedded i386-symbian i386-nativent i386-iphonesim i386-android i386-aros m68k-linux m68k-netbsd m68k-amiga m68k-atari m68k-palmos m68k-macosclassic m68k-embedded powerpc-linux powerpc-netbsd powerpc-amiga powerpc-macosclassic powerpc-darwin powerpc-morphos powerpc-embedded powerpc-wii powerpc-aix sparc-linux sparc-netbsd sparc-solaris sparc-embedded x86_64-linux x86_64-freebsd x86_64-haiku x86_64-netbsd x86_64-solaris x86_64-openbsd x86_64-darwin x86_64-win64 x86_64-embedded x86_64-iphonesim x86_64-android x86_64-aros x86_64-dragonfly arm-linux arm-netbsd arm-palmos arm-wince arm-gba arm-nds arm-embedded arm-symbian arm-android arm-aros arm-ios powerpc64-linux powerpc64-darwin powerpc64-embedded powerpc64-aix avr-embedded armeb-linux armeb-embedded mips-linux mipsel-linux mipsel-embedded mipsel-android jvm-java jvm-android i8086-embedded i8086-msdos i8086-win16 aarch64-linux aarch64-darwin aarch64-android aarch64-ios wasm-wasm sparc64-linux
BSDs = freebsd netbsd openbsd darwin dragonfly
UNIXs = linux $(BSDs) solaris qnx haiku aix
LIMIT83fs = go32v2 os2 emx watcom msdos win16 atari
OSNeedsComspecToRunBatch = go32v2 watcom
FORCE:
.PHONY: FORCE
override PATH:=$(patsubst %/,%,$(subst \,/,$(PATH)))
ifneq ($(findstring darwin,$(OSTYPE)),)
inUnix=1 #darwin
SEARCHPATH:=$(filter-out .,$(subst :, ,$(PATH)))
else
ifeq ($(findstring ;,$(PATH)),)
inUnix=1
SEARCHPATH:=$(filter-out .,$(subst :, ,$(PATH)))
else
SEARCHPATH:=$(subst ;, ,$(PATH))
endif
endif
SEARCHPATH+=$(patsubst %/,%,$(subst \,/,$(dir $(MAKE))))
PWD:=$(strip $(wildcard $(addsuffix /pwd.exe,$(SEARCHPATH))))
ifeq ($(PWD),)
PWD:=$(strip $(wildcard $(addsuffix /pwd,$(SEARCHPATH))))
ifeq ($(PWD),)
$(error You need the GNU utils package to use this Makefile)
else
PWD:=$(firstword $(PWD))
SRCEXEEXT=
endif
else
PWD:=$(firstword $(PWD))
SRCEXEEXT=.exe
endif
ifndef inUnix
ifeq ($(OS),Windows_NT)
inWinNT=1
else
ifdef OS2_SHELL
inOS2=1
endif
endif
else
ifneq ($(findstring cygdrive,$(PATH)),)
inCygWin=1
endif
endif
ifdef inUnix
SRCBATCHEXT=.sh
else
ifdef inOS2
SRCBATCHEXT=.cmd
else
SRCBATCHEXT=.bat
endif
endif
ifdef COMSPEC
ifneq ($(findstring $(OS_SOURCE),$(OSNeedsComspecToRunBatch)),)
ifndef RUNBATCH
RUNBATCH=$(COMSPEC) /C
endif
endif
endif
ifdef inUnix
PATHSEP=/
else
PATHSEP:=$(subst /,\,/)
ifdef inCygWin
PATHSEP=/
endif
endif
ifdef PWD
BASEDIR:=$(subst \,/,$(shell $(PWD)))
ifdef inCygWin
ifneq ($(findstring /cygdrive/,$(BASEDIR)),)
BASENODIR:=$(patsubst /cygdrive%,%,$(BASEDIR))
BASEDRIVE:=$(firstword $(subst /, ,$(BASENODIR)))
BASEDIR:=$(subst /cygdrive/$(BASEDRIVE)/,$(BASEDRIVE):/,$(BASEDIR))
endif
endif
else
BASEDIR=.
endif
ifdef inOS2
ifndef ECHO
ECHO:=$(strip $(wildcard $(addsuffix /gecho$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO:=$(strip $(wildcard $(addsuffix /echo$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO=echo
else
ECHO:=$(firstword $(ECHO))
endif
else
ECHO:=$(firstword $(ECHO))
endif
endif
export ECHO
endif
override DEFAULT_FPCDIR=../../../../../..
ifndef FPC
ifdef PP
FPC=$(PP)
endif
endif
ifndef FPC
FPCPROG:=$(strip $(wildcard $(addsuffix /fpc$(SRCEXEEXT),$(SEARCHPATH))))
ifneq ($(FPCPROG),)
FPCPROG:=$(firstword $(FPCPROG))
ifneq ($(CPU_TARGET),)
FPC:=$(shell $(FPCPROG) -P$(CPU_TARGET) -PB)
else
FPC:=$(shell $(FPCPROG) -PB)
endif
ifneq ($(findstring Error,$(FPC)),)
override FPC=$(firstword $(strip $(wildcard $(addsuffix /ppc386$(SRCEXEEXT),$(SEARCHPATH)))))
else
ifeq ($(strip $(wildcard $(FPC))),)
FPC:=$(firstword $(FPCPROG))
endif
endif
else
override FPC=$(firstword $(strip $(wildcard $(addsuffix /ppc386$(SRCEXEEXT),$(SEARCHPATH)))))
endif
endif
override FPC:=$(subst $(SRCEXEEXT),,$(FPC))
override FPC:=$(subst \,/,$(FPC))$(SRCEXEEXT)
FOUNDFPC:=$(strip $(wildcard $(FPC)))
ifeq ($(FOUNDFPC),)
FOUNDFPC=$(strip $(wildcard $(addsuffix /$(FPC),$(SEARCHPATH))))
ifeq ($(FOUNDFPC),)
$(error Compiler $(FPC) not found)
endif
endif
ifndef FPC_COMPILERINFO
FPC_COMPILERINFO:=$(shell $(FPC) -iVSPTPSOTO)
endif
ifndef FPC_VERSION
FPC_VERSION:=$(word 1,$(FPC_COMPILERINFO))
endif
export FPC FPC_VERSION FPC_COMPILERINFO
unexport CHECKDEPEND ALLDEPENDENCIES
ifndef CPU_TARGET
ifdef CPU_TARGET_DEFAULT
CPU_TARGET=$(CPU_TARGET_DEFAULT)
endif
endif
ifndef OS_TARGET
ifdef OS_TARGET_DEFAULT
OS_TARGET=$(OS_TARGET_DEFAULT)
endif
endif
ifndef CPU_SOURCE
CPU_SOURCE:=$(word 2,$(FPC_COMPILERINFO))
endif
ifndef CPU_TARGET
CPU_TARGET:=$(word 3,$(FPC_COMPILERINFO))
endif
ifndef OS_SOURCE
OS_SOURCE:=$(word 4,$(FPC_COMPILERINFO))
endif
ifndef OS_TARGET
OS_TARGET:=$(word 5,$(FPC_COMPILERINFO))
endif
FULL_TARGET=$(CPU_TARGET)-$(OS_TARGET)
FULL_SOURCE=$(CPU_SOURCE)-$(OS_SOURCE)
ifeq ($(CPU_TARGET),armeb)
ARCH=arm
override FPCOPT+=-Cb
else
ifeq ($(CPU_TARGET),armel)
ARCH=arm
override FPCOPT+=-CaEABI
else
ARCH=$(CPU_TARGET)
endif
endif
ifeq ($(FULL_TARGET),arm-embedded)
ifeq ($(SUBARCH),)
$(error When compiling for arm-embedded, a sub-architecture (e.g. SUBARCH=armv4t or SUBARCH=armv7m) must be defined)
endif
override FPCOPT+=-Cp$(SUBARCH)
endif
ifeq ($(FULL_TARGET),avr-embedded)
ifeq ($(SUBARCH),)
$(error When compiling for avr-embedded, a sub-architecture (e.g. SUBARCH=avr25 or SUBARCH=avr35) must be defined)
endif
override FPCOPT+=-Cp$(SUBARCH)
endif
ifeq ($(FULL_TARGET),mipsel-embedded)
ifeq ($(SUBARCH),)
$(error When compiling for mipsel-embedded, a sub-architecture (e.g. SUBARCH=pic32mx) must be defined)
endif
override FPCOPT+=-Cp$(SUBARCH)
endif
ifneq ($(findstring $(OS_SOURCE),$(LIMIT83fs)),)
TARGETSUFFIX=$(OS_TARGET)
SOURCESUFFIX=$(OS_SOURCE)
else
ifneq ($(findstring $(OS_TARGET),$(LIMIT83fs)),)
TARGETSUFFIX=$(OS_TARGET)
else
TARGETSUFFIX=$(FULL_TARGET)
endif
SOURCESUFFIX=$(FULL_SOURCE)
endif
ifneq ($(FULL_TARGET),$(FULL_SOURCE))
CROSSCOMPILE=1
endif
ifeq ($(findstring makefile,$(MAKECMDGOALS)),)
ifeq ($(findstring $(FULL_TARGET),$(MAKEFILETARGETS)),)
$(error The Makefile doesn't support target $(FULL_TARGET), please run fpcmake first)
endif
endif
ifneq ($(findstring $(OS_TARGET),$(BSDs)),)
BSDhier=1
endif
ifeq ($(OS_TARGET),linux)
linuxHier=1
endif
ifndef CROSSCOMPILE
BUILDFULLNATIVE=1
export BUILDFULLNATIVE
endif
ifdef BUILDFULLNATIVE
BUILDNATIVE=1
export BUILDNATIVE
endif
export OS_TARGET OS_SOURCE ARCH CPU_TARGET CPU_SOURCE FULL_TARGET FULL_SOURCE TARGETSUFFIX SOURCESUFFIX CROSSCOMPILE
ifdef FPCDIR
override FPCDIR:=$(subst \,/,$(FPCDIR))
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl)),)
override FPCDIR=wrong
endif
else
override FPCDIR=wrong
endif
ifdef DEFAULT_FPCDIR
ifeq ($(FPCDIR),wrong)
override FPCDIR:=$(subst \,/,$(DEFAULT_FPCDIR))
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl)),)
override FPCDIR=wrong
endif
endif
endif
ifeq ($(FPCDIR),wrong)
ifdef inUnix
override FPCDIR=/usr/local/lib/fpc/$(FPC_VERSION)
ifeq ($(wildcard $(FPCDIR)/units),)
override FPCDIR=/usr/lib/fpc/$(FPC_VERSION)
endif
else
override FPCDIR:=$(subst /$(FPC),,$(firstword $(strip $(wildcard $(addsuffix /$(FPC),$(SEARCHPATH))))))
override FPCDIR:=$(FPCDIR)/..
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl)),)
override FPCDIR:=$(FPCDIR)/..
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl)),)
override FPCDIR:=$(BASEDIR)
ifeq ($(wildcard $(addprefix $(FPCDIR)/,rtl)),)
override FPCDIR=c:/pp
endif
endif
endif
endif
endif
ifndef CROSSBINDIR
CROSSBINDIR:=$(wildcard $(FPCDIR)/bin/$(TARGETSUFFIX))
endif
ifneq ($(findstring $(OS_TARGET),darwin iphonesim ios),)
ifneq ($(findstring $(OS_SOURCE),darwin ios),)
DARWIN2DARWIN=1
endif
endif
ifndef BINUTILSPREFIX
ifndef CROSSBINDIR
ifdef CROSSCOMPILE
ifneq ($(OS_TARGET),msdos)
ifndef DARWIN2DARWIN
ifneq ($(CPU_TARGET),jvm)
BINUTILSPREFIX=$(CPU_TARGET)-$(OS_TARGET)-
ifeq ($(OS_TARGET),android)
ifeq ($(CPU_TARGET),arm)
BINUTILSPREFIX=arm-linux-androideabi-
else
ifeq ($(CPU_TARGET),i386)
BINUTILSPREFIX=i686-linux-android-
else
BINUTILSPREFIX=$(CPU_TARGET)-linux-android-
endif
endif
endif
endif
endif
else
BINUTILSPREFIX=$(OS_TARGET)-
endif
endif
endif
endif
UNITSDIR:=$(wildcard $(FPCDIR)/units/$(TARGETSUFFIX))
ifeq ($(UNITSDIR),)
UNITSDIR:=$(wildcard $(FPCDIR)/units/$(OS_TARGET))
endif
PACKAGESDIR:=$(wildcard $(FPCDIR) $(FPCDIR)/packages)
ifndef FPCFPMAKE
ifdef CROSSCOMPILE
ifeq ($(strip $(wildcard $(addsuffix /compiler/ppc$(SRCEXEEXT),$(FPCDIR)))),)
FPCPROG:=$(strip $(wildcard $(addsuffix /fpc$(SRCEXEEXT),$(SEARCHPATH))))
ifneq ($(FPCPROG),)
FPCPROG:=$(firstword $(FPCPROG))
FPCFPMAKE:=$(shell $(FPCPROG) -PB)
ifeq ($(strip $(wildcard $(FPCFPMAKE))),)
FPCFPMAKE:=$(firstword $(FPCPROG))
endif
else
override FPCFPMAKE=$(firstword $(strip $(wildcard $(addsuffix /ppc386$(SRCEXEEXT),$(SEARCHPATH)))))
endif
else
FPCFPMAKE=$(strip $(wildcard $(addsuffix /compiler/ppc$(SRCEXEEXT),$(FPCDIR))))
FPMAKE_SKIP_CONFIG=-n
export FPCFPMAKE
export FPMAKE_SKIP_CONFIG
endif
else
FPMAKE_SKIP_CONFIG=-n
FPCFPMAKE=$(FPC)
endif
endif
ifeq ($(FULL_TARGET),i386-linux)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),i386-go32v2)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),i386-win32)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),i386-os2)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),i386-freebsd)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),i386-beos)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),i386-haiku)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),i386-netbsd)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),i386-solaris)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),i386-netware)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),i386-openbsd)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),i386-wdosx)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),i386-darwin)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),i386-emx)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),i386-watcom)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),i386-netwlibc)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),i386-wince)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),i386-embedded)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),i386-symbian)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),i386-nativent)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),i386-iphonesim)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),i386-android)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),i386-aros)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),m68k-linux)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),m68k-netbsd)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),m68k-amiga)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),m68k-atari)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),m68k-palmos)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),m68k-macosclassic)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),m68k-embedded)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),powerpc-linux)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),powerpc-netbsd)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),powerpc-amiga)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),powerpc-macosclassic)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),powerpc-darwin)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),powerpc-morphos)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),powerpc-embedded)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),powerpc-wii)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),powerpc-aix)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),sparc-linux)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),sparc-netbsd)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),sparc-solaris)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),sparc-embedded)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),x86_64-linux)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),x86_64-freebsd)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),x86_64-haiku)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),x86_64-netbsd)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),x86_64-solaris)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),x86_64-openbsd)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),x86_64-darwin)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),x86_64-win64)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),x86_64-embedded)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),x86_64-iphonesim)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),x86_64-android)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),x86_64-aros)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),x86_64-dragonfly)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),arm-linux)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),arm-netbsd)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),arm-palmos)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),arm-wince)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),arm-gba)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),arm-nds)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),arm-embedded)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),arm-symbian)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),arm-android)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),arm-aros)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),arm-ios)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),powerpc64-linux)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),powerpc64-darwin)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),powerpc64-embedded)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),powerpc64-aix)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),avr-embedded)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),armeb-linux)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),armeb-embedded)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),mips-linux)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),mipsel-linux)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),mipsel-embedded)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),mipsel-android)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),jvm-java)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),jvm-android)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),i8086-embedded)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),i8086-msdos)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),i8086-win16)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),aarch64-linux)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),aarch64-darwin)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),aarch64-android)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),aarch64-ios)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),wasm-wasm)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
ifeq ($(FULL_TARGET),sparc64-linux)
override TARGET_DIRS+=lesson01 lesson02 lesson03 lesson04 lesson05 lesson06 lesson07 lesson08 lesson09 lesson10 lesson10b lesson11
endif
override INSTALL_FPCPACKAGE=y
ifdef REQUIRE_UNITSDIR
override UNITSDIR+=$(REQUIRE_UNITSDIR)
endif
ifdef REQUIRE_PACKAGESDIR
override PACKAGESDIR+=$(REQUIRE_PACKAGESDIR)
endif
ifdef ZIPINSTALL
ifneq ($(findstring $(OS_TARGET),$(UNIXs)),)
UNIXHier=1
endif
else
ifneq ($(findstring $(OS_SOURCE),$(UNIXs)),)
UNIXHier=1
endif
endif
ifndef INSTALL_PREFIX
ifdef PREFIX
INSTALL_PREFIX=$(PREFIX)
endif
endif
ifndef INSTALL_PREFIX
ifdef UNIXHier
INSTALL_PREFIX=/usr/local
else
ifdef INSTALL_FPCPACKAGE
INSTALL_BASEDIR:=/pp
else
INSTALL_BASEDIR:=/$(PACKAGE_NAME)
endif
endif
endif
export INSTALL_PREFIX
ifdef INSTALL_FPCSUBDIR
export INSTALL_FPCSUBDIR
endif
ifndef DIST_DESTDIR
DIST_DESTDIR:=$(BASEDIR)
endif
export DIST_DESTDIR
ifndef COMPILER_UNITTARGETDIR
ifdef PACKAGEDIR_MAIN
COMPILER_UNITTARGETDIR=$(PACKAGEDIR_MAIN)/units/$(TARGETSUFFIX)
else
COMPILER_UNITTARGETDIR=units/$(TARGETSUFFIX)
endif
endif
ifndef COMPILER_TARGETDIR
COMPILER_TARGETDIR=.
endif
ifndef INSTALL_BASEDIR
ifdef UNIXHier
ifdef INSTALL_FPCPACKAGE
INSTALL_BASEDIR:=$(INSTALL_PREFIX)/lib/fpc/$(FPC_VERSION)
else
INSTALL_BASEDIR:=$(INSTALL_PREFIX)/lib/$(PACKAGE_NAME)
endif
else
INSTALL_BASEDIR:=$(INSTALL_PREFIX)
endif
endif
ifndef INSTALL_BINDIR
ifdef UNIXHier
INSTALL_BINDIR:=$(INSTALL_PREFIX)/bin
else
INSTALL_BINDIR:=$(INSTALL_BASEDIR)/bin
ifdef INSTALL_FPCPACKAGE
ifdef CROSSCOMPILE
ifdef CROSSINSTALL
INSTALL_BINDIR:=$(INSTALL_BINDIR)/$(SOURCESUFFIX)
else
INSTALL_BINDIR:=$(INSTALL_BINDIR)/$(TARGETSUFFIX)
endif
else
INSTALL_BINDIR:=$(INSTALL_BINDIR)/$(TARGETSUFFIX)
endif
endif
endif
endif
ifndef INSTALL_UNITDIR
INSTALL_UNITDIR:=$(INSTALL_BASEDIR)/units/$(TARGETSUFFIX)
ifdef INSTALL_FPCPACKAGE
ifdef PACKAGE_NAME
INSTALL_UNITDIR:=$(INSTALL_UNITDIR)/$(PACKAGE_NAME)
endif
endif
endif
ifndef INSTALL_LIBDIR
ifdef UNIXHier
INSTALL_LIBDIR:=$(INSTALL_PREFIX)/lib
else
INSTALL_LIBDIR:=$(INSTALL_UNITDIR)
endif
endif
ifndef INSTALL_SOURCEDIR
ifdef UNIXHier
ifdef BSDhier
SRCPREFIXDIR=share/src
else
ifdef linuxHier
SRCPREFIXDIR=share/src
else
SRCPREFIXDIR=src
endif
endif
ifdef INSTALL_FPCPACKAGE
ifdef INSTALL_FPCSUBDIR
INSTALL_SOURCEDIR:=$(INSTALL_PREFIX)/$(SRCPREFIXDIR)/fpc-$(FPC_VERSION)/$(INSTALL_FPCSUBDIR)/$(PACKAGE_NAME)
else
INSTALL_SOURCEDIR:=$(INSTALL_PREFIX)/$(SRCPREFIXDIR)/fpc-$(FPC_VERSION)/$(PACKAGE_NAME)
endif
else
INSTALL_SOURCEDIR:=$(INSTALL_PREFIX)/$(SRCPREFIXDIR)/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
endif
else
ifdef INSTALL_FPCPACKAGE
ifdef INSTALL_FPCSUBDIR
INSTALL_SOURCEDIR:=$(INSTALL_BASEDIR)/source/$(INSTALL_FPCSUBDIR)/$(PACKAGE_NAME)
else
INSTALL_SOURCEDIR:=$(INSTALL_BASEDIR)/source/$(PACKAGE_NAME)
endif
else
INSTALL_SOURCEDIR:=$(INSTALL_BASEDIR)/source
endif
endif
endif
ifndef INSTALL_DOCDIR
ifdef UNIXHier
ifdef BSDhier
DOCPREFIXDIR=share/doc
else
ifdef linuxHier
DOCPREFIXDIR=share/doc
else
DOCPREFIXDIR=doc
endif
endif
ifdef INSTALL_FPCPACKAGE
INSTALL_DOCDIR:=$(INSTALL_PREFIX)/$(DOCPREFIXDIR)/fpc-$(FPC_VERSION)/$(PACKAGE_NAME)
else
INSTALL_DOCDIR:=$(INSTALL_PREFIX)/$(DOCPREFIXDIR)/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
endif
else
ifdef INSTALL_FPCPACKAGE
INSTALL_DOCDIR:=$(INSTALL_BASEDIR)/doc/$(PACKAGE_NAME)
else
INSTALL_DOCDIR:=$(INSTALL_BASEDIR)/doc
endif
endif
endif
ifndef INSTALL_EXAMPLEDIR
ifdef UNIXHier
ifdef INSTALL_FPCPACKAGE
ifdef BSDhier
INSTALL_EXAMPLEDIR:=$(INSTALL_PREFIX)/share/examples/fpc-$(FPC_VERSION)/$(PACKAGE_NAME)
else
ifdef linuxHier
INSTALL_EXAMPLEDIR:=$(INSTALL_DOCDIR)/examples
else
INSTALL_EXAMPLEDIR:=$(INSTALL_PREFIX)/doc/fpc-$(FPC_VERSION)/examples/$(PACKAGE_NAME)
endif
endif
else
ifdef BSDhier
INSTALL_EXAMPLEDIR:=$(INSTALL_PREFIX)/share/examples/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
else
ifdef linuxHier
INSTALL_EXAMPLEDIR:=$(INSTALL_DOCDIR)/examples/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
else
INSTALL_EXAMPLEDIR:=$(INSTALL_PREFIX)/doc/$(PACKAGE_NAME)-$(PACKAGE_VERSION)
endif
endif
endif
else
ifdef INSTALL_FPCPACKAGE
INSTALL_EXAMPLEDIR:=$(INSTALL_BASEDIR)/examples/$(PACKAGE_NAME)
else
INSTALL_EXAMPLEDIR:=$(INSTALL_BASEDIR)/examples
endif
endif
endif
ifndef INSTALL_DATADIR
INSTALL_DATADIR=$(INSTALL_BASEDIR)
endif
ifndef INSTALL_SHAREDDIR
INSTALL_SHAREDDIR=$(INSTALL_PREFIX)/lib
endif
ifdef CROSSCOMPILE
ifndef CROSSBINDIR
CROSSBINDIR:=$(wildcard $(CROSSTARGETDIR)/bin/$(SOURCESUFFIX))
ifeq ($(CROSSBINDIR),)
CROSSBINDIR:=$(wildcard $(INSTALL_BASEDIR)/cross/$(TARGETSUFFIX)/bin/$(FULL_SOURCE))
endif
endif
else
CROSSBINDIR=
endif
BATCHEXT=.bat
LOADEREXT=.as
EXEEXT=.exe
PPLEXT=.ppl
PPUEXT=.ppu
OEXT=.o
ASMEXT=.s
SMARTEXT=.sl
STATICLIBEXT=.a
SHAREDLIBEXT=.so
SHAREDLIBPREFIX=libfp
STATICLIBPREFIX=libp
IMPORTLIBPREFIX=libimp
RSTEXT=.rst
EXEDBGEXT=.dbg
ifeq ($(OS_TARGET),go32v1)
STATICLIBPREFIX=
SHORTSUFFIX=v1
endif
ifeq ($(OS_TARGET),go32v2)
STATICLIBPREFIX=
SHORTSUFFIX=dos
IMPORTLIBPREFIX=
endif
ifeq ($(OS_TARGET),watcom)
STATICLIBPREFIX=
OEXT=.obj
ASMEXT=.asm
SHAREDLIBEXT=.dll
SHORTSUFFIX=wat
IMPORTLIBPREFIX=
endif
ifneq ($(CPU_TARGET),jvm)
ifeq ($(OS_TARGET),android)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=lnx
endif
endif
ifeq ($(OS_TARGET),linux)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=lnx
endif
ifeq ($(OS_TARGET),dragonfly)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=df
endif
ifeq ($(OS_TARGET),freebsd)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=fbs
endif
ifeq ($(OS_TARGET),netbsd)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=nbs
endif
ifeq ($(OS_TARGET),openbsd)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=obs
endif
ifeq ($(OS_TARGET),win32)
SHAREDLIBEXT=.dll
SHORTSUFFIX=w32
endif
ifeq ($(OS_TARGET),os2)
BATCHEXT=.cmd
AOUTEXT=.out
STATICLIBPREFIX=
SHAREDLIBEXT=.dll
SHORTSUFFIX=os2
ECHO=echo
IMPORTLIBPREFIX=
endif
ifeq ($(OS_TARGET),emx)
BATCHEXT=.cmd
AOUTEXT=.out
STATICLIBPREFIX=
SHAREDLIBEXT=.dll
SHORTSUFFIX=emx
ECHO=echo
IMPORTLIBPREFIX=
endif
ifeq ($(OS_TARGET),amiga)
EXEEXT=
SHAREDLIBEXT=.library
SHORTSUFFIX=amg
endif
ifeq ($(OS_TARGET),aros)
EXEEXT=
SHAREDLIBEXT=.library
SHORTSUFFIX=aros
endif
ifeq ($(OS_TARGET),morphos)
EXEEXT=
SHAREDLIBEXT=.library
SHORTSUFFIX=mos
endif
ifeq ($(OS_TARGET),atari)
EXEEXT=.ttp
SHORTSUFFIX=ata
endif
ifeq ($(OS_TARGET),beos)
BATCHEXT=.sh
EXEEXT=
SHORTSUFFIX=be
endif
ifeq ($(OS_TARGET),haiku)
BATCHEXT=.sh
EXEEXT=
SHORTSUFFIX=hai
endif
ifeq ($(OS_TARGET),solaris)
BATCHEXT=.sh
EXEEXT=
SHORTSUFFIX=sun
endif
ifeq ($(OS_TARGET),qnx)
BATCHEXT=.sh
EXEEXT=
SHORTSUFFIX=qnx
endif
ifeq ($(OS_TARGET),netware)
EXEEXT=.nlm
STATICLIBPREFIX=
SHORTSUFFIX=nw
IMPORTLIBPREFIX=imp
endif
ifeq ($(OS_TARGET),netwlibc)
EXEEXT=.nlm
STATICLIBPREFIX=
SHORTSUFFIX=nwl
IMPORTLIBPREFIX=imp
endif
ifeq ($(OS_TARGET),macosclassic)
BATCHEXT=
EXEEXT=
DEBUGSYMEXT=.xcoff
SHORTSUFFIX=mac
IMPORTLIBPREFIX=imp
endif
ifneq ($(findstring $(OS_TARGET),darwin iphonesim ios),)
BATCHEXT=.sh
EXEEXT=
HASSHAREDLIB=1
SHORTSUFFIX=dwn
EXEDBGEXT=.dSYM
endif
ifeq ($(OS_TARGET),gba)
EXEEXT=.gba
SHAREDLIBEXT=.so
SHORTSUFFIX=gba
endif
ifeq ($(OS_TARGET),symbian)
SHAREDLIBEXT=.dll
SHORTSUFFIX=symbian
endif
ifeq ($(OS_TARGET),NativeNT)
SHAREDLIBEXT=.dll
SHORTSUFFIX=nativent
endif
ifeq ($(OS_TARGET),wii)
EXEEXT=.dol
SHAREDLIBEXT=.so
SHORTSUFFIX=wii
endif
ifeq ($(OS_TARGET),aix)
BATCHEXT=.sh
EXEEXT=
SHAREDLIBEXT=.a
SHORTSUFFIX=aix
endif
ifeq ($(OS_TARGET),java)
OEXT=.class
ASMEXT=.j
SHAREDLIBEXT=.jar
SHORTSUFFIX=java
endif
ifeq ($(CPU_TARGET),jvm)
ifeq ($(OS_TARGET),android)
OEXT=.class
ASMEXT=.j
SHAREDLIBEXT=.jar
SHORTSUFFIX=android
endif
endif
ifeq ($(OS_TARGET),msdos)
STATICLIBPREFIX=
STATICLIBEXT=.a
SHORTSUFFIX=d16
endif
ifeq ($(OS_TARGET),embedded)
ifeq ($(CPU_TARGET),i8086)
STATICLIBPREFIX=
STATICLIBEXT=.a
else
EXEEXT=.bin
endif
SHORTSUFFIX=emb
endif
ifeq ($(OS_TARGET),win16)
STATICLIBPREFIX=
STATICLIBEXT=.a
SHAREDLIBEXT=.dll
SHORTSUFFIX=w16
endif
ifneq ($(findstring $(OS_SOURCE),$(LIMIT83fs)),)
FPCMADE=fpcmade.$(SHORTSUFFIX)
ZIPSUFFIX=$(SHORTSUFFIX)
ZIPCROSSPREFIX=
ZIPSOURCESUFFIX=src
ZIPEXAMPLESUFFIX=exm
else
FPCMADE=fpcmade.$(TARGETSUFFIX)
ZIPSOURCESUFFIX=.source
ZIPEXAMPLESUFFIX=.examples
ifdef CROSSCOMPILE
ZIPSUFFIX=.$(SOURCESUFFIX)
ZIPCROSSPREFIX=$(TARGETSUFFIX)-
else
ZIPSUFFIX=.$(TARGETSUFFIX)
ZIPCROSSPREFIX=
endif
endif
ifndef ECHO
ECHO:=$(strip $(wildcard $(addsuffix /gecho$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO:=$(strip $(wildcard $(addsuffix /echo$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ECHO),)
ECHO= __missing_command_ECHO
else
ECHO:=$(firstword $(ECHO))
endif
else
ECHO:=$(firstword $(ECHO))
endif
endif
export ECHO
ifndef DATE
DATE:=$(strip $(wildcard $(addsuffix /gdate$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(DATE),)
DATE:=$(strip $(wildcard $(addsuffix /date$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(DATE),)
DATE= __missing_command_DATE
else
DATE:=$(firstword $(DATE))
endif
else
DATE:=$(firstword $(DATE))
endif
endif
export DATE
ifndef GINSTALL
GINSTALL:=$(strip $(wildcard $(addsuffix /ginstall$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(GINSTALL),)
GINSTALL:=$(strip $(wildcard $(addsuffix /install$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(GINSTALL),)
GINSTALL= __missing_command_GINSTALL
else
GINSTALL:=$(firstword $(GINSTALL))
endif
else
GINSTALL:=$(firstword $(GINSTALL))
endif
endif
export GINSTALL
ifndef CPPROG
CPPROG:=$(strip $(wildcard $(addsuffix /cp$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(CPPROG),)
CPPROG= __missing_command_CPPROG
else
CPPROG:=$(firstword $(CPPROG))
endif
endif
export CPPROG
ifndef RMPROG
RMPROG:=$(strip $(wildcard $(addsuffix /rm$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(RMPROG),)
RMPROG= __missing_command_RMPROG
else
RMPROG:=$(firstword $(RMPROG))
endif
endif
export RMPROG
ifndef MVPROG
MVPROG:=$(strip $(wildcard $(addsuffix /mv$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(MVPROG),)
MVPROG= __missing_command_MVPROG
else
MVPROG:=$(firstword $(MVPROG))
endif
endif
export MVPROG
ifndef MKDIRPROG
MKDIRPROG:=$(strip $(wildcard $(addsuffix /gmkdir$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(MKDIRPROG),)
MKDIRPROG:=$(strip $(wildcard $(addsuffix /mkdir$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(MKDIRPROG),)
MKDIRPROG= __missing_command_MKDIRPROG
else
MKDIRPROG:=$(firstword $(MKDIRPROG))
endif
else
MKDIRPROG:=$(firstword $(MKDIRPROG))
endif
endif
export MKDIRPROG
ifndef ECHOREDIR
ifndef inUnix
ECHOREDIR=echo
else
ECHOREDIR=$(ECHO)
endif
endif
ifndef COPY
COPY:=$(CPPROG) -fp
endif
ifndef COPYTREE
COPYTREE:=$(CPPROG) -Rfp
endif
ifndef MKDIRTREE
MKDIRTREE:=$(MKDIRPROG) -p
endif
ifndef MOVE
MOVE:=$(MVPROG) -f
endif
ifndef DEL
DEL:=$(RMPROG) -f
endif
ifndef DELTREE
DELTREE:=$(RMPROG) -rf
endif
ifndef INSTALL
ifdef inUnix
INSTALL:=$(GINSTALL) -c -m 644
else
INSTALL:=$(COPY)
endif
endif
ifndef INSTALLEXE
ifdef inUnix
INSTALLEXE:=$(GINSTALL) -c -m 755
else
INSTALLEXE:=$(COPY)
endif
endif
ifndef MKDIR
MKDIR:=$(GINSTALL) -m 755 -d
endif
export ECHOREDIR COPY COPYTREE MOVE DEL DELTREE INSTALL INSTALLEXE MKDIR
ifndef PPUMOVE
PPUMOVE:=$(strip $(wildcard $(addsuffix /ppumove$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(PPUMOVE),)
PPUMOVE= __missing_command_PPUMOVE
else
PPUMOVE:=$(firstword $(PPUMOVE))
endif
endif
export PPUMOVE
ifndef FPCMAKE
FPCMAKE:=$(strip $(wildcard $(addsuffix /fpcmake$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(FPCMAKE),)
FPCMAKE= __missing_command_FPCMAKE
else
FPCMAKE:=$(firstword $(FPCMAKE))
endif
endif
export FPCMAKE
ifndef ZIPPROG
ZIPPROG:=$(strip $(wildcard $(addsuffix /zip$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(ZIPPROG),)
ZIPPROG= __missing_command_ZIPPROG
else
ZIPPROG:=$(firstword $(ZIPPROG))
endif
endif
export ZIPPROG
ifndef TARPROG
TARPROG:=$(strip $(wildcard $(addsuffix /gtar$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(TARPROG),)
TARPROG:=$(strip $(wildcard $(addsuffix /tar$(SRCEXEEXT),$(SEARCHPATH))))
ifeq ($(TARPROG),)
TARPROG= __missing_command_TARPROG
else
TARPROG:=$(firstword $(TARPROG))
endif
else
TARPROG:=$(firstword $(TARPROG))
endif
endif
export TARPROG
ASNAME=$(BINUTILSPREFIX)as
LDNAME=$(BINUTILSPREFIX)ld
ARNAME=$(BINUTILSPREFIX)ar
RCNAME=$(BINUTILSPREFIX)rc
NASMNAME=$(BINUTILSPREFIX)nasm
ifndef ASPROG
ifdef CROSSBINDIR
ASPROG=$(CROSSBINDIR)/$(ASNAME)$(SRCEXEEXT)
else
ASPROG=$(ASNAME)
endif
endif
ifndef LDPROG
ifdef CROSSBINDIR
LDPROG=$(CROSSBINDIR)/$(LDNAME)$(SRCEXEEXT)
else
LDPROG=$(LDNAME)
endif
endif
ifndef RCPROG
ifdef CROSSBINDIR
RCPROG=$(CROSSBINDIR)/$(RCNAME)$(SRCEXEEXT)
else
RCPROG=$(RCNAME)
endif
endif
ifndef ARPROG
ifdef CROSSBINDIR
ARPROG=$(CROSSBINDIR)/$(ARNAME)$(SRCEXEEXT)
else
ARPROG=$(ARNAME)
endif
endif
ifndef NASMPROG
ifdef CROSSBINDIR
NASMPROG=$(CROSSBINDIR)/$(NASMNAME)$(SRCEXEEXT)
else
NASMPROG=$(NASMNAME)
endif
endif
AS=$(ASPROG)
LD=$(LDPROG)
RC=$(RCPROG)
AR=$(ARPROG)
NASM=$(NASMPROG)
ifdef inUnix
PPAS=./ppas$(SRCBATCHEXT)
else
PPAS=ppas$(SRCBATCHEXT)
endif
ifdef inUnix
LDCONFIG=ldconfig
else
LDCONFIG=
endif
ifdef DATE
DATESTR:=$(shell $(DATE) +%Y%m%d)
else
DATESTR=
endif
ZIPOPT=-9
ZIPEXT=.zip
ifeq ($(USETAR),bz2)
TAROPT=vj
TAREXT=.tar.bz2
else
TAROPT=vz
TAREXT=.tar.gz
endif
override REQUIRE_PACKAGES=libndsfpc
ifeq ($(FULL_TARGET),i386-linux)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),i386-go32v2)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),i386-win32)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),i386-os2)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),i386-freebsd)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),i386-beos)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),i386-haiku)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),i386-netbsd)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),i386-solaris)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),i386-netware)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),i386-openbsd)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),i386-wdosx)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),i386-darwin)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),i386-emx)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),i386-watcom)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),i386-netwlibc)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),i386-wince)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),i386-embedded)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),i386-symbian)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),i386-nativent)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),i386-iphonesim)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),i386-android)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),i386-aros)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),m68k-linux)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),m68k-netbsd)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),m68k-amiga)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),m68k-atari)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),m68k-palmos)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),m68k-macosclassic)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),m68k-embedded)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),powerpc-linux)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),powerpc-netbsd)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),powerpc-amiga)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),powerpc-macosclassic)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),powerpc-darwin)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),powerpc-morphos)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),powerpc-embedded)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),powerpc-wii)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),powerpc-aix)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),sparc-linux)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),sparc-netbsd)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),sparc-solaris)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),sparc-embedded)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),x86_64-linux)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),x86_64-freebsd)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),x86_64-haiku)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),x86_64-netbsd)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),x86_64-solaris)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),x86_64-openbsd)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),x86_64-darwin)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),x86_64-win64)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),x86_64-embedded)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),x86_64-iphonesim)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),x86_64-android)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),x86_64-aros)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),x86_64-dragonfly)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),arm-linux)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),arm-netbsd)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),arm-palmos)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),arm-wince)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),arm-gba)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),arm-nds)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),arm-embedded)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),arm-symbian)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),arm-android)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),arm-aros)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),arm-ios)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),powerpc64-linux)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),powerpc64-darwin)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),powerpc64-embedded)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),powerpc64-aix)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),avr-embedded)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),armeb-linux)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),armeb-embedded)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),mips-linux)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),mipsel-linux)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),mipsel-embedded)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),mipsel-android)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),jvm-java)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),jvm-android)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),i8086-embedded)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),i8086-msdos)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),i8086-win16)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),aarch64-linux)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),aarch64-darwin)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),aarch64-android)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),aarch64-ios)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),wasm-wasm)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifeq ($(FULL_TARGET),sparc64-linux)
REQUIRE_PACKAGES_RTL=1
REQUIRE_PACKAGES_PASZLIB=1
REQUIRE_PACKAGES_FCL-PROCESS=1
REQUIRE_PACKAGES_HASH=1
REQUIRE_PACKAGES_LIBTAR=1
REQUIRE_PACKAGES_FPMKUNIT=1
REQUIRE_PACKAGES_LIBNDSFPC=1
endif
ifdef REQUIRE_PACKAGES_RTL
PACKAGEDIR_RTL:=$(firstword $(subst /Makefile.fpc,,$(strip $(wildcard $(addsuffix /rtl/Makefile.fpc,$(PACKAGESDIR))))))
ifneq ($(PACKAGEDIR_RTL),)
ifneq ($(wildcard $(PACKAGEDIR_RTL)/units/$(TARGETSUFFIX)),)
UNITDIR_RTL=$(PACKAGEDIR_RTL)/units/$(TARGETSUFFIX)
else
UNITDIR_RTL=$(PACKAGEDIR_RTL)
endif
ifneq ($(wildcard $(PACKAGEDIR_RTL)/units/$(SOURCESUFFIX)),)
UNITDIR_FPMAKE_RTL=$(PACKAGEDIR_RTL)/units/$(SOURCESUFFIX)
else
ifneq ($(wildcard $(PACKAGEDIR_RTL)/units_bs/$(SOURCESUFFIX)),)
UNITDIR_FPMAKE_RTL=$(PACKAGEDIR_RTL)/units_bs/$(SOURCESUFFIX)
else
UNITDIR_FPMAKE_RTL=$(PACKAGEDIR_RTL)
endif
endif
ifdef CHECKDEPEND
$(PACKAGEDIR_RTL)/$(OS_TARGET)/$(FPCMADE):
	$(MAKE) -C $(PACKAGEDIR_RTL)/$(OS_TARGET) $(FPCMADE)
override ALLDEPENDENCIES+=$(PACKAGEDIR_RTL)/$(OS_TARGET)/$(FPCMADE)
endif
else
PACKAGEDIR_RTL=
UNITDIR_RTL:=$(subst /Package.fpc,,$(strip $(wildcard $(addsuffix /rtl/Package.fpc,$(UNITSDIR)))))
ifneq ($(UNITDIR_RTL),)
UNITDIR_RTL:=$(firstword $(UNITDIR_RTL))
else
UNITDIR_RTL=
endif
endif
ifdef UNITDIR_RTL
override COMPILER_UNITDIR+=$(UNITDIR_RTL)
endif
ifdef UNITDIR_FPMAKE_RTL
override COMPILER_FPMAKE_UNITDIR+=$(UNITDIR_FPMAKE_RTL)
endif
endif
ifdef REQUIRE_PACKAGES_PASZLIB
PACKAGEDIR_PASZLIB:=$(firstword $(subst /Makefile.fpc,,$(strip $(wildcard $(addsuffix /paszlib/Makefile.fpc,$(PACKAGESDIR))))))
ifneq ($(PACKAGEDIR_PASZLIB),)
ifneq ($(wildcard $(PACKAGEDIR_PASZLIB)/units/$(TARGETSUFFIX)),)
UNITDIR_PASZLIB=$(PACKAGEDIR_PASZLIB)/units/$(TARGETSUFFIX)
else
UNITDIR_PASZLIB=$(PACKAGEDIR_PASZLIB)
endif
ifneq ($(wildcard $(PACKAGEDIR_PASZLIB)/units/$(SOURCESUFFIX)),)
UNITDIR_FPMAKE_PASZLIB=$(PACKAGEDIR_PASZLIB)/units/$(SOURCESUFFIX)
else
ifneq ($(wildcard $(PACKAGEDIR_PASZLIB)/units_bs/$(SOURCESUFFIX)),)
UNITDIR_FPMAKE_PASZLIB=$(PACKAGEDIR_PASZLIB)/units_bs/$(SOURCESUFFIX)
else
UNITDIR_FPMAKE_PASZLIB=$(PACKAGEDIR_PASZLIB)
endif
endif
ifdef CHECKDEPEND
$(PACKAGEDIR_PASZLIB)/$(FPCMADE):
	$(MAKE) -C $(PACKAGEDIR_PASZLIB) $(FPCMADE)
override ALLDEPENDENCIES+=$(PACKAGEDIR_PASZLIB)/$(FPCMADE)
endif
else
PACKAGEDIR_PASZLIB=
UNITDIR_PASZLIB:=$(subst /Package.fpc,,$(strip $(wildcard $(addsuffix /paszlib/Package.fpc,$(UNITSDIR)))))
ifneq ($(UNITDIR_PASZLIB),)
UNITDIR_PASZLIB:=$(firstword $(UNITDIR_PASZLIB))
else
UNITDIR_PASZLIB=
endif
endif
ifdef UNITDIR_PASZLIB
override COMPILER_UNITDIR+=$(UNITDIR_PASZLIB)
endif
ifdef UNITDIR_FPMAKE_PASZLIB
override COMPILER_FPMAKE_UNITDIR+=$(UNITDIR_FPMAKE_PASZLIB)
endif
endif
ifdef REQUIRE_PACKAGES_FCL-PROCESS
PACKAGEDIR_FCL-PROCESS:=$(firstword $(subst /Makefile.fpc,,$(strip $(wildcard $(addsuffix /fcl-process/Makefile.fpc,$(PACKAGESDIR))))))
ifneq ($(PACKAGEDIR_FCL-PROCESS),)
ifneq ($(wildcard $(PACKAGEDIR_FCL-PROCESS)/units/$(TARGETSUFFIX)),)
UNITDIR_FCL-PROCESS=$(PACKAGEDIR_FCL-PROCESS)/units/$(TARGETSUFFIX)
else
UNITDIR_FCL-PROCESS=$(PACKAGEDIR_FCL-PROCESS)
endif
ifneq ($(wildcard $(PACKAGEDIR_FCL-PROCESS)/units/$(SOURCESUFFIX)),)
UNITDIR_FPMAKE_FCL-PROCESS=$(PACKAGEDIR_FCL-PROCESS)/units/$(SOURCESUFFIX)
else
ifneq ($(wildcard $(PACKAGEDIR_FCL-PROCESS)/units_bs/$(SOURCESUFFIX)),)
UNITDIR_FPMAKE_FCL-PROCESS=$(PACKAGEDIR_FCL-PROCESS)/units_bs/$(SOURCESUFFIX)
else
UNITDIR_FPMAKE_FCL-PROCESS=$(PACKAGEDIR_FCL-PROCESS)
endif
endif
ifdef CHECKDEPEND
$(PACKAGEDIR_FCL-PROCESS)/$(FPCMADE):
	$(MAKE) -C $(PACKAGEDIR_FCL-PROCESS) $(FPCMADE)
override ALLDEPENDENCIES+=$(PACKAGEDIR_FCL-PROCESS)/$(FPCMADE)
endif
else
PACKAGEDIR_FCL-PROCESS=
UNITDIR_FCL-PROCESS:=$(subst /Package.fpc,,$(strip $(wildcard $(addsuffix /fcl-process/Package.fpc,$(UNITSDIR)))))
ifneq ($(UNITDIR_FCL-PROCESS),)
UNITDIR_FCL-PROCESS:=$(firstword $(UNITDIR_FCL-PROCESS))
else
UNITDIR_FCL-PROCESS=
endif
endif
ifdef UNITDIR_FCL-PROCESS
override COMPILER_UNITDIR+=$(UNITDIR_FCL-PROCESS)
endif
ifdef UNITDIR_FPMAKE_FCL-PROCESS
override COMPILER_FPMAKE_UNITDIR+=$(UNITDIR_FPMAKE_FCL-PROCESS)
endif
endif
ifdef REQUIRE_PACKAGES_HASH
PACKAGEDIR_HASH:=$(firstword $(subst /Makefile.fpc,,$(strip $(wildcard $(addsuffix /hash/Makefile.fpc,$(PACKAGESDIR))))))
ifneq ($(PACKAGEDIR_HASH),)
ifneq ($(wildcard $(PACKAGEDIR_HASH)/units/$(TARGETSUFFIX)),)
UNITDIR_HASH=$(PACKAGEDIR_HASH)/units/$(TARGETSUFFIX)
else
UNITDIR_HASH=$(PACKAGEDIR_HASH)
endif
ifneq ($(wildcard $(PACKAGEDIR_HASH)/units/$(SOURCESUFFIX)),)
UNITDIR_FPMAKE_HASH=$(PACKAGEDIR_HASH)/units/$(SOURCESUFFIX)
else
ifneq ($(wildcard $(PACKAGEDIR_HASH)/units_bs/$(SOURCESUFFIX)),)
UNITDIR_FPMAKE_HASH=$(PACKAGEDIR_HASH)/units_bs/$(SOURCESUFFIX)
else
UNITDIR_FPMAKE_HASH=$(PACKAGEDIR_HASH)
endif
endif
ifdef CHECKDEPEND
$(PACKAGEDIR_HASH)/$(FPCMADE):
	$(MAKE) -C $(PACKAGEDIR_HASH) $(FPCMADE)
override ALLDEPENDENCIES+=$(PACKAGEDIR_HASH)/$(FPCMADE)
endif
else
PACKAGEDIR_HASH=
UNITDIR_HASH:=$(subst /Package.fpc,,$(strip $(wildcard $(addsuffix /hash/Package.fpc,$(UNITSDIR)))))
ifneq ($(UNITDIR_HASH),)
UNITDIR_HASH:=$(firstword $(UNITDIR_HASH))
else
UNITDIR_HASH=
endif
endif
ifdef UNITDIR_HASH
override COMPILER_UNITDIR+=$(UNITDIR_HASH)
endif
ifdef UNITDIR_FPMAKE_HASH
override COMPILER_FPMAKE_UNITDIR+=$(UNITDIR_FPMAKE_HASH)
endif
endif
ifdef REQUIRE_PACKAGES_LIBTAR
PACKAGEDIR_LIBTAR:=$(firstword $(subst /Makefile.fpc,,$(strip $(wildcard $(addsuffix /libtar/Makefile.fpc,$(PACKAGESDIR))))))
ifneq ($(PACKAGEDIR_LIBTAR),)
ifneq ($(wildcard $(PACKAGEDIR_LIBTAR)/units/$(TARGETSUFFIX)),)
UNITDIR_LIBTAR=$(PACKAGEDIR_LIBTAR)/units/$(TARGETSUFFIX)
else
UNITDIR_LIBTAR=$(PACKAGEDIR_LIBTAR)
endif
ifneq ($(wildcard $(PACKAGEDIR_LIBTAR)/units/$(SOURCESUFFIX)),)
UNITDIR_FPMAKE_LIBTAR=$(PACKAGEDIR_LIBTAR)/units/$(SOURCESUFFIX)
else
ifneq ($(wildcard $(PACKAGEDIR_LIBTAR)/units_bs/$(SOURCESUFFIX)),)
UNITDIR_FPMAKE_LIBTAR=$(PACKAGEDIR_LIBTAR)/units_bs/$(SOURCESUFFIX)
else
UNITDIR_FPMAKE_LIBTAR=$(PACKAGEDIR_LIBTAR)
endif
endif
ifdef CHECKDEPEND
$(PACKAGEDIR_LIBTAR)/$(FPCMADE):
	$(MAKE) -C $(PACKAGEDIR_LIBTAR) $(FPCMADE)
override ALLDEPENDENCIES+=$(PACKAGEDIR_LIBTAR)/$(FPCMADE)
endif
else
PACKAGEDIR_LIBTAR=
UNITDIR_LIBTAR:=$(subst /Package.fpc,,$(strip $(wildcard $(addsuffix /libtar/Package.fpc,$(UNITSDIR)))))
ifneq ($(UNITDIR_LIBTAR),)
UNITDIR_LIBTAR:=$(firstword $(UNITDIR_LIBTAR))
else
UNITDIR_LIBTAR=
endif
endif
ifdef UNITDIR_LIBTAR
override COMPILER_UNITDIR+=$(UNITDIR_LIBTAR)
endif
ifdef UNITDIR_FPMAKE_LIBTAR
override COMPILER_FPMAKE_UNITDIR+=$(UNITDIR_FPMAKE_LIBTAR)
endif
endif
ifdef REQUIRE_PACKAGES_FPMKUNIT
PACKAGEDIR_FPMKUNIT:=$(firstword $(subst /Makefile.fpc,,$(strip $(wildcard $(addsuffix /fpmkunit/Makefile.fpc,$(PACKAGESDIR))))))
ifneq ($(PACKAGEDIR_FPMKUNIT),)
ifneq ($(wildcard $(PACKAGEDIR_FPMKUNIT)/units/$(TARGETSUFFIX)),)
UNITDIR_FPMKUNIT=$(PACKAGEDIR_FPMKUNIT)/units/$(TARGETSUFFIX)
else
UNITDIR_FPMKUNIT=$(PACKAGEDIR_FPMKUNIT)
endif
ifneq ($(wildcard $(PACKAGEDIR_FPMKUNIT)/units/$(SOURCESUFFIX)),)
UNITDIR_FPMAKE_FPMKUNIT=$(PACKAGEDIR_FPMKUNIT)/units/$(SOURCESUFFIX)
else
ifneq ($(wildcard $(PACKAGEDIR_FPMKUNIT)/units_bs/$(SOURCESUFFIX)),)
UNITDIR_FPMAKE_FPMKUNIT=$(PACKAGEDIR_FPMKUNIT)/units_bs/$(SOURCESUFFIX)
else
UNITDIR_FPMAKE_FPMKUNIT=$(PACKAGEDIR_FPMKUNIT)
endif
endif
ifdef CHECKDEPEND
$(PACKAGEDIR_FPMKUNIT)/$(FPCMADE):
	$(MAKE) -C $(PACKAGEDIR_FPMKUNIT) $(FPCMADE)
override ALLDEPENDENCIES+=$(PACKAGEDIR_FPMKUNIT)/$(FPCMADE)
endif
else
PACKAGEDIR_FPMKUNIT=
UNITDIR_FPMKUNIT:=$(subst /Package.fpc,,$(strip $(wildcard $(addsuffix /fpmkunit/Package.fpc,$(UNITSDIR)))))
ifneq ($(UNITDIR_FPMKUNIT),)
UNITDIR_FPMKUNIT:=$(firstword $(UNITDIR_FPMKUNIT))
else
UNITDIR_FPMKUNIT=
endif
endif
ifdef UNITDIR_FPMKUNIT
override COMPILER_UNITDIR+=$(UNITDIR_FPMKUNIT)
endif
ifdef UNITDIR_FPMAKE_FPMKUNIT
override COMPILER_FPMAKE_UNITDIR+=$(UNITDIR_FPMAKE_FPMKUNIT)
endif
endif
ifdef REQUIRE_PACKAGES_LIBNDSFPC
PACKAGEDIR_LIBNDSFPC:=$(firstword $(subst /Makefile.fpc,,$(strip $(wildcard $(addsuffix /libndsfpc/Makefile.fpc,$(PACKAGESDIR))))))
ifneq ($(PACKAGEDIR_LIBNDSFPC),)
ifneq ($(wildcard $(PACKAGEDIR_LIBNDSFPC)/units/$(TARGETSUFFIX)),)
UNITDIR_LIBNDSFPC=$(PACKAGEDIR_LIBNDSFPC)/units/$(TARGETSUFFIX)
else
UNITDIR_LIBNDSFPC=$(PACKAGEDIR_LIBNDSFPC)
endif
ifneq ($(wildcard $(PACKAGEDIR_LIBNDSFPC)/units/$(SOURCESUFFIX)),)
UNITDIR_FPMAKE_LIBNDSFPC=$(PACKAGEDIR_LIBNDSFPC)/units/$(SOURCESUFFIX)
else
ifneq ($(wildcard $(PACKAGEDIR_LIBNDSFPC)/units_bs/$(SOURCESUFFIX)),)
UNITDIR_FPMAKE_LIBNDSFPC=$(PACKAGEDIR_LIBNDSFPC)/units_bs/$(SOURCESUFFIX)
else
UNITDIR_FPMAKE_LIBNDSFPC=$(PACKAGEDIR_LIBNDSFPC)
endif
endif
ifdef CHECKDEPEND
$(PACKAGEDIR_LIBNDSFPC)/$(FPCMADE):
	$(MAKE) -C $(PACKAGEDIR_LIBNDSFPC) $(FPCMADE)
override ALLDEPENDENCIES+=$(PACKAGEDIR_LIBNDSFPC)/$(FPCMADE)
endif
else
PACKAGEDIR_LIBNDSFPC=
UNITDIR_LIBNDSFPC:=$(subst /Package.fpc,,$(strip $(wildcard $(addsuffix /libndsfpc/Package.fpc,$(UNITSDIR)))))
ifneq ($(UNITDIR_LIBNDSFPC),)
UNITDIR_LIBNDSFPC:=$(firstword $(UNITDIR_LIBNDSFPC))
else
UNITDIR_LIBNDSFPC=
endif
endif
ifdef UNITDIR_LIBNDSFPC
override COMPILER_UNITDIR+=$(UNITDIR_LIBNDSFPC)
endif
ifdef UNITDIR_FPMAKE_LIBNDSFPC
override COMPILER_FPMAKE_UNITDIR+=$(UNITDIR_FPMAKE_LIBNDSFPC)
endif
endif
ifndef NOCPUDEF
override FPCOPTDEF=$(ARCH)
endif
ifneq ($(OS_TARGET),$(OS_SOURCE))
override FPCOPT+=-T$(OS_TARGET)
endif
ifneq ($(CPU_TARGET),$(CPU_SOURCE))
override FPCOPT+=-P$(ARCH)
endif
ifeq ($(OS_SOURCE),openbsd)
override FPCOPT+=-FD$(NEW_BINUTILS_PATH)
override FPCMAKEOPT+=-FD$(NEW_BINUTILS_PATH)
override FPMAKE_BUILD_OPT+=-FD$(NEW_BINUTILS_PATH)
endif
ifndef CROSSBOOTSTRAP
ifneq ($(BINUTILSPREFIX),)
override FPCOPT+=-XP$(BINUTILSPREFIX)
endif
ifneq ($(BINUTILSPREFIX),)
override FPCOPT+=-Xr$(RLINKPATH)
endif
endif
ifndef CROSSCOMPILE
ifneq ($(BINUTILSPREFIX),)
override FPCMAKEOPT+=-XP$(BINUTILSPREFIX)
override FPMAKE_BUILD_OPT+=-XP$(BINUTILSPREFIX)
endif
endif
ifdef UNITDIR
override FPCOPT+=$(addprefix -Fu,$(UNITDIR))
endif
ifdef LIBDIR
override FPCOPT+=$(addprefix -Fl,$(LIBDIR))
endif
ifdef OBJDIR
override FPCOPT+=$(addprefix -Fo,$(OBJDIR))
endif
ifdef INCDIR
override FPCOPT+=$(addprefix -Fi,$(INCDIR))
endif
ifdef LINKSMART
override FPCOPT+=-XX
endif
ifdef CREATESMART
override FPCOPT+=-CX
endif
ifdef DEBUG
override FPCOPT+=-gl
override FPCOPTDEF+=DEBUG
endif
ifdef RELEASE
FPCCPUOPT:=-O2
override FPCOPT+=-Ur -Xs $(FPCCPUOPT) -n
override FPCOPTDEF+=RELEASE
endif
ifdef STRIP
override FPCOPT+=-Xs
endif
ifdef OPTIMIZE
override FPCOPT+=-O2
endif
ifdef VERBOSE
override FPCOPT+=-vwni
endif
ifdef COMPILER_OPTIONS
override FPCOPT+=$(COMPILER_OPTIONS)
endif
ifdef COMPILER_UNITDIR
override FPCOPT+=$(addprefix -Fu,$(COMPILER_UNITDIR))
endif
ifdef COMPILER_LIBRARYDIR
override FPCOPT+=$(addprefix -Fl,$(COMPILER_LIBRARYDIR))
endif
ifdef COMPILER_OBJECTDIR
override FPCOPT+=$(addprefix -Fo,$(COMPILER_OBJECTDIR))
endif
ifdef COMPILER_INCLUDEDIR
override FPCOPT+=$(addprefix -Fi,$(COMPILER_INCLUDEDIR))
endif
ifdef CROSSBINDIR
override FPCOPT+=-FD$(CROSSBINDIR)
endif
ifdef COMPILER_TARGETDIR
override FPCOPT+=-FE$(COMPILER_TARGETDIR)
ifeq ($(COMPILER_TARGETDIR),.)
override TARGETDIRPREFIX=
else
override TARGETDIRPREFIX=$(COMPILER_TARGETDIR)/
endif
endif
ifdef COMPILER_UNITTARGETDIR
override FPCOPT+=-FU$(COMPILER_UNITTARGETDIR)
ifeq ($(COMPILER_UNITTARGETDIR),.)
override UNITTARGETDIRPREFIX=
else
override UNITTARGETDIRPREFIX=$(COMPILER_UNITTARGETDIR)/
endif
else
ifdef COMPILER_TARGETDIR
override COMPILER_UNITTARGETDIR=$(COMPILER_TARGETDIR)
override UNITTARGETDIRPREFIX=$(TARGETDIRPREFIX)
endif
endif
ifdef SYSROOTPATH
override FPCOPT+=-XR$(SYSROOTPATH)
else
ifeq ($(OS_TARGET),$(OS_SOURCE))
ifneq ($(findstring $(OS_TARGET),darwin),)
ifneq ($(findstring $(CPU_TARGET),aarch64),)
ifneq ($(wildcard /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk),)
override FPCOPT+=-XR/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk
endif
endif
endif
endif
endif
ifdef CREATESHARED
override FPCOPT+=-Cg
endif
ifneq ($(findstring $(OS_TARGET),dragonfly freebsd openbsd netbsd linux solaris),)
ifneq ($(findstring $(CPU_TARGET),x86_64 mips mipsel),)
override FPCOPT+=-Cg
endif
endif
ifdef LINKSHARED
endif
ifdef OPT
override FPCOPT+=$(OPT)
endif
ifdef FPMAKEBUILDOPT
override FPMAKE_BUILD_OPT+=$(FPMAKEBUILDOPT)
endif
ifdef FPCOPTDEF
override FPCOPT+=$(addprefix -d,$(FPCOPTDEF))
endif
ifdef CFGFILE
override FPCOPT+=@$(CFGFILE)
endif
ifdef USEENV
override FPCEXTCMD:=$(FPCOPT)
override FPCOPT:=!FPCEXTCMD
export FPCEXTCMD
endif
override AFULL_TARGET=$(CPU_TARGET)-$(OS_TARGET)
override AFULL_SOURCE=$(CPU_SOURCE)-$(OS_SOURCE)
ifneq ($(AFULL_TARGET),$(AFULL_SOURCE))
override ACROSSCOMPILE=1
endif
ifdef ACROSSCOMPILE
override FPCOPT+=$(CROSSOPT)
endif
override COMPILER:=$(strip $(FPC) $(FPCOPT))
ifneq (,$(findstring -sh ,$(COMPILER)))
UseEXECPPAS=1
endif
ifneq (,$(findstring -s ,$(COMPILER)))
ifeq ($(FULL_SOURCE),$(FULL_TARGET))
UseEXECPPAS=1
endif
endif
ifneq ($(UseEXECPPAS),1)
EXECPPAS=
else
ifdef RUNBATCH
EXECPPAS:=@$(RUNBATCH) $(PPAS)
else
EXECPPAS:=@$(PPAS)
endif
endif
ifdef TARGET_RSTS
override RSTFILES=$(addsuffix $(RSTEXT),$(TARGET_RSTS))
override CLEANRSTFILES+=$(RSTFILES)
endif
.PHONY: fpc_clean fpc_cleanall fpc_distclean
ifdef EXEFILES
override CLEANEXEFILES:=$(addprefix $(TARGETDIRPREFIX),$(CLEANEXEFILES))
override CLEANEXEDBGFILES:=$(addprefix $(TARGETDIRPREFIX),$(CLEANEXEDBGFILES))
endif
ifdef CLEAN_PROGRAMS
override CLEANEXEFILES+=$(addprefix $(TARGETDIRPREFIX),$(addsuffix $(EXEEXT), $(CLEAN_PROGRAMS)))
override CLEANEXEDBGFILES+=$(addprefix $(TARGETDIRPREFIX),$(addsuffix $(EXEDBGEXT), $(CLEAN_PROGRAMS)))
endif
ifdef CLEAN_UNITS
override CLEANPPUFILES+=$(addsuffix $(PPUEXT),$(CLEAN_UNITS))
endif
ifdef CLEANPPUFILES
override CLEANPPULINKFILES:=$(subst $(PPUEXT),$(OEXT),$(CLEANPPUFILES)) $(addprefix $(STATICLIBPREFIX),$(subst $(PPUEXT),$(STATICLIBEXT),$(CLEANPPUFILES))) $(addprefix $(IMPORTLIBPREFIX),$(subst $(PPUEXT),$(STATICLIBEXT),$(CLEANPPUFILES)))
ifdef DEBUGSYMEXT
override CLEANPPULINKFILES+=$(subst $(PPUEXT),$(DEBUGSYMEXT),$(CLEANPPUFILES))
endif
override CLEANPPUFILES:=$(addprefix $(UNITTARGETDIRPREFIX),$(CLEANPPUFILES))
override CLEANPPULINKFILES:=$(wildcard $(addprefix $(UNITTARGETDIRPREFIX),$(CLEANPPULINKFILES)))
endif
fpc_clean: $(CLEANTARGET)
ifdef CLEANEXEFILES
	-$(DEL) $(CLEANEXEFILES)
endif
ifdef CLEANEXEDBGFILES
	-$(DELTREE) $(CLEANEXEDBGFILES)
endif
ifdef CLEANPPUFILES
	-$(DEL) $(CLEANPPUFILES)
endif
ifneq ($(CLEANPPULINKFILES),)
	-$(DEL) $(CLEANPPULINKFILES)
endif
ifdef CLEANRSTFILES
	-$(DEL) $(addprefix $(UNITTARGETDIRPREFIX),$(CLEANRSTFILES))
endif
ifdef CLEAN_FILES
	-$(DEL) $(CLEAN_FILES)
endif
ifdef LIB_NAME
	-$(DEL) $(LIB_NAME) $(LIB_FULLNAME)
endif
	-$(DEL) $(FPCMADE) Package.fpc $(PPAS) script.res link.res $(FPCEXTFILE) $(REDIRFILE)
	-$(DEL) *$(ASMEXT) *_ppas$(BATCHEXT) ppas$(BATCHEXT) ppaslink$(BATCHEXT)
fpc_cleanall: $(CLEANTARGET)
ifdef CLEANEXEFILES
	-$(DEL) $(CLEANEXEFILES)
endif
ifdef COMPILER_UNITTARGETDIR
ifdef CLEANPPUFILES
	-$(DEL) $(CLEANPPUFILES)
endif
ifneq ($(CLEANPPULINKFILES),)
	-$(DEL) $(CLEANPPULINKFILES)
endif
ifdef CLEANRSTFILES
	-$(DEL) $(addprefix $(UNITTARGETDIRPREFIX),$(CLEANRSTFILES))
endif
endif
ifdef CLEAN_FILES
	-$(DEL) $(CLEAN_FILES)
endif
	-$(DELTREE) units
	-$(DELTREE) bin
	-$(DEL) *$(OEXT) *$(PPUEXT) *$(RSTEXT) *$(ASMEXT) *$(STATICLIBEXT) *$(SHAREDLIBEXT) *$(PPLEXT)
ifneq ($(PPUEXT),.ppu)
	-$(DEL) *.o *.ppu *.a
endif
	-$(DELTREE) *$(SMARTEXT)
	-$(DEL) fpcmade.* Package.fpc $(PPAS) script.res link.res $(FPCEXTFILE) $(REDIRFILE)
	-$(DEL) *_ppas$(BATCHEXT) ppas$(BATCHEXT) ppaslink$(BATCHEXT)
ifdef AOUTEXT
	-$(DEL) *$(AOUTEXT)
endif
ifdef DEBUGSYMEXT
	-$(DEL) *$(DEBUGSYMEXT)
endif
ifdef LOCALFPMAKEBIN
	-$(DEL) $(LOCALFPMAKEBIN)
	-$(DEL) $(FPMAKEBINOBJ)
endif
fpc_distclean: cleanall
.PHONY: fpc_baseinfo
override INFORULES+=fpc_baseinfo
fpc_baseinfo:
	@$(ECHO)
	@$(ECHO)  == Package info ==
	@$(ECHO)  Package Name..... $(PACKAGE_NAME)
	@$(ECHO)  Package Version.. $(PACKAGE_VERSION)
	@$(ECHO)
	@$(ECHO)  == Configuration info ==
	@$(ECHO)
	@$(ECHO)  FPC.......... $(FPC)
	@$(ECHO)  FPC Version.. $(FPC_VERSION)
	@$(ECHO)  Source CPU... $(CPU_SOURCE)
	@$(ECHO)  Target CPU... $(CPU_TARGET)
	@$(ECHO)  Source OS.... $(OS_SOURCE)
	@$(ECHO)  Target OS.... $(OS_TARGET)
	@$(ECHO)  Full Source.. $(FULL_SOURCE)
	@$(ECHO)  Full Target.. $(FULL_TARGET)
	@$(ECHO)  SourceSuffix. $(SOURCESUFFIX)
	@$(ECHO)  TargetSuffix. $(TARGETSUFFIX)
	@$(ECHO)  FPC fpmake... $(FPCFPMAKE)
	@$(ECHO)
	@$(ECHO)  == Directory info ==
	@$(ECHO)
	@$(ECHO)  Required pkgs... $(REQUIRE_PACKAGES)
	@$(ECHO)
	@$(ECHO)  Basedir......... $(BASEDIR)
	@$(ECHO)  FPCDir.......... $(FPCDIR)
	@$(ECHO)  CrossBinDir..... $(CROSSBINDIR)
	@$(ECHO)  UnitsDir........ $(UNITSDIR)
	@$(ECHO)  PackagesDir..... $(PACKAGESDIR)
	@$(ECHO)
	@$(ECHO)  GCC library..... $(GCCLIBDIR)
	@$(ECHO)  Other library... $(OTHERLIBDIR)
	@$(ECHO)
	@$(ECHO)  == Tools info ==
	@$(ECHO)
	@$(ECHO)  As........ $(AS)
	@$(ECHO)  Ld........ $(LD)
	@$(ECHO)  Ar........ $(AR)
	@$(ECHO)  Rc........ $(RC)
	@$(ECHO)
	@$(ECHO)  Mv........ $(MVPROG)
	@$(ECHO)  Cp........ $(CPPROG)
	@$(ECHO)  Rm........ $(RMPROG)
	@$(ECHO)  GInstall.. $(GINSTALL)
	@$(ECHO)  Echo...... $(ECHO)
	@$(ECHO)  Shell..... $(SHELL)
	@$(ECHO)  Date...... $(DATE)
	@$(ECHO)  FPCMake... $(FPCMAKE)
	@$(ECHO)  PPUMove... $(PPUMOVE)
	@$(ECHO)  Zip....... $(ZIPPROG)
	@$(ECHO)
	@$(ECHO)  == Object info ==
	@$(ECHO)
	@$(ECHO)  Target Loaders........ $(TARGET_LOADERS)
	@$(ECHO)  Target Units.......... $(TARGET_UNITS)
	@$(ECHO)  Target Implicit Units. $(TARGET_IMPLICITUNITS)
	@$(ECHO)  Target Programs....... $(TARGET_PROGRAMS)
	@$(ECHO)  Target Dirs........... $(TARGET_DIRS)
	@$(ECHO)  Target Examples....... $(TARGET_EXAMPLES)
	@$(ECHO)  Target ExampleDirs.... $(TARGET_EXAMPLEDIRS)
	@$(ECHO)
	@$(ECHO)  Clean Units......... $(CLEAN_UNITS)
	@$(ECHO)  Clean Files......... $(CLEAN_FILES)
	@$(ECHO)
	@$(ECHO)  Install Units....... $(INSTALL_UNITS)
	@$(ECHO)  Install Files....... $(INSTALL_FILES)
	@$(ECHO)
	@$(ECHO)  == Install info ==
	@$(ECHO)
	@$(ECHO)  DateStr.............. $(DATESTR)
	@$(ECHO)  ZipName.............. $(ZIPNAME)
	@$(ECHO)  ZipPrefix............ $(ZIPPREFIX)
	@$(ECHO)  ZipCrossPrefix....... $(ZIPCROSSPREFIX)
	@$(ECHO)  ZipSuffix............ $(ZIPSUFFIX)
	@$(ECHO)  FullZipName.......... $(FULLZIPNAME)
	@$(ECHO)  Install FPC Package.. $(INSTALL_FPCPACKAGE)
	@$(ECHO)
	@$(ECHO)  Install base dir..... $(INSTALL_BASEDIR)
	@$(ECHO)  Install binary dir... $(INSTALL_BINDIR)
	@$(ECHO)  Install library dir.. $(INSTALL_LIBDIR)
	@$(ECHO)  Install units dir.... $(INSTALL_UNITDIR)
	@$(ECHO)  Install source dir... $(INSTALL_SOURCEDIR)
	@$(ECHO)  Install doc dir...... $(INSTALL_DOCDIR)
	@$(ECHO)  Install example dir.. $(INSTALL_EXAMPLEDIR)
	@$(ECHO)  Install data dir..... $(INSTALL_DATADIR)
	@$(ECHO)
	@$(ECHO)  Dist destination dir. $(DIST_DESTDIR)
	@$(ECHO)  Dist zip name........ $(DIST_ZIPNAME)
	@$(ECHO)
.PHONY: fpc_info
fpc_info: $(INFORULES)
.PHONY: fpc_makefile fpc_makefiles fpc_makefile_sub1 fpc_makefile_sub2 \
	fpc_makefile_dirs
fpc_makefile:
	$(FPCMAKE) -w -T$(OS_TARGET) Makefile.fpc
fpc_makefile_sub1:
ifdef TARGET_DIRS
	$(FPCMAKE) -w -T$(OS_TARGET) $(addsuffix /Makefile.fpc,$(TARGET_DIRS))
endif
ifdef TARGET_EXAMPLEDIRS
	$(FPCMAKE) -w -T$(OS_TARGET) $(addsuffix /Makefile.fpc,$(TARGET_EXAMPLEDIRS))
endif
fpc_makefile_sub2: $(addsuffix _makefile_dirs,$(TARGET_DIRS) $(TARGET_EXAMPLEDIRS))
fpc_makefile_dirs: fpc_makefile_sub1 fpc_makefile_sub2
fpc_makefiles: fpc_makefile fpc_makefile_dirs
ifeq ($(FULL_TARGET),i386-linux)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),i386-go32v2)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),i386-win32)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),i386-os2)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),i386-freebsd)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),i386-beos)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),i386-haiku)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),i386-netbsd)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),i386-solaris)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),i386-netware)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),i386-openbsd)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),i386-wdosx)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),i386-darwin)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),i386-emx)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),i386-watcom)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),i386-netwlibc)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),i386-wince)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),i386-embedded)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),i386-symbian)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),i386-nativent)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),i386-iphonesim)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),i386-android)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),i386-aros)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),m68k-linux)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),m68k-netbsd)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),m68k-amiga)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),m68k-atari)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),m68k-palmos)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),m68k-macosclassic)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),m68k-embedded)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),powerpc-linux)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),powerpc-netbsd)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),powerpc-amiga)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),powerpc-macosclassic)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),powerpc-darwin)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),powerpc-morphos)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),powerpc-embedded)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),powerpc-wii)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),powerpc-aix)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),sparc-linux)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),sparc-netbsd)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),sparc-solaris)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),sparc-embedded)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),x86_64-linux)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),x86_64-freebsd)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),x86_64-haiku)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),x86_64-netbsd)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),x86_64-solaris)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),x86_64-openbsd)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),x86_64-darwin)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),x86_64-win64)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),x86_64-embedded)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),x86_64-iphonesim)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),x86_64-android)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),x86_64-aros)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),x86_64-dragonfly)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),arm-linux)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),arm-netbsd)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),arm-palmos)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),arm-wince)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),arm-gba)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),arm-nds)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),arm-embedded)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),arm-symbian)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),arm-android)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),arm-aros)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),arm-ios)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),powerpc64-linux)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),powerpc64-darwin)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),powerpc64-embedded)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),powerpc64-aix)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),avr-embedded)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),armeb-linux)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),armeb-embedded)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),mips-linux)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),mipsel-linux)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),mipsel-embedded)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),mipsel-android)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),jvm-java)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),jvm-android)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),i8086-embedded)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),i8086-msdos)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),i8086-win16)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),aarch64-linux)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),aarch64-darwin)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),aarch64-android)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),aarch64-ios)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),wasm-wasm)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifeq ($(FULL_TARGET),sparc64-linux)
TARGET_DIRS_LESSON01=1
TARGET_DIRS_LESSON02=1
TARGET_DIRS_LESSON03=1
TARGET_DIRS_LESSON04=1
TARGET_DIRS_LESSON05=1
TARGET_DIRS_LESSON06=1
TARGET_DIRS_LESSON07=1
TARGET_DIRS_LESSON08=1
TARGET_DIRS_LESSON09=1
TARGET_DIRS_LESSON10=1
TARGET_DIRS_LESSON10B=1
TARGET_DIRS_LESSON11=1
endif
ifdef TARGET_DIRS_LESSON01
lesson01_all:
	$(MAKE) -C lesson01 all
lesson01_debug:
	$(MAKE) -C lesson01 debug
lesson01_smart:
	$(MAKE) -C lesson01 smart
lesson01_release:
	$(MAKE) -C lesson01 release
lesson01_units:
	$(MAKE) -C lesson01 units
lesson01_examples:
	$(MAKE) -C lesson01 examples
lesson01_shared:
	$(MAKE) -C lesson01 shared
lesson01_install:
	$(MAKE) -C lesson01 install
lesson01_sourceinstall:
	$(MAKE) -C lesson01 sourceinstall
lesson01_exampleinstall:
	$(MAKE) -C lesson01 exampleinstall
lesson01_distinstall:
	$(MAKE) -C lesson01 distinstall
lesson01_zipinstall:
	$(MAKE) -C lesson01 zipinstall
lesson01_zipsourceinstall:
	$(MAKE) -C lesson01 zipsourceinstall
lesson01_zipexampleinstall:
	$(MAKE) -C lesson01 zipexampleinstall
lesson01_zipdistinstall:
	$(MAKE) -C lesson01 zipdistinstall
lesson01_clean:
	$(MAKE) -C lesson01 clean
lesson01_distclean:
	$(MAKE) -C lesson01 distclean
lesson01_cleanall:
	$(MAKE) -C lesson01 cleanall
lesson01_info:
	$(MAKE) -C lesson01 info
lesson01_makefiles:
	$(MAKE) -C lesson01 makefiles
lesson01:
	$(MAKE) -C lesson01 all
.PHONY: lesson01_all lesson01_debug lesson01_smart lesson01_release lesson01_units lesson01_examples lesson01_shared lesson01_install lesson01_sourceinstall lesson01_exampleinstall lesson01_distinstall lesson01_zipinstall lesson01_zipsourceinstall lesson01_zipexampleinstall lesson01_zipdistinstall lesson01_clean lesson01_distclean lesson01_cleanall lesson01_info lesson01_makefiles lesson01
endif
ifdef TARGET_DIRS_LESSON02
lesson02_all:
	$(MAKE) -C lesson02 all
lesson02_debug:
	$(MAKE) -C lesson02 debug
lesson02_smart:
	$(MAKE) -C lesson02 smart
lesson02_release:
	$(MAKE) -C lesson02 release
lesson02_units:
	$(MAKE) -C lesson02 units
lesson02_examples:
	$(MAKE) -C lesson02 examples
lesson02_shared:
	$(MAKE) -C lesson02 shared
lesson02_install:
	$(MAKE) -C lesson02 install
lesson02_sourceinstall:
	$(MAKE) -C lesson02 sourceinstall
lesson02_exampleinstall:
	$(MAKE) -C lesson02 exampleinstall
lesson02_distinstall:
	$(MAKE) -C lesson02 distinstall
lesson02_zipinstall:
	$(MAKE) -C lesson02 zipinstall
lesson02_zipsourceinstall:
	$(MAKE) -C lesson02 zipsourceinstall
lesson02_zipexampleinstall:
	$(MAKE) -C lesson02 zipexampleinstall
lesson02_zipdistinstall:
	$(MAKE) -C lesson02 zipdistinstall
lesson02_clean:
	$(MAKE) -C lesson02 clean
lesson02_distclean:
	$(MAKE) -C lesson02 distclean
lesson02_cleanall:
	$(MAKE) -C lesson02 cleanall
lesson02_info:
	$(MAKE) -C lesson02 info
lesson02_makefiles:
	$(MAKE) -C lesson02 makefiles
lesson02:
	$(MAKE) -C lesson02 all
.PHONY: lesson02_all lesson02_debug lesson02_smart lesson02_release lesson02_units lesson02_examples lesson02_shared lesson02_install lesson02_sourceinstall lesson02_exampleinstall lesson02_distinstall lesson02_zipinstall lesson02_zipsourceinstall lesson02_zipexampleinstall lesson02_zipdistinstall lesson02_clean lesson02_distclean lesson02_cleanall lesson02_info lesson02_makefiles lesson02
endif
ifdef TARGET_DIRS_LESSON03
lesson03_all:
	$(MAKE) -C lesson03 all
lesson03_debug:
	$(MAKE) -C lesson03 debug
lesson03_smart:
	$(MAKE) -C lesson03 smart
lesson03_release:
	$(MAKE) -C lesson03 release
lesson03_units:
	$(MAKE) -C lesson03 units
lesson03_examples:
	$(MAKE) -C lesson03 examples
lesson03_shared:
	$(MAKE) -C lesson03 shared
lesson03_install:
	$(MAKE) -C lesson03 install
lesson03_sourceinstall:
	$(MAKE) -C lesson03 sourceinstall
lesson03_exampleinstall:
	$(MAKE) -C lesson03 exampleinstall
lesson03_distinstall:
	$(MAKE) -C lesson03 distinstall
lesson03_zipinstall:
	$(MAKE) -C lesson03 zipinstall
lesson03_zipsourceinstall:
	$(MAKE) -C lesson03 zipsourceinstall
lesson03_zipexampleinstall:
	$(MAKE) -C lesson03 zipexampleinstall
lesson03_zipdistinstall:
	$(MAKE) -C lesson03 zipdistinstall
lesson03_clean:
	$(MAKE) -C lesson03 clean
lesson03_distclean:
	$(MAKE) -C lesson03 distclean
lesson03_cleanall:
	$(MAKE) -C lesson03 cleanall
lesson03_info:
	$(MAKE) -C lesson03 info
lesson03_makefiles:
	$(MAKE) -C lesson03 makefiles
lesson03:
	$(MAKE) -C lesson03 all
.PHONY: lesson03_all lesson03_debug lesson03_smart lesson03_release lesson03_units lesson03_examples lesson03_shared lesson03_install lesson03_sourceinstall lesson03_exampleinstall lesson03_distinstall lesson03_zipinstall lesson03_zipsourceinstall lesson03_zipexampleinstall lesson03_zipdistinstall lesson03_clean lesson03_distclean lesson03_cleanall lesson03_info lesson03_makefiles lesson03
endif
ifdef TARGET_DIRS_LESSON04
lesson04_all:
	$(MAKE) -C lesson04 all
lesson04_debug:
	$(MAKE) -C lesson04 debug
lesson04_smart:
	$(MAKE) -C lesson04 smart
lesson04_release:
	$(MAKE) -C lesson04 release
lesson04_units:
	$(MAKE) -C lesson04 units
lesson04_examples:
	$(MAKE) -C lesson04 examples
lesson04_shared:
	$(MAKE) -C lesson04 shared
lesson04_install:
	$(MAKE) -C lesson04 install
lesson04_sourceinstall:
	$(MAKE) -C lesson04 sourceinstall
lesson04_exampleinstall:
	$(MAKE) -C lesson04 exampleinstall
lesson04_distinstall:
	$(MAKE) -C lesson04 distinstall
lesson04_zipinstall:
	$(MAKE) -C lesson04 zipinstall
lesson04_zipsourceinstall:
	$(MAKE) -C lesson04 zipsourceinstall
lesson04_zipexampleinstall:
	$(MAKE) -C lesson04 zipexampleinstall
lesson04_zipdistinstall:
	$(MAKE) -C lesson04 zipdistinstall
lesson04_clean:
	$(MAKE) -C lesson04 clean
lesson04_distclean:
	$(MAKE) -C lesson04 distclean
lesson04_cleanall:
	$(MAKE) -C lesson04 cleanall
lesson04_info:
	$(MAKE) -C lesson04 info
lesson04_makefiles:
	$(MAKE) -C lesson04 makefiles
lesson04:
	$(MAKE) -C lesson04 all
.PHONY: lesson04_all lesson04_debug lesson04_smart lesson04_release lesson04_units lesson04_examples lesson04_shared lesson04_install lesson04_sourceinstall lesson04_exampleinstall lesson04_distinstall lesson04_zipinstall lesson04_zipsourceinstall lesson04_zipexampleinstall lesson04_zipdistinstall lesson04_clean lesson04_distclean lesson04_cleanall lesson04_info lesson04_makefiles lesson04
endif
ifdef TARGET_DIRS_LESSON05
lesson05_all:
	$(MAKE) -C lesson05 all
lesson05_debug:
	$(MAKE) -C lesson05 debug
lesson05_smart:
	$(MAKE) -C lesson05 smart
lesson05_release:
	$(MAKE) -C lesson05 release
lesson05_units:
	$(MAKE) -C lesson05 units
lesson05_examples:
	$(MAKE) -C lesson05 examples
lesson05_shared:
	$(MAKE) -C lesson05 shared
lesson05_install:
	$(MAKE) -C lesson05 install
lesson05_sourceinstall:
	$(MAKE) -C lesson05 sourceinstall
lesson05_exampleinstall:
	$(MAKE) -C lesson05 exampleinstall
lesson05_distinstall:
	$(MAKE) -C lesson05 distinstall
lesson05_zipinstall:
	$(MAKE) -C lesson05 zipinstall
lesson05_zipsourceinstall:
	$(MAKE) -C lesson05 zipsourceinstall
lesson05_zipexampleinstall:
	$(MAKE) -C lesson05 zipexampleinstall
lesson05_zipdistinstall:
	$(MAKE) -C lesson05 zipdistinstall
lesson05_clean:
	$(MAKE) -C lesson05 clean
lesson05_distclean:
	$(MAKE) -C lesson05 distclean
lesson05_cleanall:
	$(MAKE) -C lesson05 cleanall
lesson05_info:
	$(MAKE) -C lesson05 info
lesson05_makefiles:
	$(MAKE) -C lesson05 makefiles
lesson05:
	$(MAKE) -C lesson05 all
.PHONY: lesson05_all lesson05_debug lesson05_smart lesson05_release lesson05_units lesson05_examples lesson05_shared lesson05_install lesson05_sourceinstall lesson05_exampleinstall lesson05_distinstall lesson05_zipinstall lesson05_zipsourceinstall lesson05_zipexampleinstall lesson05_zipdistinstall lesson05_clean lesson05_distclean lesson05_cleanall lesson05_info lesson05_makefiles lesson05
endif
ifdef TARGET_DIRS_LESSON06
lesson06_all:
	$(MAKE) -C lesson06 all
lesson06_debug:
	$(MAKE) -C lesson06 debug
lesson06_smart:
	$(MAKE) -C lesson06 smart
lesson06_release:
	$(MAKE) -C lesson06 release
lesson06_units:
	$(MAKE) -C lesson06 units
lesson06_examples:
	$(MAKE) -C lesson06 examples
lesson06_shared:
	$(MAKE) -C lesson06 shared
lesson06_install:
	$(MAKE) -C lesson06 install
lesson06_sourceinstall:
	$(MAKE) -C lesson06 sourceinstall
lesson06_exampleinstall:
	$(MAKE) -C lesson06 exampleinstall
lesson06_distinstall:
	$(MAKE) -C lesson06 distinstall
lesson06_zipinstall:
	$(MAKE) -C lesson06 zipinstall
lesson06_zipsourceinstall:
	$(MAKE) -C lesson06 zipsourceinstall
lesson06_zipexampleinstall:
	$(MAKE) -C lesson06 zipexampleinstall
lesson06_zipdistinstall:
	$(MAKE) -C lesson06 zipdistinstall
lesson06_clean:
	$(MAKE) -C lesson06 clean
lesson06_distclean:
	$(MAKE) -C lesson06 distclean
lesson06_cleanall:
	$(MAKE) -C lesson06 cleanall
lesson06_info:
	$(MAKE) -C lesson06 info
lesson06_makefiles:
	$(MAKE) -C lesson06 makefiles
lesson06:
	$(MAKE) -C lesson06 all
.PHONY: lesson06_all lesson06_debug lesson06_smart lesson06_release lesson06_units lesson06_examples lesson06_shared lesson06_install lesson06_sourceinstall lesson06_exampleinstall lesson06_distinstall lesson06_zipinstall lesson06_zipsourceinstall lesson06_zipexampleinstall lesson06_zipdistinstall lesson06_clean lesson06_distclean lesson06_cleanall lesson06_info lesson06_makefiles lesson06
endif
ifdef TARGET_DIRS_LESSON07
lesson07_all:
	$(MAKE) -C lesson07 all
lesson07_debug:
	$(MAKE) -C lesson07 debug
lesson07_smart:
	$(MAKE) -C lesson07 smart
lesson07_release:
	$(MAKE) -C lesson07 release
lesson07_units:
	$(MAKE) -C lesson07 units
lesson07_examples:
	$(MAKE) -C lesson07 examples
lesson07_shared:
	$(MAKE) -C lesson07 shared
lesson07_install:
	$(MAKE) -C lesson07 install
lesson07_sourceinstall:
	$(MAKE) -C lesson07 sourceinstall
lesson07_exampleinstall:
	$(MAKE) -C lesson07 exampleinstall
lesson07_distinstall:
	$(MAKE) -C lesson07 distinstall
lesson07_zipinstall:
	$(MAKE) -C lesson07 zipinstall
lesson07_zipsourceinstall:
	$(MAKE) -C lesson07 zipsourceinstall
lesson07_zipexampleinstall:
	$(MAKE) -C lesson07 zipexampleinstall
lesson07_zipdistinstall:
	$(MAKE) -C lesson07 zipdistinstall
lesson07_clean:
	$(MAKE) -C lesson07 clean
lesson07_distclean:
	$(MAKE) -C lesson07 distclean
lesson07_cleanall:
	$(MAKE) -C lesson07 cleanall
lesson07_info:
	$(MAKE) -C lesson07 info
lesson07_makefiles:
	$(MAKE) -C lesson07 makefiles
lesson07:
	$(MAKE) -C lesson07 all
.PHONY: lesson07_all lesson07_debug lesson07_smart lesson07_release lesson07_units lesson07_examples lesson07_shared lesson07_install lesson07_sourceinstall lesson07_exampleinstall lesson07_distinstall lesson07_zipinstall lesson07_zipsourceinstall lesson07_zipexampleinstall lesson07_zipdistinstall lesson07_clean lesson07_distclean lesson07_cleanall lesson07_info lesson07_makefiles lesson07
endif
ifdef TARGET_DIRS_LESSON08
lesson08_all:
	$(MAKE) -C lesson08 all
lesson08_debug:
	$(MAKE) -C lesson08 debug
lesson08_smart:
	$(MAKE) -C lesson08 smart
lesson08_release:
	$(MAKE) -C lesson08 release
lesson08_units:
	$(MAKE) -C lesson08 units
lesson08_examples:
	$(MAKE) -C lesson08 examples
lesson08_shared:
	$(MAKE) -C lesson08 shared
lesson08_install:
	$(MAKE) -C lesson08 install
lesson08_sourceinstall:
	$(MAKE) -C lesson08 sourceinstall
lesson08_exampleinstall:
	$(MAKE) -C lesson08 exampleinstall
lesson08_distinstall:
	$(MAKE) -C lesson08 distinstall
lesson08_zipinstall:
	$(MAKE) -C lesson08 zipinstall
lesson08_zipsourceinstall:
	$(MAKE) -C lesson08 zipsourceinstall
lesson08_zipexampleinstall:
	$(MAKE) -C lesson08 zipexampleinstall
lesson08_zipdistinstall:
	$(MAKE) -C lesson08 zipdistinstall
lesson08_clean:
	$(MAKE) -C lesson08 clean
lesson08_distclean:
	$(MAKE) -C lesson08 distclean
lesson08_cleanall:
	$(MAKE) -C lesson08 cleanall
lesson08_info:
	$(MAKE) -C lesson08 info
lesson08_makefiles:
	$(MAKE) -C lesson08 makefiles
lesson08:
	$(MAKE) -C lesson08 all
.PHONY: lesson08_all lesson08_debug lesson08_smart lesson08_release lesson08_units lesson08_examples lesson08_shared lesson08_install lesson08_sourceinstall lesson08_exampleinstall lesson08_distinstall lesson08_zipinstall lesson08_zipsourceinstall lesson08_zipexampleinstall lesson08_zipdistinstall lesson08_clean lesson08_distclean lesson08_cleanall lesson08_info lesson08_makefiles lesson08
endif
ifdef TARGET_DIRS_LESSON09
lesson09_all:
	$(MAKE) -C lesson09 all
lesson09_debug:
	$(MAKE) -C lesson09 debug
lesson09_smart:
	$(MAKE) -C lesson09 smart
lesson09_release:
	$(MAKE) -C lesson09 release
lesson09_units:
	$(MAKE) -C lesson09 units
lesson09_examples:
	$(MAKE) -C lesson09 examples
lesson09_shared:
	$(MAKE) -C lesson09 shared
lesson09_install:
	$(MAKE) -C lesson09 install
lesson09_sourceinstall:
	$(MAKE) -C lesson09 sourceinstall
lesson09_exampleinstall:
	$(MAKE) -C lesson09 exampleinstall
lesson09_distinstall:
	$(MAKE) -C lesson09 distinstall
lesson09_zipinstall:
	$(MAKE) -C lesson09 zipinstall
lesson09_zipsourceinstall:
	$(MAKE) -C lesson09 zipsourceinstall
lesson09_zipexampleinstall:
	$(MAKE) -C lesson09 zipexampleinstall
lesson09_zipdistinstall:
	$(MAKE) -C lesson09 zipdistinstall
lesson09_clean:
	$(MAKE) -C lesson09 clean
lesson09_distclean:
	$(MAKE) -C lesson09 distclean
lesson09_cleanall:
	$(MAKE) -C lesson09 cleanall
lesson09_info:
	$(MAKE) -C lesson09 info
lesson09_makefiles:
	$(MAKE) -C lesson09 makefiles
lesson09:
	$(MAKE) -C lesson09 all
.PHONY: lesson09_all lesson09_debug lesson09_smart lesson09_release lesson09_units lesson09_examples lesson09_shared lesson09_install lesson09_sourceinstall lesson09_exampleinstall lesson09_distinstall lesson09_zipinstall lesson09_zipsourceinstall lesson09_zipexampleinstall lesson09_zipdistinstall lesson09_clean lesson09_distclean lesson09_cleanall lesson09_info lesson09_makefiles lesson09
endif
ifdef TARGET_DIRS_LESSON10
lesson10_all:
	$(MAKE) -C lesson10 all
lesson10_debug:
	$(MAKE) -C lesson10 debug
lesson10_smart:
	$(MAKE) -C lesson10 smart
lesson10_release:
	$(MAKE) -C lesson10 release
lesson10_units:
	$(MAKE) -C lesson10 units
lesson10_examples:
	$(MAKE) -C lesson10 examples
lesson10_shared:
	$(MAKE) -C lesson10 shared
lesson10_install:
	$(MAKE) -C lesson10 install
lesson10_sourceinstall:
	$(MAKE) -C lesson10 sourceinstall
lesson10_exampleinstall:
	$(MAKE) -C lesson10 exampleinstall
lesson10_distinstall:
	$(MAKE) -C lesson10 distinstall
lesson10_zipinstall:
	$(MAKE) -C lesson10 zipinstall
lesson10_zipsourceinstall:
	$(MAKE) -C lesson10 zipsourceinstall
lesson10_zipexampleinstall:
	$(MAKE) -C lesson10 zipexampleinstall
lesson10_zipdistinstall:
	$(MAKE) -C lesson10 zipdistinstall
lesson10_clean:
	$(MAKE) -C lesson10 clean
lesson10_distclean:
	$(MAKE) -C lesson10 distclean
lesson10_cleanall:
	$(MAKE) -C lesson10 cleanall
lesson10_info:
	$(MAKE) -C lesson10 info
lesson10_makefiles:
	$(MAKE) -C lesson10 makefiles
lesson10:
	$(MAKE) -C lesson10 all
.PHONY: lesson10_all lesson10_debug lesson10_smart lesson10_release lesson10_units lesson10_examples lesson10_shared lesson10_install lesson10_sourceinstall lesson10_exampleinstall lesson10_distinstall lesson10_zipinstall lesson10_zipsourceinstall lesson10_zipexampleinstall lesson10_zipdistinstall lesson10_clean lesson10_distclean lesson10_cleanall lesson10_info lesson10_makefiles lesson10
endif
ifdef TARGET_DIRS_LESSON10B
lesson10b_all:
	$(MAKE) -C lesson10b all
lesson10b_debug:
	$(MAKE) -C lesson10b debug
lesson10b_smart:
	$(MAKE) -C lesson10b smart
lesson10b_release:
	$(MAKE) -C lesson10b release
lesson10b_units:
	$(MAKE) -C lesson10b units
lesson10b_examples:
	$(MAKE) -C lesson10b examples
lesson10b_shared:
	$(MAKE) -C lesson10b shared
lesson10b_install:
	$(MAKE) -C lesson10b install
lesson10b_sourceinstall:
	$(MAKE) -C lesson10b sourceinstall
lesson10b_exampleinstall:
	$(MAKE) -C lesson10b exampleinstall
lesson10b_distinstall:
	$(MAKE) -C lesson10b distinstall
lesson10b_zipinstall:
	$(MAKE) -C lesson10b zipinstall
lesson10b_zipsourceinstall:
	$(MAKE) -C lesson10b zipsourceinstall
lesson10b_zipexampleinstall:
	$(MAKE) -C lesson10b zipexampleinstall
lesson10b_zipdistinstall:
	$(MAKE) -C lesson10b zipdistinstall
lesson10b_clean:
	$(MAKE) -C lesson10b clean
lesson10b_distclean:
	$(MAKE) -C lesson10b distclean
lesson10b_cleanall:
	$(MAKE) -C lesson10b cleanall
lesson10b_info:
	$(MAKE) -C lesson10b info
lesson10b_makefiles:
	$(MAKE) -C lesson10b makefiles
lesson10b:
	$(MAKE) -C lesson10b all
.PHONY: lesson10b_all lesson10b_debug lesson10b_smart lesson10b_release lesson10b_units lesson10b_examples lesson10b_shared lesson10b_install lesson10b_sourceinstall lesson10b_exampleinstall lesson10b_distinstall lesson10b_zipinstall lesson10b_zipsourceinstall lesson10b_zipexampleinstall lesson10b_zipdistinstall lesson10b_clean lesson10b_distclean lesson10b_cleanall lesson10b_info lesson10b_makefiles lesson10b
endif
ifdef TARGET_DIRS_LESSON11
lesson11_all:
	$(MAKE) -C lesson11 all
lesson11_debug:
	$(MAKE) -C lesson11 debug
lesson11_smart:
	$(MAKE) -C lesson11 smart
lesson11_release:
	$(MAKE) -C lesson11 release
lesson11_units:
	$(MAKE) -C lesson11 units
lesson11_examples:
	$(MAKE) -C lesson11 examples
lesson11_shared:
	$(MAKE) -C lesson11 shared
lesson11_install:
	$(MAKE) -C lesson11 install
lesson11_sourceinstall:
	$(MAKE) -C lesson11 sourceinstall
lesson11_exampleinstall:
	$(MAKE) -C lesson11 exampleinstall
lesson11_distinstall:
	$(MAKE) -C lesson11 distinstall
lesson11_zipinstall:
	$(MAKE) -C lesson11 zipinstall
lesson11_zipsourceinstall:
	$(MAKE) -C lesson11 zipsourceinstall
lesson11_zipexampleinstall:
	$(MAKE) -C lesson11 zipexampleinstall
lesson11_zipdistinstall:
	$(MAKE) -C lesson11 zipdistinstall
lesson11_clean:
	$(MAKE) -C lesson11 clean
lesson11_distclean:
	$(MAKE) -C lesson11 distclean
lesson11_cleanall:
	$(MAKE) -C lesson11 cleanall
lesson11_info:
	$(MAKE) -C lesson11 info
lesson11_makefiles:
	$(MAKE) -C lesson11 makefiles
lesson11:
	$(MAKE) -C lesson11 all
.PHONY: lesson11_all lesson11_debug lesson11_smart lesson11_release lesson11_units lesson11_examples lesson11_shared lesson11_install lesson11_sourceinstall lesson11_exampleinstall lesson11_distinstall lesson11_zipinstall lesson11_zipsourceinstall lesson11_zipexampleinstall lesson11_zipdistinstall lesson11_clean lesson11_distclean lesson11_cleanall lesson11_info lesson11_makefiles lesson11
endif
all: $(addsuffix _all,$(TARGET_DIRS))
debug: $(addsuffix _debug,$(TARGET_DIRS))
smart: $(addsuffix _smart,$(TARGET_DIRS))
release: $(addsuffix _release,$(TARGET_DIRS))
units: $(addsuffix _units,$(TARGET_DIRS))
examples: $(addsuffix _examples,$(TARGET_DIRS))
shared: $(addsuffix _shared,$(TARGET_DIRS))
install: $(addsuffix _install,$(TARGET_DIRS))
sourceinstall: $(addsuffix _sourceinstall,$(TARGET_DIRS))
exampleinstall: $(addsuffix _exampleinstall,$(TARGET_DIRS))
distinstall: $(addsuffix _distinstall,$(TARGET_DIRS))
zipinstall: $(addsuffix _zipinstall,$(TARGET_DIRS))
zipsourceinstall: $(addsuffix _zipsourceinstall,$(TARGET_DIRS))
zipexampleinstall: $(addsuffix _zipexampleinstall,$(TARGET_DIRS))
zipdistinstall: $(addsuffix _zipdistinstall,$(TARGET_DIRS))
clean: $(addsuffix _clean,$(TARGET_DIRS))
distclean: $(addsuffix _distclean,$(TARGET_DIRS))
cleanall: $(addsuffix _cleanall,$(TARGET_DIRS))
info: fpc_info
makefiles: fpc_makefiles $(addsuffix _makefiles,$(TARGET_DIRS))
.PHONY: all debug smart release units examples shared install sourceinstall exampleinstall distinstall zipinstall zipsourceinstall zipexampleinstall zipdistinstall clean distclean cleanall info makefiles
ifneq ($(wildcard fpcmake.loc),)
include fpcmake.loc
endif
.NOTPARALLEL:
